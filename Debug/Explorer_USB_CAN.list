
Explorer_USB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005cc4  08005cc4  00015cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08005ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00005948  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00001000  20005b2c  20005b2c  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022999  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000053bb  00000000  00000000  00042bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000af0d  00000000  00000000  00047f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  00052e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  00054070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000095ad  00000000  00000000  000553f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006a7f  00000000  00000000  0005e9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00065424  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000037c0  00000000  00000000  000654a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b54 	.word	0x08005b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08005b54 	.word	0x08005b54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 fa30 	bl	80009fc <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f9e4 	bl	8000978 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	2000011c 	.word	0x2000011c
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f9b5 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f003 ff52 	bl	8004498 <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200041ac 	.word	0x200041ac
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200041ac 	.word	0x200041ac

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000648:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800064a:	4604      	mov	r4, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	d06e      	beq.n	800072e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000650:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000654:	b90b      	cbnz	r3, 800065a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000656:	f003 fd65 	bl	8004124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	f023 0302 	bic.w	r3, r3, #2
 8000662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000664:	f7ff ffd6 	bl	8000614 <HAL_GetTick>
 8000668:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800066a:	6823      	ldr	r3, [r4, #0]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	0791      	lsls	r1, r2, #30
 8000670:	d451      	bmi.n	8000716 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	f042 0201 	orr.w	r2, r2, #1
 8000678:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800067a:	f7ff ffcb 	bl	8000614 <HAL_GetTick>
 800067e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	07d2      	lsls	r2, r2, #31
 8000686:	d554      	bpl.n	8000732 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000688:	7e22      	ldrb	r2, [r4, #24]
 800068a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	bf0c      	ite	eq
 8000690:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000694:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800069a:	7e62      	ldrb	r2, [r4, #25]
 800069c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	bf0c      	ite	eq
 80006a2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006a6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80006aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006ac:	7ea2      	ldrb	r2, [r4, #26]
 80006ae:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	bf0c      	ite	eq
 80006b4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006b8:	f022 0220 	bicne.w	r2, r2, #32
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006be:	7ee2      	ldrb	r2, [r4, #27]
 80006c0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	bf0c      	ite	eq
 80006c6:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006ca:	f042 0210 	orrne.w	r2, r2, #16
 80006ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006d0:	7f22      	ldrb	r2, [r4, #28]
 80006d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	bf0c      	ite	eq
 80006d8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006dc:	f022 0208 	bicne.w	r2, r2, #8
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006e2:	7f62      	ldrb	r2, [r4, #29]
 80006e4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	bf0c      	ite	eq
 80006ea:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006ee:	f022 0204 	bicne.w	r2, r2, #4
 80006f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80006f4:	68e1      	ldr	r1, [r4, #12]
 80006f6:	68a2      	ldr	r2, [r4, #8]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	6921      	ldr	r1, [r4, #16]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	6961      	ldr	r1, [r4, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	6861      	ldr	r1, [r4, #4]
 8000704:	3901      	subs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800070a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800070c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800070e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000710:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000714:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000716:	f7ff ff7d 	bl	8000614 <HAL_GetTick>
 800071a:	1b40      	subs	r0, r0, r5
 800071c:	280a      	cmp	r0, #10
 800071e:	d9a4      	bls.n	800066a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000726:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000728:	2305      	movs	r3, #5
 800072a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800072e:	2001      	movs	r0, #1
}
 8000730:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000732:	f7ff ff6f 	bl	8000614 <HAL_GetTick>
 8000736:	1b40      	subs	r0, r0, r5
 8000738:	280a      	cmp	r0, #10
 800073a:	d9a1      	bls.n	8000680 <HAL_CAN_Init+0x38>
 800073c:	e7f0      	b.n	8000720 <HAL_CAN_Init+0xd8>

0800073e <HAL_CAN_TxMailbox0CompleteCallback>:
 800073e:	4770      	bx	lr

08000740 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000740:	4770      	bx	lr

08000742 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000742:	4770      	bx	lr

08000744 <HAL_CAN_TxMailbox0AbortCallback>:
 8000744:	4770      	bx	lr

08000746 <HAL_CAN_TxMailbox1AbortCallback>:
 8000746:	4770      	bx	lr

08000748 <HAL_CAN_TxMailbox2AbortCallback>:
 8000748:	4770      	bx	lr

0800074a <HAL_CAN_RxFifo0MsgPendingCallback>:
 800074a:	4770      	bx	lr

0800074c <HAL_CAN_RxFifo0FullCallback>:
 800074c:	4770      	bx	lr

0800074e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800074e:	4770      	bx	lr

08000750 <HAL_CAN_RxFifo1FullCallback>:
 8000750:	4770      	bx	lr

08000752 <HAL_CAN_SleepCallback>:
 8000752:	4770      	bx	lr

08000754 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000754:	4770      	bx	lr

08000756 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000756:	4770      	bx	lr

08000758 <HAL_CAN_IRQHandler>:
{
 8000758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800075c:	6803      	ldr	r3, [r0, #0]
 800075e:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000760:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000764:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000766:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800076a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800076e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000772:	f016 0401 	ands.w	r4, r6, #1
{
 8000776:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000778:	d022      	beq.n	80007c0 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800077a:	f017 0401 	ands.w	r4, r7, #1
 800077e:	d007      	beq.n	8000790 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000780:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000782:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000784:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000786:	f140 80a3 	bpl.w	80008d0 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800078a:	f7ff ffd8 	bl	800073e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800078e:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000790:	05fb      	lsls	r3, r7, #23
 8000792:	d509      	bpl.n	80007a8 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800079a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800079c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800079e:	f140 80a5 	bpl.w	80008ec <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80007a2:	4628      	mov	r0, r5
 80007a4:	f7ff ffcc 	bl	8000740 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80007a8:	03fb      	lsls	r3, r7, #15
 80007aa:	d509      	bpl.n	80007c0 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007ac:	682b      	ldr	r3, [r5, #0]
 80007ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007b2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007b4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007b6:	f140 80a7 	bpl.w	8000908 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007ba:	4628      	mov	r0, r5
 80007bc:	f7ff ffc1 	bl	8000742 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80007c0:	0733      	lsls	r3, r6, #28
 80007c2:	d507      	bpl.n	80007d4 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80007c4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80007c8:	bf1f      	itttt	ne
 80007ca:	682b      	ldrne	r3, [r5, #0]
 80007cc:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80007ce:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80007d2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80007d4:	0777      	lsls	r7, r6, #29
 80007d6:	d508      	bpl.n	80007ea <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80007d8:	f01b 0f08 	tst.w	fp, #8
 80007dc:	d005      	beq.n	80007ea <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80007de:	682b      	ldr	r3, [r5, #0]
 80007e0:	2208      	movs	r2, #8
 80007e2:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff ffb1 	bl	800074c <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80007ea:	07b0      	lsls	r0, r6, #30
 80007ec:	d506      	bpl.n	80007fc <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80007ee:	682b      	ldr	r3, [r5, #0]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	0799      	lsls	r1, r3, #30
 80007f4:	d002      	beq.n	80007fc <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80007f6:	4628      	mov	r0, r5
 80007f8:	f7ff ffa7 	bl	800074a <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80007fc:	0672      	lsls	r2, r6, #25
 80007fe:	d507      	bpl.n	8000810 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000800:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000804:	bf1f      	itttt	ne
 8000806:	682b      	ldrne	r3, [r5, #0]
 8000808:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800080a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800080e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000810:	06b3      	lsls	r3, r6, #26
 8000812:	d508      	bpl.n	8000826 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000814:	f01a 0f08 	tst.w	sl, #8
 8000818:	d005      	beq.n	8000826 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	2208      	movs	r2, #8
 800081e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000820:	4628      	mov	r0, r5
 8000822:	f7ff ff95 	bl	8000750 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000826:	06f7      	lsls	r7, r6, #27
 8000828:	d506      	bpl.n	8000838 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800082a:	682b      	ldr	r3, [r5, #0]
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	0798      	lsls	r0, r3, #30
 8000830:	d002      	beq.n	8000838 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000832:	4628      	mov	r0, r5
 8000834:	f7ff ff8b 	bl	800074e <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000838:	03b1      	lsls	r1, r6, #14
 800083a:	d508      	bpl.n	800084e <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800083c:	f019 0f10 	tst.w	r9, #16
 8000840:	d005      	beq.n	800084e <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000842:	682b      	ldr	r3, [r5, #0]
 8000844:	2210      	movs	r2, #16
 8000846:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000848:	4628      	mov	r0, r5
 800084a:	f7ff ff82 	bl	8000752 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800084e:	03f2      	lsls	r2, r6, #15
 8000850:	d508      	bpl.n	8000864 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000852:	f019 0f08 	tst.w	r9, #8
 8000856:	d005      	beq.n	8000864 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	2208      	movs	r2, #8
 800085c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800085e:	4628      	mov	r0, r5
 8000860:	f7ff ff78 	bl	8000754 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000864:	0433      	lsls	r3, r6, #16
 8000866:	d52a      	bpl.n	80008be <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000868:	f019 0f04 	tst.w	r9, #4
 800086c:	682a      	ldr	r2, [r5, #0]
 800086e:	d024      	beq.n	80008ba <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000870:	05f7      	lsls	r7, r6, #23
 8000872:	d504      	bpl.n	800087e <HAL_CAN_IRQHandler+0x126>
 8000874:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000878:	bf18      	it	ne
 800087a:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800087e:	05b0      	lsls	r0, r6, #22
 8000880:	d504      	bpl.n	800088c <HAL_CAN_IRQHandler+0x134>
 8000882:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000886:	bf18      	it	ne
 8000888:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800088c:	0571      	lsls	r1, r6, #21
 800088e:	d504      	bpl.n	800089a <HAL_CAN_IRQHandler+0x142>
 8000890:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000894:	bf18      	it	ne
 8000896:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800089a:	0533      	lsls	r3, r6, #20
 800089c:	d50d      	bpl.n	80008ba <HAL_CAN_IRQHandler+0x162>
 800089e:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80008a2:	d00a      	beq.n	80008ba <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80008a4:	2b30      	cmp	r3, #48	; 0x30
 80008a6:	d04c      	beq.n	8000942 <HAL_CAN_IRQHandler+0x1ea>
 80008a8:	d83c      	bhi.n	8000924 <HAL_CAN_IRQHandler+0x1cc>
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	d043      	beq.n	8000936 <HAL_CAN_IRQHandler+0x1de>
 80008ae:	2b20      	cmp	r3, #32
 80008b0:	d044      	beq.n	800093c <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80008b2:	6993      	ldr	r3, [r2, #24]
 80008b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80008ba:	2304      	movs	r3, #4
 80008bc:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80008be:	b12c      	cbz	r4, 80008cc <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80008c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008c2:	431c      	orrs	r4, r3
 80008c4:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80008c6:	4628      	mov	r0, r5
 80008c8:	f7ff ff45 	bl	8000756 <HAL_CAN_ErrorCallback>
 80008cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80008d0:	077a      	lsls	r2, r7, #29
 80008d2:	d405      	bmi.n	80008e0 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008d4:	f017 0408 	ands.w	r4, r7, #8
 80008d8:	d105      	bne.n	80008e6 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008da:	f7ff ff33 	bl	8000744 <HAL_CAN_TxMailbox0AbortCallback>
 80008de:	e757      	b.n	8000790 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80008e0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80008e4:	e754      	b.n	8000790 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008e6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80008ea:	e751      	b.n	8000790 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008ec:	0579      	lsls	r1, r7, #21
 80008ee:	d502      	bpl.n	80008f6 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008f0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80008f4:	e758      	b.n	80007a8 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80008f6:	053a      	lsls	r2, r7, #20
 80008f8:	d502      	bpl.n	8000900 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80008fa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80008fe:	e753      	b.n	80007a8 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000900:	4628      	mov	r0, r5
 8000902:	f7ff ff20 	bl	8000746 <HAL_CAN_TxMailbox1AbortCallback>
 8000906:	e74f      	b.n	80007a8 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000908:	0379      	lsls	r1, r7, #13
 800090a:	d502      	bpl.n	8000912 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800090c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000910:	e756      	b.n	80007c0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000912:	033a      	lsls	r2, r7, #12
 8000914:	d502      	bpl.n	800091c <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000916:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800091a:	e751      	b.n	80007c0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800091c:	4628      	mov	r0, r5
 800091e:	f7ff ff13 	bl	8000748 <HAL_CAN_TxMailbox2AbortCallback>
 8000922:	e74d      	b.n	80007c0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000924:	2b50      	cmp	r3, #80	; 0x50
 8000926:	d00f      	beq.n	8000948 <HAL_CAN_IRQHandler+0x1f0>
 8000928:	2b60      	cmp	r3, #96	; 0x60
 800092a:	d010      	beq.n	800094e <HAL_CAN_IRQHandler+0x1f6>
 800092c:	2b40      	cmp	r3, #64	; 0x40
 800092e:	d1c0      	bne.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000930:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000934:	e7bd      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000936:	f044 0408 	orr.w	r4, r4, #8
            break;
 800093a:	e7ba      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800093c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000940:	e7b7      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000942:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000946:	e7b4      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000948:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800094c:	e7b1      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800094e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000952:	e7ae      	b.n	80008b2 <HAL_CAN_IRQHandler+0x15a>

08000954 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000956:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000958:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800095c:	041b      	lsls	r3, r3, #16
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	0200      	lsls	r0, r0, #8
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800096e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000970:	60d3      	str	r3, [r2, #12]
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	68dc      	ldr	r4, [r3, #12]
 800097e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000982:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	2b04      	cmp	r3, #4
 800098a:	bf28      	it	cs
 800098c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 0501 	mov.w	r5, #1
 8000994:	fa05 f303 	lsl.w	r3, r5, r3
 8000998:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099c:	bf8c      	ite	hi
 800099e:	3c03      	subhi	r4, #3
 80009a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a2:	4019      	ands	r1, r3
 80009a4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a6:	fa05 f404 	lsl.w	r4, r5, r4
 80009aa:	3c01      	subs	r4, #1
 80009ac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	ea42 0201 	orr.w	r2, r2, r1
 80009b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	bfad      	iteet	ge
 80009ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	f000 000f 	andlt.w	r0, r0, #15
 80009c2:	4b06      	ldrlt	r3, [pc, #24]	; (80009dc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	bfb5      	itete	lt
 80009ca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009d4:	bd30      	pop	{r4, r5, pc}
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00
 80009dc:	e000ed14 	.word	0xe000ed14

080009e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009e0:	2800      	cmp	r0, #0
 80009e2:	db08      	blt.n	80009f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e4:	0942      	lsrs	r2, r0, #5
 80009e6:	2301      	movs	r3, #1
 80009e8:	f000 001f 	and.w	r0, r0, #31
 80009ec:	fa03 f000 	lsl.w	r0, r3, r0
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <HAL_NVIC_EnableIRQ+0x18>)
 80009f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100

080009fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	3801      	subs	r0, #1
 80009fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a02:	d20a      	bcs.n	8000a1a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a08:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	21f0      	movs	r1, #240	; 0xf0
 8000a0c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a28:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d003      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a34:	2001      	movs	r0, #1
 8000a36:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a38:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a40:	6813      	ldr	r3, [r2, #0]
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000a48:	2000      	movs	r0, #0
}
 8000a4a:	4770      	bx	lr

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a50:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c04 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a58:	4a68      	ldr	r2, [pc, #416]	; (8000bfc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000c08 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a60:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a62:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a68:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a70:	45b6      	cmp	lr, r6
 8000a72:	f040 80ae 	bne.w	8000bd2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a76:	684c      	ldr	r4, [r1, #4]
 8000a78:	f024 0710 	bic.w	r7, r4, #16
 8000a7c:	2f02      	cmp	r7, #2
 8000a7e:	d116      	bne.n	8000aae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a80:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a84:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a88:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a8c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a90:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a94:	f04f 0c0f 	mov.w	ip, #15
 8000a98:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a9c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aa0:	690d      	ldr	r5, [r1, #16]
 8000aa2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aa6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000aaa:	f8ca 5020 	str.w	r5, [sl, #32]
 8000aae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ab2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ab4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ab8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000abc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000abe:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000acc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ad2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad6:	d811      	bhi.n	8000afc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ad8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ada:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ade:	68cf      	ldr	r7, [r1, #12]
 8000ae0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ae4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ae8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000af0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000af4:	409f      	lsls	r7, r3
 8000af6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000afa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000afc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000afe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b00:	688f      	ldr	r7, [r1, #8]
 8000b02:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b06:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b08:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0a:	00e5      	lsls	r5, r4, #3
 8000b0c:	d561      	bpl.n	8000bd2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	f04f 0b00 	mov.w	fp, #0
 8000b12:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b16:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b1a:	4d39      	ldr	r5, [pc, #228]	; (8000c00 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b20:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b24:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b28:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b2c:	9703      	str	r7, [sp, #12]
 8000b2e:	9f03      	ldr	r7, [sp, #12]
 8000b30:	f023 0703 	bic.w	r7, r3, #3
 8000b34:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b38:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b3c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b40:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b44:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b48:	f04f 0e0f 	mov.w	lr, #15
 8000b4c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b50:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b52:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b56:	d043      	beq.n	8000be0 <HAL_GPIO_Init+0x194>
 8000b58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b5c:	42a8      	cmp	r0, r5
 8000b5e:	d041      	beq.n	8000be4 <HAL_GPIO_Init+0x198>
 8000b60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	d03f      	beq.n	8000be8 <HAL_GPIO_Init+0x19c>
 8000b68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b6c:	42a8      	cmp	r0, r5
 8000b6e:	d03d      	beq.n	8000bec <HAL_GPIO_Init+0x1a0>
 8000b70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b74:	42a8      	cmp	r0, r5
 8000b76:	d03b      	beq.n	8000bf0 <HAL_GPIO_Init+0x1a4>
 8000b78:	4548      	cmp	r0, r9
 8000b7a:	d03b      	beq.n	8000bf4 <HAL_GPIO_Init+0x1a8>
 8000b7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b80:	42a8      	cmp	r0, r5
 8000b82:	d039      	beq.n	8000bf8 <HAL_GPIO_Init+0x1ac>
 8000b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b88:	42a8      	cmp	r0, r5
 8000b8a:	bf14      	ite	ne
 8000b8c:	2508      	movne	r5, #8
 8000b8e:	2507      	moveq	r5, #7
 8000b90:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b94:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b98:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b9a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b9c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	bf0c      	ite	eq
 8000ba4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ba6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ba8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000baa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	bf0c      	ite	eq
 8000bb2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bb4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bb6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bbe:	bf0c      	ite	eq
 8000bc0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bc4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bc6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf54      	ite	pl
 8000bcc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bce:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bd0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	2b10      	cmp	r3, #16
 8000bd6:	f47f af44 	bne.w	8000a62 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bda:	b005      	add	sp, #20
 8000bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be0:	465d      	mov	r5, fp
 8000be2:	e7d5      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000be4:	2501      	movs	r5, #1
 8000be6:	e7d3      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000be8:	2502      	movs	r5, #2
 8000bea:	e7d1      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000bec:	2503      	movs	r5, #3
 8000bee:	e7cf      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000bf0:	2504      	movs	r5, #4
 8000bf2:	e7cd      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000bf4:	2505      	movs	r5, #5
 8000bf6:	e7cb      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000bf8:	2506      	movs	r5, #6
 8000bfa:	e7c9      	b.n	8000b90 <HAL_GPIO_Init+0x144>
 8000bfc:	40013c00 	.word	0x40013c00
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40021400 	.word	0x40021400

08000c0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	b10a      	cbz	r2, 8000c12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c0e:	6181      	str	r1, [r0, #24]
 8000c10:	4770      	bx	lr
 8000c12:	0409      	lsls	r1, r1, #16
 8000c14:	e7fb      	b.n	8000c0e <HAL_GPIO_WritePin+0x2>

08000c16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c16:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c18:	4604      	mov	r4, r0
{
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000c1c:	b360      	cbz	r0, 8000c78 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c1e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000c22:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c28:	b91b      	cbnz	r3, 8000c32 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c2a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c2e:	f003 fdfd 	bl	800482c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c32:	2303      	movs	r3, #3
 8000c34:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c3a:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c3c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000c40:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000c44:	bf08      	it	eq
 8000c46:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000c48:	f001 fa9e 	bl	8002188 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	466e      	mov	r6, sp
 8000c50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c5a:	e886 0003 	stmia.w	r6, {r0, r1}
 8000c5e:	4625      	mov	r5, r4
 8000c60:	1d27      	adds	r7, r4, #4
 8000c62:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c66:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c6a:	f001 f9d3 	bl	8002014 <USB_CoreInit>
 8000c6e:	4606      	mov	r6, r0
 8000c70:	b120      	cbz	r0, 8000c7c <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000c78:	2501      	movs	r5, #1
 8000c7a:	e050      	b.n	8000d1e <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	6820      	ldr	r0, [r4, #0]
 8000c80:	f001 fa88 	bl	8002194 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c84:	4630      	mov	r0, r6
 8000c86:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c8a:	261c      	movs	r6, #28
 8000c8c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c90:	4601      	mov	r1, r0
 8000c92:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c94:	4596      	cmp	lr, r2
 8000c96:	f100 0001 	add.w	r0, r0, #1
 8000c9a:	d81c      	bhi.n	8000cd6 <HAL_PCD_Init+0xc0>
 8000c9c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c9e:	261c      	movs	r6, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca4:	4586      	cmp	lr, r0
 8000ca6:	f103 0301 	add.w	r3, r3, #1
 8000caa:	d822      	bhi.n	8000cf2 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	466e      	mov	r6, sp
 8000cb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cba:	e886 0003 	stmia.w	r6, {r0, r1}
 8000cbe:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cc2:	6820      	ldr	r0, [r4, #0]
 8000cc4:	f001 faa8 	bl	8002218 <USB_DevInit>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4605      	mov	r5, r0
 8000ccc:	b300      	cbz	r0, 8000d10 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000cd4:	e7d0      	b.n	8000c78 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000cd6:	fb06 4302 	mla	r3, r6, r2, r4
 8000cda:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ce2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ce6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cea:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cec:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cee:	6519      	str	r1, [r3, #80]	; 0x50
 8000cf0:	e7cf      	b.n	8000c92 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000cf2:	fb06 4200 	mla	r2, r6, r0, r4
 8000cf6:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000cfa:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cfe:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d02:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d06:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d0a:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000d0e:	e7c8      	b.n	8000ca2 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000d10:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d14:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d18:	6820      	ldr	r0, [r4, #0]
 8000d1a:	f001 fdcf 	bl	80028bc <USB_DevDisconnect>

  return HAL_OK;
}
 8000d1e:	4628      	mov	r0, r5
 8000d20:	b00b      	add	sp, #44	; 0x2c
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d24 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000d24:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000d28:	2b01      	cmp	r3, #1
{
 8000d2a:	b510      	push	{r4, lr}
 8000d2c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d2e:	d016      	beq.n	8000d5e <HAL_PCD_Start+0x3a>
 8000d30:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d32:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8000d34:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <HAL_PCD_Start+0x28>
 8000d3e:	69a3      	ldr	r3, [r4, #24]
 8000d40:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d42:	bf1e      	ittt	ne
 8000d44:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8000d46:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8000d4a:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000d4c:	f001 fdaa 	bl	80028a4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	f001 fa13 	bl	800217c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000d5c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d5e:	2002      	movs	r0, #2
}
 8000d60:	bd10      	pop	{r4, pc}
	...

08000d64 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d68:	6806      	ldr	r6, [r0, #0]
{
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f001 fddf 	bl	8002932 <USB_GetMode>
 8000d74:	9002      	str	r0, [sp, #8]
 8000d76:	2800      	cmp	r0, #0
 8000d78:	f040 8122 	bne.w	8000fc0 <HAL_PCD_IRQHandler+0x25c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	f001 fda9 	bl	80028d4 <USB_ReadInterrupts>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	f000 811c 	beq.w	8000fc0 <HAL_PCD_IRQHandler+0x25c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	f001 fda3 	bl	80028d4 <USB_ReadInterrupts>
 8000d8e:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d90:	bf48      	it	mi
 8000d92:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000d94:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d96:	bf42      	ittt	mi
 8000d98:	6953      	ldrmi	r3, [r2, #20]
 8000d9a:	f003 0302 	andmi.w	r3, r3, #2
 8000d9e:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000da0:	f001 fd98 	bl	80028d4 <USB_ReadInterrupts>
 8000da4:	0307      	lsls	r7, r0, #12
 8000da6:	f100 810e 	bmi.w	8000fc6 <HAL_PCD_IRQHandler+0x262>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000daa:	6820      	ldr	r0, [r4, #0]
 8000dac:	f001 fd92 	bl	80028d4 <USB_ReadInterrupts>
 8000db0:	0345      	lsls	r5, r0, #13
 8000db2:	d50c      	bpl.n	8000dce <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000db4:	6820      	ldr	r0, [r4, #0]
 8000db6:	f001 fd99 	bl	80028ec <USB_ReadDevAllInEpInterrupt>
 8000dba:	4625      	mov	r5, r4
 8000dbc:	4683      	mov	fp, r0
 8000dbe:	f506 6a10 	add.w	sl, r6, #2304	; 0x900

      epnum = 0U;
 8000dc2:	f04f 0900 	mov.w	r9, #0

      while (ep_intr != 0U)
 8000dc6:	f1bb 0f00 	cmp.w	fp, #0
 8000dca:	f040 81bc 	bne.w	8001146 <HAL_PCD_IRQHandler+0x3e2>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	f001 fd80 	bl	80028d4 <USB_ReadInterrupts>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	da15      	bge.n	8000e04 <HAL_PCD_IRQHandler+0xa0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000dd8:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8000de4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	f040 8241 	bne.w	8001270 <HAL_PCD_IRQHandler+0x50c>
      {
        hpcd->LPM_State = LPM_L0;
 8000dee:	2100      	movs	r1, #0
 8000df0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000df4:	4620      	mov	r0, r4
 8000df6:	f000 fbbf 	bl	8001578 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000dfa:	6822      	ldr	r2, [r4, #0]
 8000dfc:	6953      	ldr	r3, [r2, #20]
 8000dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e02:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	f001 fd65 	bl	80028d4 <USB_ReadInterrupts>
 8000e0a:	0500      	lsls	r0, r0, #20
 8000e0c:	d50b      	bpl.n	8000e26 <HAL_PCD_IRQHandler+0xc2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000e0e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8000e12:	07d9      	lsls	r1, r3, #31
 8000e14:	d502      	bpl.n	8000e1c <HAL_PCD_IRQHandler+0xb8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000e16:	4620      	mov	r0, r4
 8000e18:	f003 fd78 	bl	800490c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000e1c:	6822      	ldr	r2, [r4, #0]
 8000e1e:	6953      	ldr	r3, [r2, #20]
 8000e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e24:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000e26:	6820      	ldr	r0, [r4, #0]
 8000e28:	f001 fd54 	bl	80028d4 <USB_ReadInterrupts>
 8000e2c:	04c2      	lsls	r2, r0, #19
 8000e2e:	d535      	bpl.n	8000e9c <HAL_PCD_IRQHandler+0x138>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000e30:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8000e34:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000e36:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000e3e:	2110      	movs	r1, #16
 8000e40:	f001 f9c0 	bl	80021c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	6860      	ldr	r0, [r4, #4]
 8000e46:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000e4a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	9a02      	ldr	r2, [sp, #8]
 8000e50:	4282      	cmp	r2, r0
 8000e52:	f040 8211 	bne.w	8001278 <HAL_PCD_IRQHandler+0x514>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000e56:	69eb      	ldr	r3, [r5, #28]
 8000e58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000e5c:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000e5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 821b 	beq.w	800129c <HAL_PCD_IRQHandler+0x538>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000e66:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8000e6a:	f043 030b 	orr.w	r3, r3, #11
 8000e6e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000e72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000e74:	f043 030b 	orr.w	r3, r3, #11
 8000e78:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000e7a:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000e7e:	7c21      	ldrb	r1, [r4, #16]
 8000e80:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000e82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000e86:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000e8a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000e8e:	f001 fd6f 	bl	8002970 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	6953      	ldr	r3, [r2, #20]
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	f001 fd19 	bl	80028d4 <USB_ReadInterrupts>
 8000ea2:	0483      	lsls	r3, r0, #18
 8000ea4:	d516      	bpl.n	8000ed4 <HAL_PCD_IRQHandler+0x170>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000ea6:	6820      	ldr	r0, [r4, #0]
 8000ea8:	f001 fd47 	bl	800293a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f001 fa77 	bl	80023a0 <USB_GetDevSpeed>
 8000eb2:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000eb4:	6825      	ldr	r5, [r4, #0]
 8000eb6:	f000 fdab 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8000eba:	7b22      	ldrb	r2, [r4, #12]
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f001 f8e8 	bl	8002094 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f003 fd0e 	bl	80048e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000eca:	6822      	ldr	r2, [r4, #0]
 8000ecc:	6953      	ldr	r3, [r2, #20]
 8000ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed2:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ed4:	6820      	ldr	r0, [r4, #0]
 8000ed6:	f001 fcfd 	bl	80028d4 <USB_ReadInterrupts>
 8000eda:	06c7      	lsls	r7, r0, #27
 8000edc:	d52a      	bpl.n	8000f34 <HAL_PCD_IRQHandler+0x1d0>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	6993      	ldr	r3, [r2, #24]
 8000ee2:	f023 0310 	bic.w	r3, r3, #16
 8000ee6:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000ee8:	6a35      	ldr	r5, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000eea:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8000eee:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ef0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ef4:	f040 81dd 	bne.w	80012b2 <HAL_PCD_IRQHandler+0x54e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ef8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000efc:	421d      	tst	r5, r3
 8000efe:	d014      	beq.n	8000f2a <HAL_PCD_IRQHandler+0x1c6>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f00:	231c      	movs	r3, #28
 8000f02:	fb03 4707 	mla	r7, r3, r7, r4
 8000f06:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8000f10:	4630      	mov	r0, r6
 8000f12:	f001 fc51 	bl	80027b8 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f16:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000f1a:	442b      	add	r3, r5
 8000f1c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000f24:	441d      	add	r5, r3
 8000f26:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f2a:	6822      	ldr	r2, [r4, #0]
 8000f2c:	6993      	ldr	r3, [r2, #24]
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	f001 fccd 	bl	80028d4 <USB_ReadInterrupts>
 8000f3a:	0706      	lsls	r6, r0, #28
 8000f3c:	d507      	bpl.n	8000f4e <HAL_PCD_IRQHandler+0x1ea>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f003 fccd 	bl	80048de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000f44:	6822      	ldr	r2, [r4, #0]
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f4e:	6820      	ldr	r0, [r4, #0]
 8000f50:	f001 fcc0 	bl	80028d4 <USB_ReadInterrupts>
 8000f54:	02c5      	lsls	r5, r0, #11
 8000f56:	d508      	bpl.n	8000f6a <HAL_PCD_IRQHandler+0x206>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f003 fcf6 	bl	800494c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	6953      	ldr	r3, [r2, #20]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f68:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	f001 fcb2 	bl	80028d4 <USB_ReadInterrupts>
 8000f70:	0280      	lsls	r0, r0, #10
 8000f72:	d508      	bpl.n	8000f86 <HAL_PCD_IRQHandler+0x222>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4620      	mov	r0, r4
 8000f78:	f003 fce4 	bl	8004944 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6953      	ldr	r3, [r2, #20]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000f86:	6820      	ldr	r0, [r4, #0]
 8000f88:	f001 fca4 	bl	80028d4 <USB_ReadInterrupts>
 8000f8c:	0041      	lsls	r1, r0, #1
 8000f8e:	d507      	bpl.n	8000fa0 <HAL_PCD_IRQHandler+0x23c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f003 fcdf 	bl	8004954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	6953      	ldr	r3, [r2, #20]
 8000f9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f9e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000fa0:	6820      	ldr	r0, [r4, #0]
 8000fa2:	f001 fc97 	bl	80028d4 <USB_ReadInterrupts>
 8000fa6:	0742      	lsls	r2, r0, #29
 8000fa8:	d50a      	bpl.n	8000fc0 <HAL_PCD_IRQHandler+0x25c>
    {
      temp = hpcd->Instance->GOTGINT;
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000fae:	076b      	lsls	r3, r5, #29
 8000fb0:	d502      	bpl.n	8000fb8 <HAL_PCD_IRQHandler+0x254>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f003 fcd2 	bl	800495c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4315      	orrs	r5, r2
 8000fbe:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000fc0:	b007      	add	sp, #28
 8000fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	f8df b308 	ldr.w	fp, [pc, #776]	; 80012d4 <HAL_PCD_IRQHandler+0x570>
 8000fcc:	f001 fc86 	bl	80028dc <USB_ReadDevAllOutEpInterrupt>
 8000fd0:	f506 6530 	add.w	r5, r6, #2816	; 0xb00
 8000fd4:	4682      	mov	sl, r0
 8000fd6:	46a0      	mov	r8, r4
      epnum = 0U;
 8000fd8:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 8000fda:	f1ba 0f00 	cmp.w	sl, #0
 8000fde:	f43f aee4 	beq.w	8000daa <HAL_PCD_IRQHandler+0x46>
        if ((ep_intr & 0x1U) != 0U)
 8000fe2:	f01a 0f01 	tst.w	sl, #1
 8000fe6:	f000 80a7 	beq.w	8001138 <HAL_PCD_IRQHandler+0x3d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fea:	b2fa      	uxtb	r2, r7
 8000fec:	4611      	mov	r1, r2
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	9203      	str	r2, [sp, #12]
 8000ff2:	f001 fc83 	bl	80028fc <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ff6:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ffa:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ffc:	9a03      	ldr	r2, [sp, #12]
 8000ffe:	d04c      	beq.n	800109a <HAL_PCD_IRQHandler+0x336>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001000:	2301      	movs	r3, #1
 8001002:	60ab      	str	r3, [r5, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001004:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001006:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001008:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800100c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001010:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001014:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001016:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001018:	d154      	bne.n	80010c4 <HAL_PCD_IRQHandler+0x360>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800101a:	0708      	lsls	r0, r1, #28
 800101c:	d514      	bpl.n	8001048 <HAL_PCD_IRQHandler+0x2e4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800101e:	45de      	cmp	lr, fp
 8001020:	d904      	bls.n	800102c <HAL_PCD_IRQHandler+0x2c8>
 8001022:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001024:	bf44      	itt	mi
 8001026:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800102a:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800102c:	4620      	mov	r0, r4
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	f003 fc3e 	bl	80048b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001034:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001038:	2101      	movs	r1, #1
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	f001 fc98 	bl	8002970 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	2208      	movs	r2, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e028      	b.n	800109a <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001048:	0688      	lsls	r0, r1, #26
 800104a:	d501      	bpl.n	8001050 <HAL_PCD_IRQHandler+0x2ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800104c:	2220      	movs	r2, #32
 800104e:	e7f9      	b.n	8001044 <HAL_PCD_IRQHandler+0x2e0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001050:	f011 0f28 	tst.w	r1, #40	; 0x28
 8001054:	d121      	bne.n	800109a <HAL_PCD_IRQHandler+0x336>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001056:	45de      	cmp	lr, fp
 8001058:	d904      	bls.n	8001064 <HAL_PCD_IRQHandler+0x300>
 800105a:	0409      	lsls	r1, r1, #16
 800105c:	d502      	bpl.n	8001064 <HAL_PCD_IRQHandler+0x300>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800105e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001062:	e7ef      	b.n	8001044 <HAL_PCD_IRQHandler+0x2e0>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001064:	691b      	ldr	r3, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8001066:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800106a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800106e:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001070:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001074:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001078:	4419      	add	r1, r3
 800107a:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800107e:	4620      	mov	r0, r4
 8001080:	4611      	mov	r1, r2
 8001082:	f003 fc1b 	bl	80048bc <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001086:	b947      	cbnz	r7, 800109a <HAL_PCD_IRQHandler+0x336>
 8001088:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800108c:	b92b      	cbnz	r3, 800109a <HAL_PCD_IRQHandler+0x336>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800108e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001092:	2101      	movs	r1, #1
 8001094:	6820      	ldr	r0, [r4, #0]
 8001096:	f001 fc6b 	bl	8002970 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800109a:	f019 0f08 	tst.w	r9, #8
 800109e:	d033      	beq.n	8001108 <HAL_PCD_IRQHandler+0x3a4>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a0:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80010a2:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80010a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010aa:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80010ae:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010b0:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80010b2:	d115      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x37c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010b4:	455a      	cmp	r2, fp
 80010b6:	d916      	bls.n	80010e6 <HAL_PCD_IRQHandler+0x382>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010b8:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010ba:	bf44      	itt	mi
 80010bc:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80010c0:	6099      	strmi	r1, [r3, #8]
 80010c2:	e010      	b.n	80010e6 <HAL_PCD_IRQHandler+0x382>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80010c4:	4882      	ldr	r0, [pc, #520]	; (80012d0 <HAL_PCD_IRQHandler+0x56c>)
 80010c6:	4586      	cmp	lr, r0
 80010c8:	d105      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x372>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80010ca:	0408      	lsls	r0, r1, #16
 80010cc:	d4c7      	bmi.n	800105e <HAL_PCD_IRQHandler+0x2fa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010ce:	0688      	lsls	r0, r1, #26
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010d0:	bf44      	itt	mi
 80010d2:	2120      	movmi	r1, #32
 80010d4:	6099      	strmi	r1, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010d6:	4611      	mov	r1, r2
 80010d8:	4620      	mov	r0, r4
 80010da:	f003 fbef 	bl	80048bc <HAL_PCD_DataOutStageCallback>
 80010de:	e7dc      	b.n	800109a <HAL_PCD_IRQHandler+0x336>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010e0:	487b      	ldr	r0, [pc, #492]	; (80012d0 <HAL_PCD_IRQHandler+0x56c>)
 80010e2:	4282      	cmp	r2, r0
 80010e4:	d0e8      	beq.n	80010b8 <HAL_PCD_IRQHandler+0x354>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80010e6:	4620      	mov	r0, r4
 80010e8:	9203      	str	r2, [sp, #12]
 80010ea:	f003 fbe1 	bl	80048b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80010ee:	9a03      	ldr	r2, [sp, #12]
 80010f0:	455a      	cmp	r2, fp
 80010f2:	d907      	bls.n	8001104 <HAL_PCD_IRQHandler+0x3a0>
 80010f4:	6921      	ldr	r1, [r4, #16]
 80010f6:	2901      	cmp	r1, #1
 80010f8:	d104      	bne.n	8001104 <HAL_PCD_IRQHandler+0x3a0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010fa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	f001 fc36 	bl	8002970 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001104:	2308      	movs	r3, #8
 8001106:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001108:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800110c:	bf1c      	itt	ne
 800110e:	2310      	movne	r3, #16
 8001110:	60ab      	strne	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001112:	f019 0f20 	tst.w	r9, #32
 8001116:	d009      	beq.n	800112c <HAL_PCD_IRQHandler+0x3c8>
            if (hpcd->Init.dma_enable == 1U)
 8001118:	6921      	ldr	r1, [r4, #16]
 800111a:	2901      	cmp	r1, #1
 800111c:	d104      	bne.n	8001128 <HAL_PCD_IRQHandler+0x3c4>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800111e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	f001 fc24 	bl	8002970 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001128:	2320      	movs	r3, #32
 800112a:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800112c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001130:	bf1c      	itt	ne
 8001132:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8001136:	60ab      	strne	r3, [r5, #8]
        epnum++;
 8001138:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 800113a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800113e:	3520      	adds	r5, #32
 8001140:	f108 081c 	add.w	r8, r8, #28
 8001144:	e749      	b.n	8000fda <HAL_PCD_IRQHandler+0x276>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001146:	f01b 0f01 	tst.w	fp, #1
 800114a:	f000 8089 	beq.w	8001260 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800114e:	fa5f f389 	uxtb.w	r3, r9
 8001152:	4619      	mov	r1, r3
 8001154:	6820      	ldr	r0, [r4, #0]
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	f001 fbd9 	bl	800290e <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800115c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800115e:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001160:	d524      	bpl.n	80011ac <HAL_PCD_IRQHandler+0x448>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001162:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001166:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001168:	2001      	movs	r0, #1
 800116a:	f009 020f 	and.w	r2, r9, #15
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001172:	ea23 0302 	bic.w	r3, r3, r2
 8001176:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 800117a:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800117c:	f8ca 0008 	str.w	r0, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001180:	4283      	cmp	r3, r0
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001182:	bf01      	itttt	eq
 8001184:	6cab      	ldreq	r3, [r5, #72]	; 0x48
 8001186:	6c6a      	ldreq	r2, [r5, #68]	; 0x44
 8001188:	189b      	addeq	r3, r3, r2
 800118a:	64ab      	streq	r3, [r5, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800118c:	4620      	mov	r0, r4
 800118e:	f003 fb9e 	bl	80048ce <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001192:	6921      	ldr	r1, [r4, #16]
 8001194:	2901      	cmp	r1, #1
 8001196:	d109      	bne.n	80011ac <HAL_PCD_IRQHandler+0x448>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001198:	f1b9 0f00 	cmp.w	r9, #0
 800119c:	d106      	bne.n	80011ac <HAL_PCD_IRQHandler+0x448>
 800119e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011a0:	b923      	cbnz	r3, 80011ac <HAL_PCD_IRQHandler+0x448>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80011a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80011a6:	6820      	ldr	r0, [r4, #0]
 80011a8:	f001 fbe2 	bl	8002970 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80011ac:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80011ae:	bf44      	itt	mi
 80011b0:	2308      	movmi	r3, #8
 80011b2:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80011b6:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80011b8:	bf44      	itt	mi
 80011ba:	2310      	movmi	r3, #16
 80011bc:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011c0:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80011c2:	bf44      	itt	mi
 80011c4:	2340      	movmi	r3, #64	; 0x40
 80011c6:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011ca:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80011cc:	bf44      	itt	mi
 80011ce:	2302      	movmi	r3, #2
 80011d0:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011d4:	063f      	lsls	r7, r7, #24
 80011d6:	d543      	bpl.n	8001260 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 80011d8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011da:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80011dc:	42bb      	cmp	r3, r7
 80011de:	d83f      	bhi.n	8001260 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 80011e0:	1aff      	subs	r7, r7, r3
  len32b = (len + 3U) / 4U;
 80011e2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	9204      	str	r2, [sp, #16]
  len32b = (len + 3U) / 4U;
 80011e8:	429f      	cmp	r7, r3
 80011ea:	bf28      	it	cs
 80011ec:	461f      	movcs	r7, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011ee:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80011f2:	3703      	adds	r7, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011f4:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  len32b = (len + 3U) / 4U;
 80011f8:	08bf      	lsrs	r7, r7, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011fa:	9305      	str	r3, [sp, #20]
 80011fc:	9b05      	ldr	r3, [sp, #20]
 80011fe:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	b29b      	uxth	r3, r3
 8001204:	42bb      	cmp	r3, r7
 8001206:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001208:	d328      	bcc.n	800125c <HAL_PCD_IRQHandler+0x4f8>
 800120a:	4293      	cmp	r3, r2
 800120c:	d926      	bls.n	800125c <HAL_PCD_IRQHandler+0x4f8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800120e:	b963      	cbnz	r3, 800122a <HAL_PCD_IRQHandler+0x4c6>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001210:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001212:	f009 010f 	and.w	r1, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001216:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800121a:	2001      	movs	r0, #1
 800121c:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001220:	ea22 0201 	bic.w	r2, r2, r1
 8001224:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8001228:	e01a      	b.n	8001260 <HAL_PCD_IRQHandler+0x4fc>
    len = ep->xfer_len - ep->xfer_count;
 800122a:	eba3 0802 	sub.w	r8, r3, r2
 800122e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001230:	9a03      	ldr	r2, [sp, #12]
 8001232:	9804      	ldr	r0, [sp, #16]
 8001234:	4598      	cmp	r8, r3
 8001236:	bf28      	it	cs
 8001238:	4698      	movcs	r8, r3
 800123a:	7c23      	ldrb	r3, [r4, #16]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001240:	fa1f f388 	uxth.w	r3, r8
 8001244:	f001 f9b6 	bl	80025b4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001248:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800124a:	4443      	add	r3, r8
 800124c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800124e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8001250:	f108 0703 	add.w	r7, r8, #3
    ep->xfer_count += len;
 8001254:	4443      	add	r3, r8
    len32b = (len + 3U) / 4U;
 8001256:	08bf      	lsrs	r7, r7, #2
    ep->xfer_count += len;
 8001258:	656b      	str	r3, [r5, #84]	; 0x54
 800125a:	e7cf      	b.n	80011fc <HAL_PCD_IRQHandler+0x498>
  if (ep->xfer_len <= ep->xfer_count)
 800125c:	4293      	cmp	r3, r2
 800125e:	d9d7      	bls.n	8001210 <HAL_PCD_IRQHandler+0x4ac>
        epnum++;
 8001260:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001264:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001268:	351c      	adds	r5, #28
 800126a:	f10a 0a20 	add.w	sl, sl, #32
 800126e:	e5aa      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_ResumeCallback(hpcd);
 8001270:	4620      	mov	r0, r4
 8001272:	f003 fb63 	bl	800493c <HAL_PCD_ResumeCallback>
 8001276:	e5c0      	b.n	8000dfa <HAL_PCD_IRQHandler+0x96>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001278:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001280:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001282:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001286:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800128a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800128e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	9a02      	ldr	r2, [sp, #8]
 8001294:	3201      	adds	r2, #1
 8001296:	9202      	str	r2, [sp, #8]
 8001298:	3320      	adds	r3, #32
 800129a:	e5d8      	b.n	8000e4e <HAL_PCD_IRQHandler+0xea>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800129c:	696b      	ldr	r3, [r5, #20]
 800129e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80012a6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80012a8:	692b      	ldr	r3, [r5, #16]
 80012aa:	f043 030b 	orr.w	r3, r3, #11
 80012ae:	612b      	str	r3, [r5, #16]
 80012b0:	e5e3      	b.n	8000e7a <HAL_PCD_IRQHandler+0x116>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	f47f ae39 	bne.w	8000f2a <HAL_PCD_IRQHandler+0x1c6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012b8:	2208      	movs	r2, #8
 80012ba:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80012be:	4630      	mov	r0, r6
 80012c0:	f001 fa7a 	bl	80027b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c4:	231c      	movs	r3, #28
 80012c6:	fb03 4707 	mla	r7, r3, r7, r4
 80012ca:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80012ce:	e627      	b.n	8000f20 <HAL_PCD_IRQHandler+0x1bc>
 80012d0:	4f54310a 	.word	0x4f54310a
 80012d4:	4f54300a 	.word	0x4f54300a

080012d8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80012d8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80012dc:	2a01      	cmp	r2, #1
{
 80012de:	b510      	push	{r4, lr}
 80012e0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012e2:	d00b      	beq.n	80012fc <HAL_PCD_SetAddress+0x24>
 80012e4:	2201      	movs	r2, #1
 80012e6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80012ea:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012ee:	6800      	ldr	r0, [r0, #0]
 80012f0:	f001 fac8 	bl	8002884 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80012fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012fc:	2002      	movs	r0, #2
}
 80012fe:	bd10      	pop	{r4, pc}

08001300 <HAL_PCD_EP_Open>:
{
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8001308:	f011 0f80 	tst.w	r1, #128	; 0x80
 800130c:	f04f 061c 	mov.w	r6, #28
 8001310:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001312:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8001316:	bf15      	itete	ne
 8001318:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 800131c:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001320:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001322:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8001326:	bf15      	itete	ne
 8001328:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800132a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800132c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8001330:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8001334:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001336:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8001338:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 800133a:	b2c0      	uxtb	r0, r0
 800133c:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800133e:	b102      	cbz	r2, 8001342 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8001340:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001342:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001344:	bf04      	itt	eq
 8001346:	2300      	moveq	r3, #0
 8001348:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800134a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800134e:	2b01      	cmp	r3, #1
 8001350:	d009      	beq.n	8001366 <HAL_PCD_EP_Open+0x66>
 8001352:	2301      	movs	r3, #1
 8001354:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f001 f82c 	bl	80023b6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800135e:	2000      	movs	r0, #0
 8001360:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8001364:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001366:	2002      	movs	r0, #2
}
 8001368:	bd70      	pop	{r4, r5, r6, pc}

0800136a <HAL_PCD_EP_Close>:
{
 800136a:	f001 030f 	and.w	r3, r1, #15
 800136e:	b2da      	uxtb	r2, r3
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
 8001374:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8001376:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800137a:	fb00 4102 	mla	r1, r0, r2, r4
 800137e:	bf19      	ittee	ne
 8001380:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001382:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8001386:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800138a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 800138e:	bf15      	itete	ne
 8001390:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001392:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001394:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8001398:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800139c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800139e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d009      	beq.n	80013ba <HAL_PCD_EP_Close+0x50>
 80013a6:	2301      	movs	r3, #1
 80013a8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013ac:	6820      	ldr	r0, [r4, #0]
 80013ae:	f001 f845 	bl	800243c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80013b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80013ba:	2002      	movs	r0, #2
}
 80013bc:	bd10      	pop	{r4, pc}

080013be <HAL_PCD_EP_Receive>:
{
 80013be:	b538      	push	{r3, r4, r5, lr}
 80013c0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c4:	241c      	movs	r4, #28
 80013c6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80013ca:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ce:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80013d2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80013d6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80013d8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80013dc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80013e0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80013e8:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013ea:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80013ec:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80013ee:	bf08      	it	eq
 80013f0:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80013f4:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013f6:	b91d      	cbnz	r5, 8001400 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013f8:	f001 f852 	bl	80024a0 <USB_EP0StartXfer>
}
 80013fc:	2000      	movs	r0, #0
 80013fe:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001400:	f001 f8ec 	bl	80025dc <USB_EPStartXfer>
 8001404:	e7fa      	b.n	80013fc <HAL_PCD_EP_Receive+0x3e>

08001406 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001406:	231c      	movs	r3, #28
 8001408:	f001 010f 	and.w	r1, r1, #15
 800140c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001410:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001414:	4770      	bx	lr

08001416 <HAL_PCD_EP_Transmit>:
{
 8001416:	b538      	push	{r3, r4, r5, lr}
 8001418:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141c:	241c      	movs	r4, #28
 800141e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001422:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001426:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001428:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800142e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8001430:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8001432:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001436:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800143a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800143c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800143e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001440:	bf08      	it	eq
 8001442:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001444:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001446:	b91d      	cbnz	r5, 8001450 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001448:	f001 f82a 	bl	80024a0 <USB_EP0StartXfer>
}
 800144c:	2000      	movs	r0, #0
 800144e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001450:	f001 f8c4 	bl	80025dc <USB_EPStartXfer>
 8001454:	e7fa      	b.n	800144c <HAL_PCD_EP_Transmit+0x36>

08001456 <HAL_PCD_EP_SetStall>:
{
 8001456:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001458:	6843      	ldr	r3, [r0, #4]
 800145a:	f001 050f 	and.w	r5, r1, #15
 800145e:	429d      	cmp	r5, r3
{
 8001460:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001462:	d82e      	bhi.n	80014c2 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001464:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001468:	f04f 021c 	mov.w	r2, #28
 800146c:	d01f      	beq.n	80014ae <HAL_PCD_EP_SetStall+0x58>
    ep->is_in = 1U;
 800146e:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001472:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8001476:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001478:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800147a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800147e:	2201      	movs	r2, #1
 8001480:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001482:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001484:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001488:	4291      	cmp	r1, r2
 800148a:	d01c      	beq.n	80014c6 <HAL_PCD_EP_SetStall+0x70>
 800148c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001490:	4619      	mov	r1, r3
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	f001 f99e 	bl	80027d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001498:	b92d      	cbnz	r5, 80014a6 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800149a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800149e:	7c21      	ldrb	r1, [r4, #16]
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	f001 fa65 	bl	8002970 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80014ae:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80014b2:	fb02 0101 	mla	r1, r2, r1, r0
 80014b6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80014b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80014bc:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80014c0:	e7dd      	b.n	800147e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80014c6:	2002      	movs	r0, #2
}
 80014c8:	bd38      	pop	{r3, r4, r5, pc}

080014ca <HAL_PCD_EP_ClrStall>:
{
 80014ca:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014cc:	6843      	ldr	r3, [r0, #4]
 80014ce:	f001 020f 	and.w	r2, r1, #15
 80014d2:	429a      	cmp	r2, r3
{
 80014d4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d6:	d826      	bhi.n	8001526 <HAL_PCD_EP_ClrStall+0x5c>
 80014d8:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 80014da:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014de:	fb03 0102 	mla	r1, r3, r2, r0
 80014e2:	bf19      	ittee	ne
 80014e4:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80014e6:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80014ee:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 80014f2:	bf14      	ite	ne
 80014f4:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80014f6:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80014f8:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80014fc:	bf14      	ite	ne
 80014fe:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8001502:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001506:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001508:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800150a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00b      	beq.n	800152a <HAL_PCD_EP_ClrStall+0x60>
 8001512:	2301      	movs	r3, #1
 8001514:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	f001 f988 	bl	800282e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800151e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001522:	4628      	mov	r0, r5
 8001524:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800152a:	2002      	movs	r0, #2
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}

0800152e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800152e:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001530:	6804      	ldr	r4, [r0, #0]
 8001532:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001534:	b921      	cbnz	r1, 8001540 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800153a:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800153c:	2000      	movs	r0, #0
 800153e:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001540:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001542:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001544:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001548:	2000      	movs	r0, #0
 800154a:	1c46      	adds	r6, r0, #1
 800154c:	b2c0      	uxtb	r0, r0
 800154e:	4285      	cmp	r5, r0
 8001550:	d806      	bhi.n	8001560 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001552:	313f      	adds	r1, #63	; 0x3f
 8001554:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800155c:	6063      	str	r3, [r4, #4]
 800155e:	e7ed      	b.n	800153c <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001560:	3040      	adds	r0, #64	; 0x40
 8001562:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001566:	6840      	ldr	r0, [r0, #4]
 8001568:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800156c:	4630      	mov	r0, r6
 800156e:	e7ec      	b.n	800154a <HAL_PCDEx_SetTxFiFo+0x1c>

08001570 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001570:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001572:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001574:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001576:	4770      	bx	lr

08001578 <HAL_PCDEx_LPM_Callback>:
 8001578:	4770      	bx	lr
	...

0800157c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	4604      	mov	r4, r0
 8001582:	b918      	cbnz	r0, 800158c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001586:	b002      	add	sp, #8
 8001588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158c:	6803      	ldr	r3, [r0, #0]
 800158e:	07dd      	lsls	r5, r3, #31
 8001590:	d410      	bmi.n	80015b4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	0798      	lsls	r0, r3, #30
 8001596:	d458      	bmi.n	800164a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	071a      	lsls	r2, r3, #28
 800159c:	f100 809a 	bmi.w	80016d4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	075b      	lsls	r3, r3, #29
 80015a4:	f100 80b8 	bmi.w	8001718 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a8:	69a2      	ldr	r2, [r4, #24]
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	f040 8119 	bne.w	80017e2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80015b0:	2000      	movs	r0, #0
 80015b2:	e7e8      	b.n	8001586 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b4:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	f002 020c 	and.w	r2, r2, #12
 80015bc:	2a04      	cmp	r2, #4
 80015be:	d007      	beq.n	80015d0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2a08      	cmp	r2, #8
 80015c8:	d10a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0259      	lsls	r1, r3, #9
 80015ce:	d507      	bpl.n	80015e0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b9f      	ldr	r3, [pc, #636]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	039a      	lsls	r2, r3, #14
 80015d6:	d5dc      	bpl.n	8001592 <HAL_RCC_OscConfig+0x16>
 80015d8:	6863      	ldr	r3, [r4, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1d9      	bne.n	8001592 <HAL_RCC_OscConfig+0x16>
 80015de:	e7d1      	b.n	8001584 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	6863      	ldr	r3, [r4, #4]
 80015e2:	4d9b      	ldr	r5, [pc, #620]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d111      	bne.n	800160e <HAL_RCC_OscConfig+0x92>
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f2:	f7ff f80f 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4d96      	ldr	r5, [pc, #600]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80015f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	039b      	lsls	r3, r3, #14
 80015fe:	d4c8      	bmi.n	8001592 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff f808 	bl	8000614 <HAL_GetTick>
 8001604:	1b80      	subs	r0, r0, r6
 8001606:	2864      	cmp	r0, #100	; 0x64
 8001608:	d9f7      	bls.n	80015fa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
 800160c:	e7bb      	b.n	8001586 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001612:	d104      	bne.n	800161e <HAL_RCC_OscConfig+0xa2>
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161a:	602b      	str	r3, [r5, #0]
 800161c:	e7e5      	b.n	80015ea <HAL_RCC_OscConfig+0x6e>
 800161e:	682a      	ldr	r2, [r5, #0]
 8001620:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001624:	602a      	str	r2, [r5, #0]
 8001626:	682a      	ldr	r2, [r5, #0]
 8001628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800162c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1df      	bne.n	80015f2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001632:	f7fe ffef 	bl	8000614 <HAL_GetTick>
 8001636:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	039f      	lsls	r7, r3, #14
 800163c:	d5a9      	bpl.n	8001592 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163e:	f7fe ffe9 	bl	8000614 <HAL_GetTick>
 8001642:	1b80      	subs	r0, r0, r6
 8001644:	2864      	cmp	r0, #100	; 0x64
 8001646:	d9f7      	bls.n	8001638 <HAL_RCC_OscConfig+0xbc>
 8001648:	e7df      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	f012 0f0c 	tst.w	r2, #12
 8001652:	d007      	beq.n	8001664 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800165a:	2a08      	cmp	r2, #8
 800165c:	d111      	bne.n	8001682 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	025e      	lsls	r6, r3, #9
 8001662:	d40e      	bmi.n	8001682 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	0795      	lsls	r5, r2, #30
 800166a:	d502      	bpl.n	8001672 <HAL_RCC_OscConfig+0xf6>
 800166c:	68e2      	ldr	r2, [r4, #12]
 800166e:	2a01      	cmp	r2, #1
 8001670:	d188      	bne.n	8001584 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	6921      	ldr	r1, [r4, #16]
 8001676:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800167a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800167e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001680:	e78a      	b.n	8001598 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001682:	68e2      	ldr	r2, [r4, #12]
 8001684:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x2d8>)
 8001686:	b1b2      	cbz	r2, 80016b6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800168c:	f7fe ffc2 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4d6f      	ldr	r5, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001692:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	0798      	lsls	r0, r3, #30
 8001698:	d507      	bpl.n	80016aa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	6922      	ldr	r2, [r4, #16]
 800169e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016a6:	602b      	str	r3, [r5, #0]
 80016a8:	e776      	b.n	8001598 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7fe ffb3 	bl	8000614 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2802      	cmp	r0, #2
 80016b2:	d9ef      	bls.n	8001694 <HAL_RCC_OscConfig+0x118>
 80016b4:	e7a9      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80016b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016b8:	f7fe ffac 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016bc:	4d64      	ldr	r5, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	0799      	lsls	r1, r3, #30
 80016c4:	f57f af68 	bpl.w	8001598 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7fe ffa4 	bl	8000614 <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d9f6      	bls.n	80016c0 <HAL_RCC_OscConfig+0x144>
 80016d2:	e79a      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016d4:	6962      	ldr	r2, [r4, #20]
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_RCC_OscConfig+0x2dc>)
 80016d8:	b17a      	cbz	r2, 80016fa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016de:	f7fe ff99 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4d5b      	ldr	r5, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80016e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016e8:	079f      	lsls	r7, r3, #30
 80016ea:	f53f af59 	bmi.w	80015a0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7fe ff91 	bl	8000614 <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	2802      	cmp	r0, #2
 80016f6:	d9f6      	bls.n	80016e6 <HAL_RCC_OscConfig+0x16a>
 80016f8:	e787      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80016fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016fc:	f7fe ff8a 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4d53      	ldr	r5, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001702:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001706:	0798      	lsls	r0, r3, #30
 8001708:	f57f af4a 	bpl.w	80015a0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170c:	f7fe ff82 	bl	8000614 <HAL_GetTick>
 8001710:	1b80      	subs	r0, r0, r6
 8001712:	2802      	cmp	r0, #2
 8001714:	d9f6      	bls.n	8001704 <HAL_RCC_OscConfig+0x188>
 8001716:	e778      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 800171a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001720:	d128      	bne.n	8001774 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	9201      	str	r2, [sp, #4]
 8001724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001726:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001736:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4d48      	ldr	r5, [pc, #288]	; (800185c <HAL_RCC_OscConfig+0x2e0>)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	05d9      	lsls	r1, r3, #23
 800173e:	d51b      	bpl.n	8001778 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	68a3      	ldr	r3, [r4, #8]
 8001742:	4d43      	ldr	r5, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 8001744:	2b01      	cmp	r3, #1
 8001746:	d127      	bne.n	8001798 <HAL_RCC_OscConfig+0x21c>
 8001748:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001750:	f7fe ff60 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4d3e      	ldr	r5, [pc, #248]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001756:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800175e:	079b      	lsls	r3, r3, #30
 8001760:	d539      	bpl.n	80017d6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001762:	2e00      	cmp	r6, #0
 8001764:	f43f af20 	beq.w	80015a8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4a39      	ldr	r2, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 800176a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800176c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	e719      	b.n	80015a8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001774:	2600      	movs	r6, #0
 8001776:	e7df      	b.n	8001738 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001780:	f7fe ff48 	bl	8000614 <HAL_GetTick>
 8001784:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	05da      	lsls	r2, r3, #23
 800178a:	d4d9      	bmi.n	8001740 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7fe ff42 	bl	8000614 <HAL_GetTick>
 8001790:	1bc0      	subs	r0, r0, r7
 8001792:	2802      	cmp	r0, #2
 8001794:	d9f7      	bls.n	8001786 <HAL_RCC_OscConfig+0x20a>
 8001796:	e738      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	2b05      	cmp	r3, #5
 800179a:	d104      	bne.n	80017a6 <HAL_RCC_OscConfig+0x22a>
 800179c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	672b      	str	r3, [r5, #112]	; 0x70
 80017a4:	e7d0      	b.n	8001748 <HAL_RCC_OscConfig+0x1cc>
 80017a6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	672a      	str	r2, [r5, #112]	; 0x70
 80017ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017b0:	f022 0204 	bic.w	r2, r2, #4
 80017b4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ca      	bne.n	8001750 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80017ba:	f7fe ff2b 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017c2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017c6:	0798      	lsls	r0, r3, #30
 80017c8:	d5cb      	bpl.n	8001762 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7fe ff23 	bl	8000614 <HAL_GetTick>
 80017ce:	1bc0      	subs	r0, r0, r7
 80017d0:	4540      	cmp	r0, r8
 80017d2:	d9f7      	bls.n	80017c4 <HAL_RCC_OscConfig+0x248>
 80017d4:	e719      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7fe ff1d 	bl	8000614 <HAL_GetTick>
 80017da:	1bc0      	subs	r0, r0, r7
 80017dc:	4540      	cmp	r0, r8
 80017de:	d9bd      	bls.n	800175c <HAL_RCC_OscConfig+0x1e0>
 80017e0:	e713      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e2:	4d1b      	ldr	r5, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
 80017e4:	68ab      	ldr	r3, [r5, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	f43f aeca 	beq.w	8001584 <HAL_RCC_OscConfig+0x8>
 80017f0:	4e1b      	ldr	r6, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x2e4>)
 80017f2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80017f6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f8:	d134      	bne.n	8001864 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80017fa:	f7fe ff0b 	bl	8000614 <HAL_GetTick>
 80017fe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	0199      	lsls	r1, r3, #6
 8001804:	d41e      	bmi.n	8001844 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	6a22      	ldr	r2, [r4, #32]
 8001808:	69e3      	ldr	r3, [r4, #28]
 800180a:	4313      	orrs	r3, r2
 800180c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800180e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001818:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4c0d      	ldr	r4, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181c:	0852      	lsrs	r2, r2, #1
 800181e:	3a01      	subs	r2, #1
 8001820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001824:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001826:	2301      	movs	r3, #1
 8001828:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800182a:	f7fe fef3 	bl	8000614 <HAL_GetTick>
 800182e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	019a      	lsls	r2, r3, #6
 8001834:	f53f aebc 	bmi.w	80015b0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7fe feec 	bl	8000614 <HAL_GetTick>
 800183c:	1b40      	subs	r0, r0, r5
 800183e:	2802      	cmp	r0, #2
 8001840:	d9f6      	bls.n	8001830 <HAL_RCC_OscConfig+0x2b4>
 8001842:	e6e2      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7fe fee6 	bl	8000614 <HAL_GetTick>
 8001848:	1bc0      	subs	r0, r0, r7
 800184a:	2802      	cmp	r0, #2
 800184c:	d9d8      	bls.n	8001800 <HAL_RCC_OscConfig+0x284>
 800184e:	e6dc      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
 8001850:	40023800 	.word	0x40023800
 8001854:	42470000 	.word	0x42470000
 8001858:	42470e80 	.word	0x42470e80
 800185c:	40007000 	.word	0x40007000
 8001860:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001864:	f7fe fed6 	bl	8000614 <HAL_GetTick>
 8001868:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	f57f ae9f 	bpl.w	80015b0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7fe fecf 	bl	8000614 <HAL_GetTick>
 8001876:	1b00      	subs	r0, r0, r4
 8001878:	2802      	cmp	r0, #2
 800187a:	d9f6      	bls.n	800186a <HAL_RCC_OscConfig+0x2ee>
 800187c:	e6c5      	b.n	800160a <HAL_RCC_OscConfig+0x8e>
 800187e:	bf00      	nop

08001880 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001880:	4913      	ldr	r1, [pc, #76]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001882:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001884:	688b      	ldr	r3, [r1, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b04      	cmp	r3, #4
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x16>
 800188e:	2b08      	cmp	r3, #8
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001892:	4810      	ldr	r0, [pc, #64]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001894:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001896:	4810      	ldr	r0, [pc, #64]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001898:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	bf14      	ite	ne
 80018a6:	480c      	ldrne	r0, [pc, #48]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	480a      	ldreq	r0, [pc, #40]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018ae:	bf18      	it	ne
 80018b0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b6:	fba1 0100 	umull	r0, r1, r1, r0
 80018ba:	f7fe fcd9 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80018ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80018ce:	bd08      	pop	{r3, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	007a1200 	.word	0x007a1200

080018dc <HAL_RCC_ClockConfig>:
{
 80018dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018e2:	4604      	mov	r4, r0
 80018e4:	b910      	cbnz	r0, 80018ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
 80018e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <HAL_RCC_ClockConfig+0x124>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f002 020f 	and.w	r2, r2, #15
 80018f4:	428a      	cmp	r2, r1
 80018f6:	d328      	bcc.n	800194a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	6821      	ldr	r1, [r4, #0]
 80018fa:	078f      	lsls	r7, r1, #30
 80018fc:	d42d      	bmi.n	800195a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	07c8      	lsls	r0, r1, #31
 8001900:	d440      	bmi.n	8001984 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001902:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_ClockConfig+0x124>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f002 020f 	and.w	r2, r2, #15
 800190a:	4295      	cmp	r5, r2
 800190c:	d366      	bcc.n	80019dc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	0751      	lsls	r1, r2, #29
 8001912:	d46c      	bmi.n	80019ee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	0713      	lsls	r3, r2, #28
 8001916:	d507      	bpl.n	8001928 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001918:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
 800191a:	6921      	ldr	r1, [r4, #16]
 800191c:	6893      	ldr	r3, [r2, #8]
 800191e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001922:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001926:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001928:	f7ff ffaa 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
 800192e:	4a36      	ldr	r2, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x12c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	40d8      	lsrs	r0, r3
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_ClockConfig+0x130>)
 800193c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f7fe fe1e 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8001944:	2000      	movs	r0, #0
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	4299      	cmp	r1, r3
 8001956:	d1c6      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xa>
 8001958:	e7ce      	b.n	80018f8 <HAL_RCC_ClockConfig+0x1c>
 800195a:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	bf1e      	ittt	ne
 8001962:	689a      	ldrne	r2, [r3, #8]
 8001964:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001968:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	bf42      	ittt	mi
 800196e:	689a      	ldrmi	r2, [r3, #8]
 8001970:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001974:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	68a0      	ldr	r0, [r4, #8]
 800197a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800197e:	4302      	orrs	r2, r0
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	e7bc      	b.n	80018fe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	6862      	ldr	r2, [r4, #4]
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
 8001988:	2a01      	cmp	r2, #1
 800198a:	d11d      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	d0a8      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001994:	4e1b      	ldr	r6, [pc, #108]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
 8001996:	68b3      	ldr	r3, [r6, #8]
 8001998:	f023 0303 	bic.w	r3, r3, #3
 800199c:	4313      	orrs	r3, r2
 800199e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019a0:	f7fe fe38 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019a8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	68b3      	ldr	r3, [r6, #8]
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019b6:	d0a4      	beq.n	8001902 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7fe fe2c 	bl	8000614 <HAL_GetTick>
 80019bc:	1bc0      	subs	r0, r0, r7
 80019be:	4540      	cmp	r0, r8
 80019c0:	d9f3      	bls.n	80019aa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
}
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c8:	1e91      	subs	r1, r2, #2
 80019ca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	d802      	bhi.n	80019d6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019d4:	e7dd      	b.n	8001992 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	f013 0f02 	tst.w	r3, #2
 80019da:	e7da      	b.n	8001992 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019dc:	b2ea      	uxtb	r2, r5
 80019de:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	429d      	cmp	r5, r3
 80019e8:	f47f af7d 	bne.w	80018e6 <HAL_RCC_ClockConfig+0xa>
 80019ec:	e78f      	b.n	800190e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ee:	4905      	ldr	r1, [pc, #20]	; (8001a04 <HAL_RCC_ClockConfig+0x128>)
 80019f0:	68e0      	ldr	r0, [r4, #12]
 80019f2:	688b      	ldr	r3, [r1, #8]
 80019f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019f8:	4303      	orrs	r3, r0
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	e78a      	b.n	8001914 <HAL_RCC_ClockConfig+0x38>
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08005bc4 	.word	0x08005bc4
 8001a0c:	2000011c 	.word	0x2000011c

08001a10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000011c 	.word	0x2000011c

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a2a:	6810      	ldr	r0, [r2, #0]
}
 8001a2c:	40d8      	lsrs	r0, r3
 8001a2e:	4770      	bx	lr
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08005bd4 	.word	0x08005bd4
 8001a38:	2000011c 	.word	0x2000011c

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a4a:	6810      	ldr	r0, [r2, #0]
}
 8001a4c:	40d8      	lsrs	r0, r3
 8001a4e:	4770      	bx	lr
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08005bd4 	.word	0x08005bd4
 8001a58:	2000011c 	.word	0x2000011c

08001a5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a6e:	2320      	movs	r3, #32
 8001a70:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a74:	4770      	bx	lr
	...

08001a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a7c:	6806      	ldr	r6, [r0, #0]
 8001a7e:	68c2      	ldr	r2, [r0, #12]
 8001a80:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a82:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	6133      	str	r3, [r6, #16]
{
 8001a8c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a8e:	6883      	ldr	r3, [r0, #8]
 8001a90:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001a92:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a94:	4303      	orrs	r3, r0
 8001a96:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001a98:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a9c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001a9e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aa2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aa8:	6973      	ldr	r3, [r6, #20]
 8001aaa:	69a2      	ldr	r2, [r4, #24]
 8001aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab6:	6173      	str	r3, [r6, #20]
 8001ab8:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aba:	d17c      	bne.n	8001bb6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001abc:	429e      	cmp	r6, r3
 8001abe:	d003      	beq.n	8001ac8 <UART_SetConfig+0x50>
 8001ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac4:	429e      	cmp	r6, r3
 8001ac6:	d144      	bne.n	8001b52 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ac8:	f7ff ffb8 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001acc:	2519      	movs	r5, #25
 8001ace:	fb05 f300 	mul.w	r3, r5, r0
 8001ad2:	6860      	ldr	r0, [r4, #4]
 8001ad4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ad8:	0040      	lsls	r0, r0, #1
 8001ada:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ade:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ae2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ae6:	f7ff ffa9 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001aea:	6863      	ldr	r3, [r4, #4]
 8001aec:	4368      	muls	r0, r5
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001af4:	f7ff ffa2 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	4368      	muls	r0, r5
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b06:	fb09 7313 	mls	r3, r9, r3, r7
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	3332      	adds	r3, #50	; 0x32
 8001b0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b18:	f7ff ff90 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001b1c:	6862      	ldr	r2, [r4, #4]
 8001b1e:	4368      	muls	r0, r5
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	fbb0 faf2 	udiv	sl, r0, r2
 8001b26:	f7ff ff89 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	4368      	muls	r0, r5
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b38:	fb09 a313 	mls	r3, r9, r3, sl
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	3332      	adds	r3, #50	; 0x32
 8001b40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b4a:	443b      	add	r3, r7
 8001b4c:	60b3      	str	r3, [r6, #8]
 8001b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b52:	f7ff ff63 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001b56:	2519      	movs	r5, #25
 8001b58:	fb05 f300 	mul.w	r3, r5, r0
 8001b5c:	6860      	ldr	r0, [r4, #4]
 8001b5e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b62:	0040      	lsls	r0, r0, #1
 8001b64:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b68:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b70:	f7ff ff54 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001b74:	6863      	ldr	r3, [r4, #4]
 8001b76:	4368      	muls	r0, r5
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b7e:	f7ff ff4d 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	4368      	muls	r0, r5
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b90:	fb09 7313 	mls	r3, r9, r3, r7
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	3332      	adds	r3, #50	; 0x32
 8001b98:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001ba2:	f7ff ff3b 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	4368      	muls	r0, r5
 8001baa:	0052      	lsls	r2, r2, #1
 8001bac:	fbb0 faf2 	udiv	sl, r0, r2
 8001bb0:	f7ff ff34 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001bb4:	e7b9      	b.n	8001b2a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bb6:	429e      	cmp	r6, r3
 8001bb8:	d002      	beq.n	8001bc0 <UART_SetConfig+0x148>
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <UART_SetConfig+0x230>)
 8001bbc:	429e      	cmp	r6, r3
 8001bbe:	d140      	bne.n	8001c42 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bc0:	f7ff ff3c 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001bc4:	6867      	ldr	r7, [r4, #4]
 8001bc6:	2519      	movs	r5, #25
 8001bc8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bcc:	fb05 f300 	mul.w	r3, r5, r0
 8001bd0:	00bf      	lsls	r7, r7, #2
 8001bd2:	fbb3 f3f7 	udiv	r3, r3, r7
 8001bd6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bda:	011f      	lsls	r7, r3, #4
 8001bdc:	f7ff ff2e 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	4368      	muls	r0, r5
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fbb0 f8f3 	udiv	r8, r0, r3
 8001bea:	f7ff ff27 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	4368      	muls	r0, r5
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bfc:	fb09 8313 	mls	r3, r9, r3, r8
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	3332      	adds	r3, #50	; 0x32
 8001c04:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c08:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c0c:	f7ff ff16 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001c10:	6862      	ldr	r2, [r4, #4]
 8001c12:	4368      	muls	r0, r5
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	fbb0 faf2 	udiv	sl, r0, r2
 8001c1a:	f7ff ff0f 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c1e:	6863      	ldr	r3, [r4, #4]
 8001c20:	4368      	muls	r0, r5
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c2c:	fb09 a313 	mls	r3, r9, r3, sl
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	3332      	adds	r3, #50	; 0x32
 8001c34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	ea43 0308 	orr.w	r3, r3, r8
 8001c40:	e783      	b.n	8001b4a <UART_SetConfig+0xd2>
 8001c42:	f7ff feeb 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001c46:	6867      	ldr	r7, [r4, #4]
 8001c48:	2519      	movs	r5, #25
 8001c4a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c4e:	fb05 f300 	mul.w	r3, r5, r0
 8001c52:	00bf      	lsls	r7, r7, #2
 8001c54:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c58:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c5c:	011f      	lsls	r7, r3, #4
 8001c5e:	f7ff fedd 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	4368      	muls	r0, r5
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c6c:	f7ff fed6 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001c70:	6863      	ldr	r3, [r4, #4]
 8001c72:	4368      	muls	r0, r5
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c7e:	fb09 8313 	mls	r3, r9, r3, r8
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	3332      	adds	r3, #50	; 0x32
 8001c86:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c8a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c8e:	f7ff fec5 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001c92:	6862      	ldr	r2, [r4, #4]
 8001c94:	4368      	muls	r0, r5
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	fbb0 faf2 	udiv	sl, r0, r2
 8001c9c:	f7ff febe 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001ca0:	e7bd      	b.n	8001c1e <UART_SetConfig+0x1a6>
 8001ca2:	bf00      	nop
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40011400 	.word	0x40011400

08001cac <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	4604      	mov	r4, r0
 8001cb0:	460e      	mov	r6, r1
 8001cb2:	4617      	mov	r7, r2
 8001cb4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb6:	6821      	ldr	r1, [r4, #0]
 8001cb8:	680b      	ldr	r3, [r1, #0]
 8001cba:	ea36 0303 	bics.w	r3, r6, r3
 8001cbe:	d101      	bne.n	8001cc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
}
 8001cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001cc4:	1c6b      	adds	r3, r5, #1
 8001cc6:	d0f7      	beq.n	8001cb8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc8:	b995      	cbnz	r5, 8001cf0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ce2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001cec:	2003      	movs	r0, #3
 8001cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cf0:	f7fe fc90 	bl	8000614 <HAL_GetTick>
 8001cf4:	1bc0      	subs	r0, r0, r7
 8001cf6:	4285      	cmp	r5, r0
 8001cf8:	d2dd      	bcs.n	8001cb6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001cfa:	e7e6      	b.n	8001cca <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001cfc <HAL_UART_Init>:
{
 8001cfc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b340      	cbz	r0, 8001d54 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d0a:	b91b      	cbnz	r3, 8001d14 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d0c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d10:	f002 fcbc 	bl	800468c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d14:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d16:	2324      	movs	r3, #36	; 0x24
 8001d18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d1c:	68d3      	ldr	r3, [r2, #12]
 8001d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d22:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fea7 	bl	8001a78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d3a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d42:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d44:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d46:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d48:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
}
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <HAL_UART_Transmit>:
{
 8001d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d62:	2b20      	cmp	r3, #32
{
 8001d64:	4604      	mov	r4, r0
 8001d66:	460d      	mov	r5, r1
 8001d68:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d6a:	d14f      	bne.n	8001e0c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d04a      	beq.n	8001e06 <HAL_UART_Transmit+0xae>
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d048      	beq.n	8001e06 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001d74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d047      	beq.n	8001e0c <HAL_UART_Transmit+0xb4>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d86:	2321      	movs	r3, #33	; 0x21
 8001d88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fc42 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001d90:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001d94:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001d96:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b96b      	cbnz	r3, 8001dbc <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001da0:	463b      	mov	r3, r7
 8001da2:	4632      	mov	r2, r6
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ff80 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dac:	b9b0      	cbnz	r0, 8001ddc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001dae:	2320      	movs	r3, #32
 8001db0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001db4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001dbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dc4:	68a3      	ldr	r3, [r4, #8]
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dca:	4632      	mov	r2, r6
 8001dcc:	463b      	mov	r3, r7
 8001dce:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001dd2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd4:	d10e      	bne.n	8001df4 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd6:	f7ff ff69 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dda:	b110      	cbz	r0, 8001de2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
 8001dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001de2:	882b      	ldrh	r3, [r5, #0]
 8001de4:	6822      	ldr	r2, [r4, #0]
 8001de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dea:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001dec:	6923      	ldr	r3, [r4, #16]
 8001dee:	b943      	cbnz	r3, 8001e02 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001df0:	3502      	adds	r5, #2
 8001df2:	e7d2      	b.n	8001d9a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df4:	f7ff ff5a 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d1ef      	bne.n	8001ddc <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	782a      	ldrb	r2, [r5, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	3501      	adds	r5, #1
 8001e04:	e7c9      	b.n	8001d9a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001e0c:	2002      	movs	r0, #2
}
 8001e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e12 <HAL_UART_TxCpltCallback>:
 8001e12:	4770      	bx	lr

08001e14 <HAL_UART_RxCpltCallback>:
 8001e14:	4770      	bx	lr

08001e16 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e1a:	2b22      	cmp	r3, #34	; 0x22
{
 8001e1c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e1e:	d136      	bne.n	8001e8e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e20:	6883      	ldr	r3, [r0, #8]
 8001e22:	6901      	ldr	r1, [r0, #16]
 8001e24:	6802      	ldr	r2, [r0, #0]
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e2c:	d123      	bne.n	8001e76 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e2e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e30:	b9e9      	cbnz	r1, 8001e6e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e36:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001e3a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001e3c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001e3e:	3c01      	subs	r4, #1
 8001e40:	b2a4      	uxth	r4, r4
 8001e42:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001e44:	b98c      	cbnz	r4, 8001e6a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e46:	6803      	ldr	r3, [r0, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	f022 0220 	bic.w	r2, r2, #32
 8001e4e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e56:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e60:	2320      	movs	r3, #32
 8001e62:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001e66:	f7ff ffd5 	bl	8001e14 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001e6a:	2000      	movs	r0, #0
}
 8001e6c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f823 2b01 	strh.w	r2, [r3], #1
 8001e74:	e7e1      	b.n	8001e3a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e76:	b921      	cbnz	r1, 8001e82 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	6852      	ldr	r2, [r2, #4]
 8001e7c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e7dc      	b.n	8001e3c <UART_Receive_IT+0x26>
 8001e82:	6852      	ldr	r2, [r2, #4]
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	6281      	str	r1, [r0, #40]	; 0x28
 8001e88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e8c:	e7f7      	b.n	8001e7e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001e8e:	2002      	movs	r0, #2
 8001e90:	bd10      	pop	{r4, pc}

08001e92 <HAL_UART_ErrorCallback>:
 8001e92:	4770      	bx	lr

08001e94 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e98:	68d9      	ldr	r1, [r3, #12]
{
 8001e9a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001e9c:	0716      	lsls	r6, r2, #28
{
 8001e9e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ea0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001ea2:	d107      	bne.n	8001eb4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ea4:	0696      	lsls	r6, r2, #26
 8001ea6:	d55a      	bpl.n	8001f5e <HAL_UART_IRQHandler+0xca>
 8001ea8:	068d      	lsls	r5, r1, #26
 8001eaa:	d558      	bpl.n	8001f5e <HAL_UART_IRQHandler+0xca>
}
 8001eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001eb0:	f7ff bfb1 	b.w	8001e16 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001eb4:	f015 0501 	ands.w	r5, r5, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_UART_IRQHandler+0x2c>
 8001eba:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ebe:	d04e      	beq.n	8001f5e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ec0:	07d3      	lsls	r3, r2, #31
 8001ec2:	d505      	bpl.n	8001ed0 <HAL_UART_IRQHandler+0x3c>
 8001ec4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ec6:	bf42      	ittt	mi
 8001ec8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001eca:	f043 0301 	orrmi.w	r3, r3, #1
 8001ece:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed0:	0750      	lsls	r0, r2, #29
 8001ed2:	d504      	bpl.n	8001ede <HAL_UART_IRQHandler+0x4a>
 8001ed4:	b11d      	cbz	r5, 8001ede <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ede:	0793      	lsls	r3, r2, #30
 8001ee0:	d504      	bpl.n	8001eec <HAL_UART_IRQHandler+0x58>
 8001ee2:	b11d      	cbz	r5, 8001eec <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eec:	0716      	lsls	r6, r2, #28
 8001eee:	d504      	bpl.n	8001efa <HAL_UART_IRQHandler+0x66>
 8001ef0:	b11d      	cbz	r5, 8001efa <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ef2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001efa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d066      	beq.n	8001fce <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f00:	0695      	lsls	r5, r2, #26
 8001f02:	d504      	bpl.n	8001f0e <HAL_UART_IRQHandler+0x7a>
 8001f04:	0688      	lsls	r0, r1, #26
 8001f06:	d502      	bpl.n	8001f0e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff84 	bl	8001e16 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f14:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001f16:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f18:	d402      	bmi.n	8001f20 <HAL_UART_IRQHandler+0x8c>
 8001f1a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001f1e:	d01a      	beq.n	8001f56 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001f20:	f7ff fd9c 	bl	8001a5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	0652      	lsls	r2, r2, #25
 8001f2a:	d510      	bpl.n	8001f4e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f2c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f34:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f36:	b150      	cbz	r0, 8001f4e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_UART_IRQHandler+0x13c>)
 8001f3a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f3c:	f7fe fd74 	bl	8000a28 <HAL_DMA_Abort_IT>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d044      	beq.n	8001fce <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f44:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f4c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ff9f 	bl	8001e92 <HAL_UART_ErrorCallback>
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001f56:	f7ff ff9c 	bl	8001e92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f5e:	0616      	lsls	r6, r2, #24
 8001f60:	d527      	bpl.n	8001fb2 <HAL_UART_IRQHandler+0x11e>
 8001f62:	060d      	lsls	r5, r1, #24
 8001f64:	d525      	bpl.n	8001fb2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f66:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f6a:	2a21      	cmp	r2, #33	; 0x21
 8001f6c:	d12f      	bne.n	8001fce <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f6e:	68a2      	ldr	r2, [r4, #8]
 8001f70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f74:	6a22      	ldr	r2, [r4, #32]
 8001f76:	d117      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f78:	8811      	ldrh	r1, [r2, #0]
 8001f7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f7e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f80:	6921      	ldr	r1, [r4, #16]
 8001f82:	b979      	cbnz	r1, 8001fa4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001f84:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001f86:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001f88:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f90:	b9ea      	cbnz	r2, 8001fce <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f98:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001fa4:	3201      	adds	r2, #1
 8001fa6:	e7ee      	b.n	8001f86 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fa8:	1c51      	adds	r1, r2, #1
 8001faa:	6221      	str	r1, [r4, #32]
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	e7ea      	b.n	8001f88 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fb2:	0650      	lsls	r0, r2, #25
 8001fb4:	d50b      	bpl.n	8001fce <HAL_UART_IRQHandler+0x13a>
 8001fb6:	064a      	lsls	r2, r1, #25
 8001fb8:	d509      	bpl.n	8001fce <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7ff ff22 	bl	8001e12 <HAL_UART_TxCpltCallback>
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	08001fd5 	.word	0x08001fd5

08001fd4 <UART_DMAAbortOnError>:
{
 8001fd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fdc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001fde:	f7ff ff58 	bl	8001e92 <HAL_UART_ErrorCallback>
 8001fe2:	bd08      	pop	{r3, pc}

08001fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	d101      	bne.n	8001fee <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001fea:	2003      	movs	r0, #3
 8001fec:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001fee:	6902      	ldr	r2, [r0, #16]
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	daf8      	bge.n	8001fe6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ff4:	6903      	ldr	r3, [r0, #16]
 8001ff6:	4a06      	ldr	r2, [pc, #24]	; (8002010 <USB_CoreReset+0x2c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001ffe:	3a01      	subs	r2, #1
 8002000:	d0f3      	beq.n	8001fea <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002002:	6903      	ldr	r3, [r0, #16]
 8002004:	f013 0301 	ands.w	r3, r3, #1
 8002008:	d1f9      	bne.n	8001ffe <USB_CoreReset+0x1a>

  return HAL_OK;
 800200a:	4618      	mov	r0, r3
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	00030d41 	.word	0x00030d41

08002014 <USB_CoreInit>:
{
 8002014:	b084      	sub	sp, #16
 8002016:	b538      	push	{r3, r4, r5, lr}
 8002018:	ad05      	add	r5, sp, #20
 800201a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002020:	2b01      	cmp	r3, #1
{
 8002022:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002024:	d125      	bne.n	8002072 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002026:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800202e:	68c3      	ldr	r3, [r0, #12]
 8002030:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002038:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800203a:	68c3      	ldr	r3, [r0, #12]
 800203c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002040:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002044:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002046:	bf02      	ittt	eq
 8002048:	68c3      	ldreq	r3, [r0, #12]
 800204a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800204e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002050:	f7ff ffc8 	bl	8001fe4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002054:	9b08      	ldr	r3, [sp, #32]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	f043 0306 	orr.w	r3, r3, #6
 8002060:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002062:	68a3      	ldr	r3, [r4, #8]
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	60a3      	str	r3, [r4, #8]
}
 800206a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800206e:	b004      	add	sp, #16
 8002070:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002072:	68c3      	ldr	r3, [r0, #12]
 8002074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002078:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800207a:	f7ff ffb3 	bl	8001fe4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800207e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002080:	b923      	cbnz	r3, 800208c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002088:	63a3      	str	r3, [r4, #56]	; 0x38
 800208a:	e7e3      	b.n	8002054 <USB_CoreInit+0x40>
 800208c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	e7f9      	b.n	8002088 <USB_CoreInit+0x74>

08002094 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002094:	2a02      	cmp	r2, #2
 8002096:	d158      	bne.n	800214a <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <USB_SetTurnaroundTime+0xc0>)
 800209a:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <USB_SetTurnaroundTime+0xc4>)
 800209c:	440b      	add	r3, r1
 800209e:	4293      	cmp	r3, r2
 80020a0:	d947      	bls.n	8002132 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <USB_SetTurnaroundTime+0xc8>)
 80020a4:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <USB_SetTurnaroundTime+0xcc>)
 80020a6:	440b      	add	r3, r1
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d944      	bls.n	8002136 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80020ac:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80020b0:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <USB_SetTurnaroundTime+0xd0>)
 80020b2:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d93f      	bls.n	800213a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80020ba:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80020be:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80020c2:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80020c6:	32a0      	adds	r2, #160	; 0xa0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d938      	bls.n	800213e <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <USB_SetTurnaroundTime+0xd4>)
 80020ce:	4a27      	ldr	r2, [pc, #156]	; (800216c <USB_SetTurnaroundTime+0xd8>)
 80020d0:	440b      	add	r3, r1
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d935      	bls.n	8002142 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <USB_SetTurnaroundTime+0xdc>)
 80020d8:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80020dc:	440b      	add	r3, r1
 80020de:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d92f      	bls.n	8002146 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <USB_SetTurnaroundTime+0xe0>)
 80020e8:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80020ec:	440b      	add	r3, r1
 80020ee:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d929      	bls.n	800214a <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80020f6:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80020fa:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80020fe:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002102:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002106:	4293      	cmp	r3, r2
 8002108:	d921      	bls.n	800214e <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800210c:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002110:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8002112:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8002116:	4293      	cmp	r3, r2
 8002118:	bf94      	ite	ls
 800211a:	2307      	movls	r3, #7
 800211c:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800211e:	68c2      	ldr	r2, [r0, #12]
 8002120:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002124:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002126:	68c2      	ldr	r2, [r0, #12]
 8002128:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800212c:	60c3      	str	r3, [r0, #12]
}
 800212e:	2000      	movs	r0, #0
 8002130:	4770      	bx	lr
      UsbTrd = 0xFU;
 8002132:	230f      	movs	r3, #15
 8002134:	e7f3      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8002136:	230e      	movs	r3, #14
 8002138:	e7f1      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800213a:	230d      	movs	r3, #13
 800213c:	e7ef      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800213e:	230c      	movs	r3, #12
 8002140:	e7ed      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8002142:	230b      	movs	r3, #11
 8002144:	e7eb      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8002146:	230a      	movs	r3, #10
 8002148:	e7e9      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800214a:	2309      	movs	r3, #9
 800214c:	e7e7      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800214e:	2308      	movs	r3, #8
 8002150:	e7e5      	b.n	800211e <USB_SetTurnaroundTime+0x8a>
 8002152:	bf00      	nop
 8002154:	ff275340 	.word	0xff275340
 8002158:	000c34ff 	.word	0x000c34ff
 800215c:	ff1b1e40 	.word	0xff1b1e40
 8002160:	000f423f 	.word	0x000f423f
 8002164:	00124f7f 	.word	0x00124f7f
 8002168:	fee5b660 	.word	0xfee5b660
 800216c:	0016e35f 	.word	0x0016e35f
 8002170:	feced300 	.word	0xfeced300
 8002174:	feb35bc0 	.word	0xfeb35bc0
 8002178:	fe5954e0 	.word	0xfe5954e0

0800217c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800217c:	6883      	ldr	r3, [r0, #8]
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6083      	str	r3, [r0, #8]
}
 8002184:	2000      	movs	r0, #0
 8002186:	4770      	bx	lr

08002188 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002188:	6883      	ldr	r3, [r0, #8]
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6083      	str	r3, [r0, #8]
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <USB_SetCurrentMode>:
{
 8002194:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002196:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002198:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800219a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800219e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021a0:	d108      	bne.n	80021b4 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80021a2:	68c3      	ldr	r3, [r0, #12]
 80021a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021a8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80021aa:	2032      	movs	r0, #50	; 0x32
 80021ac:	f7fe fa38 	bl	8000620 <HAL_Delay>
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80021b4:	b919      	cbnz	r1, 80021be <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021b6:	68c3      	ldr	r3, [r0, #12]
 80021b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021bc:	e7f4      	b.n	80021a8 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
}
 80021c0:	bd08      	pop	{r3, pc}
	...

080021c4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80021c4:	0189      	lsls	r1, r1, #6
 80021c6:	f041 0120 	orr.w	r1, r1, #32
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <USB_FlushTxFifo+0x20>)
 80021cc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80021ce:	3a01      	subs	r2, #1
 80021d0:	d005      	beq.n	80021de <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80021d2:	6903      	ldr	r3, [r0, #16]
 80021d4:	f013 0320 	ands.w	r3, r3, #32
 80021d8:	d1f9      	bne.n	80021ce <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80021da:	4618      	mov	r0, r3
 80021dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	00030d41 	.word	0x00030d41

080021e8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80021e8:	2310      	movs	r3, #16
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <USB_FlushRxFifo+0x1c>)
 80021ec:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80021ee:	3a01      	subs	r2, #1
 80021f0:	d005      	beq.n	80021fe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80021f2:	6903      	ldr	r3, [r0, #16]
 80021f4:	f013 0310 	ands.w	r3, r3, #16
 80021f8:	d1f9      	bne.n	80021ee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80021fa:	4618      	mov	r0, r3
 80021fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021fe:	2003      	movs	r0, #3
}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	00030d41 	.word	0x00030d41

08002208 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002208:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800220c:	4319      	orrs	r1, r3
 800220e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002212:	2000      	movs	r0, #0
 8002214:	4770      	bx	lr
	...

08002218 <USB_DevInit>:
{
 8002218:	b084      	sub	sp, #16
 800221a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800221e:	4604      	mov	r4, r0
 8002220:	a809      	add	r0, sp, #36	; 0x24
 8002222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800222a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800222c:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800222e:	4619      	mov	r1, r3
 8002230:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002238:	3301      	adds	r3, #1
 800223a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800223c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800223e:	d1f7      	bne.n	8002230 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8002240:	2e00      	cmp	r6, #0
 8002242:	d173      	bne.n	800232c <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800224c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800224e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002252:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800225a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002262:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002266:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800226a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800226c:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800226e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002272:	d165      	bne.n	8002340 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8002274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002276:	2900      	cmp	r1, #0
 8002278:	d160      	bne.n	800233c <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff ffc4 	bl	8002208 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002280:	2110      	movs	r1, #16
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ff9e 	bl	80021c4 <USB_FlushTxFifo>
 8002288:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff ffac 	bl	80021e8 <USB_FlushRxFifo>
 8002290:	2800      	cmp	r0, #0
 8002292:	d157      	bne.n	8002344 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002294:	1c08      	adds	r0, r1, #0
 8002296:	bf18      	it	ne
 8002298:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	612b      	str	r3, [r5, #16]
 800229e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 80022a2:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80022a4:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 80022a6:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80022a8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80022ac:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80022b0:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022b4:	4543      	cmp	r3, r8
 80022b6:	d147      	bne.n	8002348 <USB_DevInit+0x130>
 80022b8:	2100      	movs	r1, #0
 80022ba:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80022be:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80022c0:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80022c4:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80022c8:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d14e      	bne.n	800236e <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80022d0:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80022d2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80022d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80022da:	d107      	bne.n	80022ec <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <USB_DevInit+0x180>)
 80022de:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80022e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	f043 0303 	orr.w	r3, r3, #3
 80022ea:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80022f0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80022f4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80022f6:	b91f      	cbnz	r7, 8002300 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80022f8:	69a3      	ldr	r3, [r4, #24]
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002300:	69a2      	ldr	r2, [r4, #24]
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <USB_DevInit+0x184>)
 8002304:	4313      	orrs	r3, r2
 8002306:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800230a:	b11b      	cbz	r3, 8002314 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800230c:	69a3      	ldr	r3, [r4, #24]
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002314:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002316:	bf01      	itttt	eq
 8002318:	69a3      	ldreq	r3, [r4, #24]
 800231a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800231e:	f043 0304 	orreq.w	r3, r3, #4
 8002322:	61a3      	streq	r3, [r4, #24]
}
 8002324:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002328:	b004      	add	sp, #16
 800232a:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002332:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800233a:	e78e      	b.n	800225a <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800233c:	4619      	mov	r1, r3
 800233e:	e79c      	b.n	800227a <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002340:	2103      	movs	r1, #3
 8002342:	e79a      	b.n	800227a <USB_DevInit+0x62>
 8002344:	2001      	movs	r0, #1
 8002346:	e7a8      	b.n	800229a <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002348:	f8d2 a000 	ldr.w	sl, [r2]
 800234c:	f1ba 0f00 	cmp.w	sl, #0
 8002350:	da0b      	bge.n	800236a <USB_DevInit+0x152>
      if (i == 0U)
 8002352:	b93b      	cbnz	r3, 8002364 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002354:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002358:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800235a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800235c:	f8c2 9008 	str.w	r9, [r2, #8]
 8002360:	3220      	adds	r2, #32
 8002362:	e7a7      	b.n	80022b4 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002364:	f8c2 e000 	str.w	lr, [r2]
 8002368:	e7f6      	b.n	8002358 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	e7f4      	b.n	8002358 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800236e:	f8d2 a000 	ldr.w	sl, [r2]
 8002372:	f1ba 0f00 	cmp.w	sl, #0
 8002376:	da0c      	bge.n	8002392 <USB_DevInit+0x17a>
      if (i == 0U)
 8002378:	b941      	cbnz	r1, 800238c <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800237a:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800237e:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002382:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002384:	f8c2 9008 	str.w	r9, [r2, #8]
 8002388:	3220      	adds	r2, #32
 800238a:	e79f      	b.n	80022cc <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800238c:	f8c2 c000 	str.w	ip, [r2]
 8002390:	e7f5      	b.n	800237e <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002392:	f8c2 e000 	str.w	lr, [r2]
 8002396:	e7f2      	b.n	800237e <USB_DevInit+0x166>
 8002398:	00800100 	.word	0x00800100
 800239c:	803c3800 	.word	0x803c3800

080023a0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80023a0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80023a4:	f013 0006 	ands.w	r0, r3, #6
 80023a8:	d004      	beq.n	80023b4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80023aa:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80023ae:	bf14      	ite	ne
 80023b0:	2002      	movne	r0, #2
 80023b2:	200f      	moveq	r0, #15
}
 80023b4:	4770      	bx	lr

080023b6 <USB_ActivateEndpoint>:
{
 80023b6:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80023b8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80023ba:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80023bc:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 80023c0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80023c4:	2a01      	cmp	r2, #1
 80023c6:	f004 050f 	and.w	r5, r4, #15
 80023ca:	d11b      	bne.n	8002404 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80023cc:	40aa      	lsls	r2, r5
 80023ce:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80023d0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80023d4:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80023d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	d410      	bmi.n	8002400 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80023de:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80023e0:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80023e2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80023e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80023f6:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002400:	2000      	movs	r0, #0
 8002402:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002404:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002408:	40aa      	lsls	r2, r5
 800240a:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800240c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002410:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002412:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	d4f2      	bmi.n	8002400 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800241a:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800241c:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800241e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002438:	e7e2      	b.n	8002400 <USB_ActivateEndpoint+0x4a>
	...

0800243c <USB_DeactivateEndpoint>:
{
 800243c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800243e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002440:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002442:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8002446:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800244a:	2b01      	cmp	r3, #1
 800244c:	f004 050f 	and.w	r5, r4, #15
 8002450:	d110      	bne.n	8002474 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002452:	40ab      	lsls	r3, r5
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800245a:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800245c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002460:	400b      	ands	r3, r1
 8002462:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002464:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <USB_DeactivateEndpoint+0x5c>)
 800246a:	4013      	ands	r3, r2
 800246c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002470:	2000      	movs	r0, #0
 8002472:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	40ab      	lsls	r3, r5
 800247a:	43db      	mvns	r3, r3
 800247c:	4019      	ands	r1, r3
 800247e:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002480:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002482:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002486:	400b      	ands	r3, r1
 8002488:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800248a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <USB_DeactivateEndpoint+0x60>)
 8002490:	4013      	ands	r3, r2
 8002492:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002496:	e7eb      	b.n	8002470 <USB_DeactivateEndpoint+0x34>
 8002498:	ec337800 	.word	0xec337800
 800249c:	eff37800 	.word	0xeff37800

080024a0 <USB_EP0StartXfer>:
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80024a2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80024a4:	780c      	ldrb	r4, [r1, #0]
 80024a6:	694e      	ldr	r6, [r1, #20]
 80024a8:	4f41      	ldr	r7, [pc, #260]	; (80025b0 <USB_EP0StartXfer+0x110>)
  if (ep->is_in == 1U)
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f04f 0320 	mov.w	r3, #32
 80024b0:	d159      	bne.n	8002566 <USB_EP0StartXfer+0xc6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80024b2:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 80024b6:	bb36      	cbnz	r6, 8002506 <USB_EP0StartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80024b8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80024bc:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80024c0:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80024c4:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80024c8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80024cc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80024d0:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80024d4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80024d8:	402f      	ands	r7, r5
 80024da:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 80024de:	2a01      	cmp	r2, #1
 80024e0:	f04f 0320 	mov.w	r3, #32
 80024e4:	d129      	bne.n	800253a <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 80024e6:	690a      	ldr	r2, [r1, #16]
 80024e8:	b11a      	cbz	r2, 80024f2 <USB_EP0StartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80024ea:	fb13 0304 	smlabb	r3, r3, r4, r0
 80024ee:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80024f2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80024f6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80024fa:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80024fe:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8002502:	2000      	movs	r0, #0
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	691d      	ldr	r5, [r3, #16]
 800250c:	402f      	ands	r7, r5
 800250e:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002510:	691d      	ldr	r5, [r3, #16]
 8002512:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002516:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800251a:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800251c:	688d      	ldr	r5, [r1, #8]
 800251e:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8002520:	bf88      	it	hi
 8002522:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002524:	691d      	ldr	r5, [r3, #16]
 8002526:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800252a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800252c:	694d      	ldr	r5, [r1, #20]
 800252e:	691e      	ldr	r6, [r3, #16]
 8002530:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002534:	4335      	orrs	r5, r6
 8002536:	611d      	str	r5, [r3, #16]
 8002538:	e7d1      	b.n	80024de <USB_EP0StartXfer+0x3e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800253a:	fb13 0404 	smlabb	r4, r3, r4, r0
 800253e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002546:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800254a:	694b      	ldr	r3, [r1, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0d8      	beq.n	8002502 <USB_EP0StartXfer+0x62>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002550:	780a      	ldrb	r2, [r1, #0]
 8002552:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002556:	f002 010f 	and.w	r1, r2, #15
 800255a:	2201      	movs	r2, #1
 800255c:	408a      	lsls	r2, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002564:	e7cd      	b.n	8002502 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002566:	fb13 0004 	smlabb	r0, r3, r4, r0
 800256a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800256e:	691c      	ldr	r4, [r3, #16]
 8002570:	4027      	ands	r7, r4
 8002572:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002574:	691c      	ldr	r4, [r3, #16]
 8002576:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800257a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800257e:	611c      	str	r4, [r3, #16]
 8002580:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8002582:	b106      	cbz	r6, 8002586 <USB_EP0StartXfer+0xe6>
      ep->xfer_len = ep->maxpacket;
 8002584:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002586:	691d      	ldr	r5, [r3, #16]
 8002588:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800258c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800258e:	691d      	ldr	r5, [r3, #16]
 8002590:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002594:	432c      	orrs	r4, r5
    if (dma == 1U)
 8002596:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002598:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800259a:	d102      	bne.n	80025a2 <USB_EP0StartXfer+0x102>
      if ((uint32_t)ep->xfer_buff != 0U)
 800259c:	68ca      	ldr	r2, [r1, #12]
 800259e:	b102      	cbz	r2, 80025a2 <USB_EP0StartXfer+0x102>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80025a0:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80025a2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80025aa:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80025ae:	e7a8      	b.n	8002502 <USB_EP0StartXfer+0x62>
 80025b0:	fff80000 	.word	0xfff80000

080025b4 <USB_WritePacket>:
{
 80025b4:	b510      	push	{r4, lr}
 80025b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80025ba:	b94c      	cbnz	r4, 80025d0 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 80025bc:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80025be:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80025ca:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 80025cc:	4299      	cmp	r1, r3
 80025ce:	d101      	bne.n	80025d4 <USB_WritePacket+0x20>
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80025d4:	f851 2b04 	ldr.w	r2, [r1], #4
 80025d8:	6002      	str	r2, [r0, #0]
 80025da:	e7f7      	b.n	80025cc <USB_WritePacket+0x18>

080025dc <USB_EPStartXfer>:
{
 80025dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80025de:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80025e0:	780e      	ldrb	r6, [r1, #0]
 80025e2:	4f73      	ldr	r7, [pc, #460]	; (80027b0 <USB_EPStartXfer+0x1d4>)
  if (ep->is_in == 1U)
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	f04f 0420 	mov.w	r4, #32
 80025ea:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025ec:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 80025f0:	f040 8098 	bne.w	8002724 <USB_EPStartXfer+0x148>
    if (ep->xfer_len == 0U)
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d138      	bne.n	800266a <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025f8:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 80025fc:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8002600:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002604:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002608:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800260a:	692c      	ldr	r4, [r5, #16]
 800260c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002610:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002612:	692c      	ldr	r4, [r5, #16]
 8002614:	4027      	ands	r7, r4
 8002616:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8002618:	2a01      	cmp	r2, #1
 800261a:	f04f 0420 	mov.w	r4, #32
 800261e:	d154      	bne.n	80026ca <USB_EPStartXfer+0xee>
      if ((uint32_t)ep->dma_addr != 0U)
 8002620:	690b      	ldr	r3, [r1, #16]
 8002622:	b11b      	cbz	r3, 800262c <USB_EPStartXfer+0x50>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002624:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002628:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800262c:	78cb      	ldrb	r3, [r1, #3]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d110      	bne.n	8002654 <USB_EPStartXfer+0x78>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002632:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002636:	f413 7f80 	tst.w	r3, #256	; 0x100
 800263a:	f04f 0320 	mov.w	r3, #32
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800263e:	fb13 0306 	smlabb	r3, r3, r6, r0
 8002642:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002646:	bf0c      	ite	eq
 8002648:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800264c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8002650:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002654:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8002658:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800265c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002660:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002664:	2000      	movs	r0, #0
 8002666:	b003      	add	sp, #12
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800266a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800266e:	402f      	ands	r7, r5
 8002670:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002674:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002678:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800267a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800267e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002682:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002686:	19dd      	adds	r5, r3, r7
 8002688:	3d01      	subs	r5, #1
 800268a:	fbb5 f7f7 	udiv	r7, r5, r7
 800268e:	4d49      	ldr	r5, [pc, #292]	; (80027b4 <USB_EPStartXfer+0x1d8>)
 8002690:	f8d4 e910 	ldr.w	lr, [r4, #2320]	; 0x910
 8002694:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8002698:	ea45 050e 	orr.w	r5, r5, lr
 800269c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80026a0:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 80026a4:	f3c3 0512 	ubfx	r5, r3, #0, #19
 80026a8:	433d      	orrs	r5, r7
 80026aa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 80026ae:	78cd      	ldrb	r5, [r1, #3]
 80026b0:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80026b2:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80026b6:	d1af      	bne.n	8002618 <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80026b8:	6925      	ldr	r5, [r4, #16]
 80026ba:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80026be:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80026c0:	6925      	ldr	r5, [r4, #16]
 80026c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80026c6:	6125      	str	r5, [r4, #16]
 80026c8:	e7a6      	b.n	8002618 <USB_EPStartXfer+0x3c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80026ca:	fb14 0406 	smlabb	r4, r4, r6, r0
 80026ce:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80026d2:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80026d6:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80026da:	78cd      	ldrb	r5, [r1, #3]
 80026dc:	2d01      	cmp	r5, #1
 80026de:	d00c      	beq.n	80026fa <USB_EPStartXfer+0x11e>
        if (ep->xfer_len > 0U)
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0bf      	beq.n	8002664 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80026e4:	780b      	ldrb	r3, [r1, #0]
 80026e6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	2301      	movs	r3, #1
 80026f0:	4093      	lsls	r3, r2
 80026f2:	4323      	orrs	r3, r4
 80026f4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80026f8:	e7b4      	b.n	8002664 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80026fa:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 80026fe:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002702:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002706:	bf0c      	ite	eq
 8002708:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800270c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002710:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002714:	780c      	ldrb	r4, [r1, #0]
 8002716:	9200      	str	r2, [sp, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4622      	mov	r2, r4
 800271c:	68c9      	ldr	r1, [r1, #12]
 800271e:	f7ff ff49 	bl	80025b4 <USB_WritePacket>
 8002722:	e79f      	b.n	8002664 <USB_EPStartXfer+0x88>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002724:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 8002728:	6935      	ldr	r5, [r6, #16]
 800272a:	402f      	ands	r7, r5
 800272c:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800272e:	6935      	ldr	r5, [r6, #16]
 8002730:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002734:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002738:	6135      	str	r5, [r6, #16]
 800273a:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800273c:	bb23      	cbnz	r3, 8002788 <USB_EPStartXfer+0x1ac>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800273e:	6933      	ldr	r3, [r6, #16]
 8002740:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002744:	431d      	orrs	r5, r3
 8002746:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002748:	6933      	ldr	r3, [r6, #16]
 800274a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800274e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002750:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8002752:	d102      	bne.n	800275a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002754:	68cb      	ldr	r3, [r1, #12]
 8002756:	b103      	cbz	r3, 800275a <USB_EPStartXfer+0x17e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002758:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 800275a:	78cb      	ldrb	r3, [r1, #3]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10c      	bne.n	800277a <USB_EPStartXfer+0x19e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002760:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002764:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002768:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800276c:	bf0c      	ite	eq
 800276e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002772:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002776:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800277a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800277e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002782:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002786:	e76d      	b.n	8002664 <USB_EPStartXfer+0x88>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002788:	4f0a      	ldr	r7, [pc, #40]	; (80027b4 <USB_EPStartXfer+0x1d8>)
 800278a:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800278e:	442b      	add	r3, r5
 8002790:	3b01      	subs	r3, #1
 8002792:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002796:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
 800279a:	ea47 070e 	orr.w	r7, r7, lr
 800279e:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	6937      	ldr	r7, [r6, #16]
 80027a4:	436b      	muls	r3, r5
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	433b      	orrs	r3, r7
 80027ac:	e7cf      	b.n	800274e <USB_EPStartXfer+0x172>
 80027ae:	bf00      	nop
 80027b0:	fff80000 	.word	0xfff80000
 80027b4:	1ff80000 	.word	0x1ff80000

080027b8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80027b8:	3203      	adds	r2, #3
 80027ba:	f022 0203 	bic.w	r2, r2, #3
 80027be:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80027c0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80027c4:	4291      	cmp	r1, r2
 80027c6:	d101      	bne.n	80027cc <USB_ReadPacket+0x14>
}
 80027c8:	4608      	mov	r0, r1
 80027ca:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	f841 3b04 	str.w	r3, [r1], #4
 80027d2:	e7f7      	b.n	80027c4 <USB_ReadPacket+0xc>

080027d4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80027d4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80027d6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027de:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80027e2:	d112      	bne.n	800280a <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db06      	blt.n	80027fa <USB_EPSetStall+0x26>
 80027ec:	b12a      	cbz	r2, 80027fa <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80027ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80027f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027f6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80027fa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80027fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002802:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002806:	2000      	movs	r0, #0
 8002808:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800280a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800280e:	2b00      	cmp	r3, #0
 8002810:	db06      	blt.n	8002820 <USB_EPSetStall+0x4c>
 8002812:	b12a      	cbz	r2, 8002820 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002814:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800281c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002820:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002828:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800282c:	e7eb      	b.n	8002806 <USB_EPSetStall+0x32>

0800282e <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800282e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002830:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002832:	2b01      	cmp	r3, #1
 8002834:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002838:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 800283c:	d111      	bne.n	8002862 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800283e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002846:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800284a:	78cb      	ldrb	r3, [r1, #3]
 800284c:	3b02      	subs	r3, #2
 800284e:	2b01      	cmp	r3, #1
 8002850:	d805      	bhi.n	800285e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002852:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800285e:	2000      	movs	r0, #0
 8002860:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002862:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800286a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800286e:	78cb      	ldrb	r3, [r1, #3]
 8002870:	3b02      	subs	r3, #2
 8002872:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002874:	bf9e      	ittt	ls
 8002876:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800287a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800287e:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8002882:	e7ec      	b.n	800285e <USB_EPClearStall+0x30>

08002884 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002884:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002888:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800288c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002890:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002894:	0109      	lsls	r1, r1, #4
 8002896:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800289a:	4319      	orrs	r1, r3
 800289c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80028a0:	2000      	movs	r0, #0
 80028a2:	4770      	bx	lr

080028a4 <USB_DevConnect>:
{
 80028a4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80028a6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80028aa:	f023 0302 	bic.w	r3, r3, #2
 80028ae:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f7fd feb4 	bl	8000620 <HAL_Delay>
}
 80028b8:	2000      	movs	r0, #0
 80028ba:	bd08      	pop	{r3, pc}

080028bc <USB_DevDisconnect>:
{
 80028bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80028be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80028ca:	2003      	movs	r0, #3
 80028cc:	f7fd fea8 	bl	8000620 <HAL_Delay>
}
 80028d0:	2000      	movs	r0, #0
 80028d2:	bd08      	pop	{r3, pc}

080028d4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80028d4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80028d6:	6980      	ldr	r0, [r0, #24]
}
 80028d8:	4010      	ands	r0, r2
 80028da:	4770      	bx	lr

080028dc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80028dc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80028e0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80028e4:	69c0      	ldr	r0, [r0, #28]
 80028e6:	4018      	ands	r0, r3
}
 80028e8:	0c00      	lsrs	r0, r0, #16
 80028ea:	4770      	bx	lr

080028ec <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80028ec:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80028f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80028f4:	69c0      	ldr	r0, [r0, #28]
 80028f6:	4018      	ands	r0, r3
}
 80028f8:	b280      	uxth	r0, r0
 80028fa:	4770      	bx	lr

080028fc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80028fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002900:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002904:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002908:	6940      	ldr	r0, [r0, #20]
}
 800290a:	4010      	ands	r0, r2
 800290c:	4770      	bx	lr

0800290e <USB_ReadDevInEPInterrupt>:
{
 800290e:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002910:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002914:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002918:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800291c:	f001 010f 	and.w	r1, r1, #15
 8002920:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002922:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002926:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002928:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4323      	orrs	r3, r4
}
 800292e:	4018      	ands	r0, r3
 8002930:	bd10      	pop	{r4, pc}

08002932 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002932:	6940      	ldr	r0, [r0, #20]
}
 8002934:	f000 0001 	and.w	r0, r0, #1
 8002938:	4770      	bx	lr

0800293a <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800293a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800293e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800294a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f002 0206 	and.w	r2, r2, #6
 8002954:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002956:	bf02      	ittt	eq
 8002958:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 800295c:	f042 0203 	orreq.w	r2, r2, #3
 8002960:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296a:	605a      	str	r2, [r3, #4]
}
 800296c:	2000      	movs	r0, #0
 800296e:	4770      	bx	lr

08002970 <USB_EP0_OutStart>:
{
 8002970:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <USB_EP0_OutStart+0x5c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002974:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002976:	429c      	cmp	r4, r3
 8002978:	d903      	bls.n	8002982 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800297a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800297e:	2b00      	cmp	r3, #0
 8002980:	db21      	blt.n	80029c6 <USB_EP0_OutStart+0x56>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002982:	2400      	movs	r4, #0
 8002984:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002988:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800298c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002990:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002994:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002998:	f044 0418 	orr.w	r4, r4, #24
 800299c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80029a0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80029a4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80029a6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80029aa:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80029ae:	bf08      	it	eq
 80029b0:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80029b4:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80029b8:	bf02      	ittt	eq
 80029ba:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 80029be:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 80029c2:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 80029c6:	2000      	movs	r0, #0
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	bf00      	nop
 80029cc:	4f54300a 	.word	0x4f54300a

080029d0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80029d0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 80029d4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80029d6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80029da:	b15b      	cbz	r3, 80029f4 <USBD_CDC_EP0_RxReady+0x24>
 80029dc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80029e0:	28ff      	cmp	r0, #255	; 0xff
 80029e2:	d007      	beq.n	80029f4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80029ea:	4621      	mov	r1, r4
 80029ec:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80029ee:	23ff      	movs	r3, #255	; 0xff
 80029f0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	bd10      	pop	{r4, pc}

080029f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80029f8:	2343      	movs	r3, #67	; 0x43
 80029fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80029fc:	4800      	ldr	r0, [pc, #0]	; (8002a00 <USBD_CDC_GetFSCfgDesc+0x8>)
 80029fe:	4770      	bx	lr
 8002a00:	20000040 	.word	0x20000040

08002a04 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002a04:	2343      	movs	r3, #67	; 0x43
 8002a06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002a08:	4800      	ldr	r0, [pc, #0]	; (8002a0c <USBD_CDC_GetHSCfgDesc+0x8>)
 8002a0a:	4770      	bx	lr
 8002a0c:	20000084 	.word	0x20000084

08002a10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002a10:	2343      	movs	r3, #67	; 0x43
 8002a12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002a14:	4800      	ldr	r0, [pc, #0]	; (8002a18 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002a16:	4770      	bx	lr
 8002a18:	200000d4 	.word	0x200000d4

08002a1c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002a20:	4800      	ldr	r0, [pc, #0]	; (8002a24 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002a22:	4770      	bx	lr
 8002a24:	200000c8 	.word	0x200000c8

08002a28 <USBD_CDC_DataOut>:
{
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a2c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a30:	f002 f84c 	bl	8004acc <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002a34:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a38:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002a3c:	b14b      	cbz	r3, 8002a52 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002a3e:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8002a42:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002a4c:	4798      	blx	r3
    return USBD_OK;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002a52:	2002      	movs	r0, #2
}
 8002a54:	bd38      	pop	{r3, r4, r5, pc}

08002a56 <USBD_CDC_DataIn>:
{
 8002a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8002a58:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8002a5c:	b1d6      	cbz	r6, 8002a94 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002a5e:	2314      	movs	r3, #20
 8002a60:	fb03 0301 	mla	r3, r3, r1, r0
 8002a64:	69dd      	ldr	r5, [r3, #28]
 8002a66:	b18d      	cbz	r5, 8002a8c <USBD_CDC_DataIn+0x36>
 8002a68:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8002a6c:	271c      	movs	r7, #28
 8002a6e:	fb07 4201 	mla	r2, r7, r1, r4
 8002a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a74:	fbb5 f4f2 	udiv	r4, r5, r2
 8002a78:	fb02 5414 	mls	r4, r2, r4, r5
 8002a7c:	b934      	cbnz	r4, 8002a8c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8002a7e:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8002a80:	4622      	mov	r2, r4
 8002a82:	4623      	mov	r3, r4
 8002a84:	f002 f806 	bl	8004a94 <USBD_LL_Transmit>
    return USBD_OK;
 8002a88:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8002a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8002a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8002a94:	2002      	movs	r0, #2
}
 8002a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a98 <USBD_CDC_Setup>:
{
 8002a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a9c:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a9e:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8002aa2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002aa6:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8002aaa:	4605      	mov	r5, r0
 8002aac:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8002aae:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8002ab2:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ab6:	d028      	beq.n	8002b0a <USBD_CDC_Setup+0x72>
 8002ab8:	2c20      	cmp	r4, #32
 8002aba:	d147      	bne.n	8002b4c <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 8002abc:	88cc      	ldrh	r4, [r1, #6]
 8002abe:	784b      	ldrb	r3, [r1, #1]
 8002ac0:	b1e4      	cbz	r4, 8002afc <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 8002ac2:	0612      	lsls	r2, r2, #24
 8002ac4:	d511      	bpl.n	8002aea <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ac6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002aca:	4639      	mov	r1, r7
 8002acc:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ad6:	88f2      	ldrh	r2, [r6, #6]
 8002ad8:	4639      	mov	r1, r7
 8002ada:	4628      	mov	r0, r5
 8002adc:	f000 fc32 	bl	8003344 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002ae0:	4644      	mov	r4, r8
}
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	b003      	add	sp, #12
 8002ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 8002aea:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8002aee:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002af2:	4622      	mov	r2, r4
 8002af4:	4639      	mov	r1, r7
 8002af6:	f000 fc3a 	bl	800336e <USBD_CtlPrepareRx>
 8002afa:	e7f1      	b.n	8002ae0 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002afc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002b00:	4618      	mov	r0, r3
 8002b02:	6895      	ldr	r5, [r2, #8]
 8002b04:	4622      	mov	r2, r4
 8002b06:	47a8      	blx	r5
 8002b08:	e7eb      	b.n	8002ae2 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 8002b0a:	784f      	ldrb	r7, [r1, #1]
 8002b0c:	2f0a      	cmp	r7, #10
 8002b0e:	d00d      	beq.n	8002b2c <USBD_CDC_Setup+0x94>
 8002b10:	2f0b      	cmp	r7, #11
 8002b12:	d015      	beq.n	8002b40 <USBD_CDC_Setup+0xa8>
 8002b14:	b9d7      	cbnz	r7, 8002b4c <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b16:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d114      	bne.n	8002b48 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f10d 0106 	add.w	r1, sp, #6
 8002b24:	f000 fc0e 	bl	8003344 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002b28:	463c      	mov	r4, r7
 8002b2a:	e7da      	b.n	8002ae2 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b2c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d109      	bne.n	8002b48 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8002b34:	2201      	movs	r2, #1
 8002b36:	f10d 0105 	add.w	r1, sp, #5
 8002b3a:	f000 fc03 	bl	8003344 <USBD_CtlSendData>
 8002b3e:	e7d0      	b.n	8002ae2 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002b40:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d0cc      	beq.n	8002ae2 <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 8002b48:	4631      	mov	r1, r6
 8002b4a:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8002b4c:	f000 fbd3 	bl	80032f6 <USBD_CtlError>
    ret = USBD_FAIL;
 8002b50:	2402      	movs	r4, #2
    break;
 8002b52:	e7c6      	b.n	8002ae2 <USBD_CDC_Setup+0x4a>

08002b54 <USBD_CDC_DeInit>:
{
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002b58:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002b5a:	2181      	movs	r1, #129	; 0x81
 8002b5c:	f001 ff4e 	bl	80049fc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002b60:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002b62:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002b64:	4620      	mov	r0, r4
 8002b66:	f001 ff49 	bl	80049fc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002b6a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002b6e:	2182      	movs	r1, #130	; 0x82
 8002b70:	4620      	mov	r0, r4
 8002b72:	f001 ff43 	bl	80049fc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002b76:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002b7a:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8002b7c:	b14b      	cbz	r3, 8002b92 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002b7e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002b86:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8002b8a:	f002 f877 	bl	8004c7c <free>
    pdev->pClassData = NULL;
 8002b8e:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	bd38      	pop	{r3, r4, r5, pc}

08002b96 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002b96:	7c03      	ldrb	r3, [r0, #16]
{
 8002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9c:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002b9e:	bbcb      	cbnz	r3, 8002c14 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002ba8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002baa:	f001 ff17 	bl	80049dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002bae:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f001 ff0f 	bl	80049dc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002bbe:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	2182      	movs	r1, #130	; 0x82
 8002bc8:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002bca:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002bcc:	f001 ff06 	bl	80049dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002bd0:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002bd2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002bd6:	f002 f849 	bl	8004c6c <malloc>
 8002bda:	4606      	mov	r6, r0
 8002bdc:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8002be0:	b358      	cbz	r0, 8002c3a <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002be2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002bea:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8002bee:	2700      	movs	r7, #0
 8002bf0:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8002bf4:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002bf8:	f1b8 0f00 	cmp.w	r8, #0
 8002bfc:	d113      	bne.n	8002c26 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c02:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002c06:	4629      	mov	r1, r5
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f001 ff51 	bl	8004ab0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002c0e:	4640      	mov	r0, r8
 8002c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002c14:	2340      	movs	r3, #64	; 0x40
 8002c16:	2202      	movs	r2, #2
 8002c18:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002c1a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002c1c:	f001 fede 	bl	80049dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002c20:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002c22:	2340      	movs	r3, #64	; 0x40
 8002c24:	e7c6      	b.n	8002bb4 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 ff3e 	bl	8004ab0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002c34:	4638      	mov	r0, r7
 8002c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8002c3a:	4628      	mov	r0, r5
}
 8002c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c40 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8002c40:	b119      	cbz	r1, 8002c4a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002c42:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8002c46:	2000      	movs	r0, #0
 8002c48:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002c4a:	2002      	movs	r0, #2
  }

  return ret;
}
 8002c4c:	4770      	bx	lr

08002c4e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c4e:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002c52:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002c54:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002c58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002c5c:	4770      	bx	lr

08002c5e <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002c5e:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8002c62:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002c64:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002c68:	4770      	bx	lr

08002c6a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c6a:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002c6e:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002c70:	b162      	cbz	r2, 8002c8c <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002c72:	7c04      	ldrb	r4, [r0, #16]
 8002c74:	b944      	cbnz	r4, 8002c88 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c76:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c7a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002c7e:	2101      	movs	r1, #1
 8002c80:	f001 ff16 	bl	8004ab0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002c88:	2340      	movs	r3, #64	; 0x40
 8002c8a:	e7f6      	b.n	8002c7a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002c8c:	2002      	movs	r0, #2
  }
}
 8002c8e:	bd10      	pop	{r4, pc}

08002c90 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002c90:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002c92:	b180      	cbz	r0, 8002cb6 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002c94:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002c98:	b113      	cbz	r3, 8002ca0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002ca0:	b109      	cbz	r1, 8002ca6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002ca2:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8002cac:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002cae:	f001 fe59 	bl	8004964 <USBD_LL_Init>

  return USBD_OK;
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002cb6:	2002      	movs	r0, #2
}
 8002cb8:	bd08      	pop	{r3, pc}

08002cba <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002cba:	b119      	cbz	r1, 8002cc4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002cbc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002cc4:	2002      	movs	r0, #2
  }

  return status;
}
 8002cc6:	4770      	bx	lr

08002cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002cc8:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002cca:	f001 fe79 	bl	80049c0 <USBD_LL_Start>

  return USBD_OK;
}
 8002cce:	2000      	movs	r0, #0
 8002cd0:	bd08      	pop	{r3, pc}

08002cd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002cd2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8002cd4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002cd8:	b90b      	cbnz	r3, 8002cde <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002cda:	2002      	movs	r0, #2
 8002cdc:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4798      	blx	r3
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d1f9      	bne.n	8002cda <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002ce6:	bd08      	pop	{r3, pc}

08002ce8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ce8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002cea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4798      	blx	r3
  return USBD_OK;
}
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	bd08      	pop	{r3, pc}

08002cf6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002cf6:	b538      	push	{r3, r4, r5, lr}
 8002cf8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002cfa:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 fae5 	bl	80032ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002d04:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002d06:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d0a:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002d0e:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002d12:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002d16:	f001 031f 	and.w	r3, r1, #31
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d00e      	beq.n	8002d3c <USBD_LL_SetupStage+0x46>
 8002d1e:	d307      	bcc.n	8002d30 <USBD_LL_SetupStage+0x3a>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d010      	beq.n	8002d46 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002d24:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f001 fe75 	bl	8004a18 <USBD_LL_StallEP>
    break;
 8002d2e:	e003      	b.n	8002d38 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002d30:	4629      	mov	r1, r5
 8002d32:	4620      	mov	r0, r4
 8002d34:	f000 f904 	bl	8002f40 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002d38:	2000      	movs	r0, #0
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f000 fa18 	bl	8003174 <USBD_StdItfReq>
    break;
 8002d44:	e7f8      	b.n	8002d38 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002d46:	4629      	mov	r1, r5
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f000 fa38 	bl	80031be <USBD_StdEPReq>
    break;
 8002d4e:	e7f3      	b.n	8002d38 <USBD_LL_SetupStage+0x42>

08002d50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	4605      	mov	r5, r0
 8002d54:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002d56:	bb49      	cbnz	r1, 8002dac <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002d58:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d11e      	bne.n	8002d9e <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002d60:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002d64:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d90b      	bls.n	8002d84 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002d6c:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002d6e:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002d70:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8002d74:	bf8c      	ite	hi
 8002d76:	b29a      	uxthhi	r2, r3
 8002d78:	b292      	uxthls	r2, r2
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	f000 fb06 	bl	800338c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002d80:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002d84:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	b123      	cbz	r3, 8002d96 <USBD_LL_DataOutStage+0x46>
 8002d8c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002d90:	2a03      	cmp	r2, #3
 8002d92:	d100      	bne.n	8002d96 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002d94:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 fb00 	bl	800339c <USBD_CtlSendStatus>
 8002d9c:	e7f0      	b.n	8002d80 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d1ee      	bne.n	8002d80 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002da2:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8002da6:	f001 fe37 	bl	8004a18 <USBD_LL_StallEP>
 8002daa:	e7e9      	b.n	8002d80 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002dac:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	b12b      	cbz	r3, 8002dc0 <USBD_LL_DataOutStage+0x70>
 8002db4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002db8:	2a03      	cmp	r2, #3
 8002dba:	d101      	bne.n	8002dc0 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002dbc:	4798      	blx	r3
 8002dbe:	e7df      	b.n	8002d80 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002dc0:	2002      	movs	r0, #2
}
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}

08002dc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002dca:	460e      	mov	r6, r1
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d148      	bne.n	8002e62 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002dd0:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8002dd4:	2a02      	cmp	r2, #2
 8002dd6:	d13d      	bne.n	8002e54 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8002dd8:	6a05      	ldr	r5, [r0, #32]
 8002dda:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002ddc:	4295      	cmp	r5, r2
 8002dde:	d914      	bls.n	8002e0a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002de0:	1aaa      	subs	r2, r5, r2
 8002de2:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002de4:	4619      	mov	r1, r3
 8002de6:	b292      	uxth	r2, r2
 8002de8:	f000 fab9 	bl	800335e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002dec:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002dee:	461a      	mov	r2, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	4620      	mov	r0, r4
 8002df4:	f001 fe5c 	bl	8004ab0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002df8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	d13a      	bne.n	8002e7a <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002e04:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002e0a:	69c3      	ldr	r3, [r0, #28]
 8002e0c:	fbb3 f5f2 	udiv	r5, r3, r2
 8002e10:	fb02 3515 	mls	r5, r2, r5, r3
 8002e14:	b965      	cbnz	r5, 8002e30 <USBD_LL_DataInStage+0x6c>
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d80a      	bhi.n	8002e30 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002e1a:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d206      	bcs.n	8002e30 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002e22:	462a      	mov	r2, r5
 8002e24:	f000 fa9b 	bl	800335e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002e28:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002e2c:	462b      	mov	r3, r5
 8002e2e:	e7de      	b.n	8002dee <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002e30:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	b12b      	cbz	r3, 8002e44 <USBD_LL_DataInStage+0x80>
 8002e38:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002e3c:	2a03      	cmp	r2, #3
 8002e3e:	d101      	bne.n	8002e44 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002e40:	4620      	mov	r0, r4
 8002e42:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	4620      	mov	r0, r4
 8002e48:	f001 fde6 	bl	8004a18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 fab0 	bl	80033b2 <USBD_CtlReceiveStatus>
 8002e52:	e7d1      	b.n	8002df8 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002e54:	f032 0304 	bics.w	r3, r2, #4
 8002e58:	d1ce      	bne.n	8002df8 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	f001 fddc 	bl	8004a18 <USBD_LL_StallEP>
 8002e60:	e7ca      	b.n	8002df8 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002e62:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	b133      	cbz	r3, 8002e78 <USBD_LL_DataInStage+0xb4>
 8002e6a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002e6e:	2a03      	cmp	r2, #3
 8002e70:	d102      	bne.n	8002e78 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002e72:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002e74:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002e78:	2002      	movs	r0, #2
}
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}

08002e7c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002e7c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e7e:	2200      	movs	r2, #0
{
 8002e80:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e82:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002e84:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e86:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e88:	2340      	movs	r3, #64	; 0x40
 8002e8a:	f001 fda7 	bl	80049dc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e8e:	4633      	mov	r3, r6
 8002e90:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002e92:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e96:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f001 fd9d 	bl	80049dc <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002ea2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002ea6:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002ea8:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002eaa:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002eac:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002eb0:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8002eb4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002eb6:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002eba:	b123      	cbz	r3, 8002ec6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002ebc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}

08002eca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002eca:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002ecc:	2000      	movs	r0, #0
 8002ece:	4770      	bx	lr

08002ed0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002ed0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002ed4:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002ede:	2000      	movs	r0, #0
 8002ee0:	4770      	bx	lr

08002ee2 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002ee2:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8002ee6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002eea:	2000      	movs	r0, #0
 8002eec:	4770      	bx	lr

08002eee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002eee:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ef0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002ef4:	2a03      	cmp	r2, #3
 8002ef6:	d104      	bne.n	8002f02 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002ef8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	b103      	cbz	r3, 8002f02 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002f00:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd08      	pop	{r3, pc}

08002f06 <USBD_LL_IsoINIncomplete>:
 8002f06:	2000      	movs	r0, #0
 8002f08:	4770      	bx	lr

08002f0a <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4770      	bx	lr

08002f0e <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002f0e:	2000      	movs	r0, #0
 8002f10:	4770      	bx	lr

08002f12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002f12:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f14:	2201      	movs	r2, #1
 8002f16:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002f1a:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8002f1e:	7901      	ldrb	r1, [r0, #4]
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	4790      	blx	r2

  return USBD_OK;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	bd08      	pop	{r3, pc}

08002f28 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002f28:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002f2a:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002f2c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002f2e:	f001 fd73 	bl	8004a18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002f32:	4620      	mov	r0, r4
 8002f34:	2100      	movs	r1, #0
}
 8002f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002f3a:	f001 bd6d 	b.w	8004a18 <USBD_LL_StallEP>
	...

08002f40 <USBD_StdDevReq>:
{
 8002f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f42:	780b      	ldrb	r3, [r1, #0]
 8002f44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f48:	2b20      	cmp	r3, #32
{
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f4e:	d014      	beq.n	8002f7a <USBD_StdDevReq+0x3a>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d012      	beq.n	8002f7a <USBD_StdDevReq+0x3a>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 808d 	bne.w	8003074 <USBD_StdDevReq+0x134>
    switch (req->bRequest)
 8002f5a:	784b      	ldrb	r3, [r1, #1]
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	f200 8088 	bhi.w	8003072 <USBD_StdDevReq+0x132>
 8002f62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f66:	00df      	.short	0x00df
 8002f68:	008600f9 	.word	0x008600f9
 8002f6c:	008600f2 	.word	0x008600f2
 8002f70:	0013007a 	.word	0x0013007a
 8002f74:	00ca0086 	.word	0x00ca0086
 8002f78:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 8002f7a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002f7e:	4629      	mov	r1, r5
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4620      	mov	r0, r4
 8002f84:	4798      	blx	r3
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	b003      	add	sp, #12
 8002f8a:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8002f8c:	884b      	ldrh	r3, [r1, #2]
 8002f8e:	0a1a      	lsrs	r2, r3, #8
 8002f90:	3a01      	subs	r2, #1
 8002f92:	2a06      	cmp	r2, #6
 8002f94:	d86d      	bhi.n	8003072 <USBD_StdDevReq+0x132>
 8002f96:	e8df f002 	tbb	[pc, r2]
 8002f9a:	2004      	.short	0x2004
 8002f9c:	4d6c6c2d 	.word	0x4d6c6c2d
 8002fa0:	56          	.byte	0x56
 8002fa1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002fa2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002fa6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002fa8:	7c20      	ldrb	r0, [r4, #16]
 8002faa:	f10d 0106 	add.w	r1, sp, #6
 8002fae:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002fb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002fb4:	b152      	cbz	r2, 8002fcc <USBD_StdDevReq+0x8c>
 8002fb6:	88eb      	ldrh	r3, [r5, #6]
 8002fb8:	b143      	cbz	r3, 8002fcc <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	bf28      	it	cs
 8002fbe:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8002fc4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8002fc8:	f000 f9bc 	bl	8003344 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002fcc:	88eb      	ldrh	r3, [r5, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1d9      	bne.n	8002f86 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f000 f9e2 	bl	800339c <USBD_CtlSendStatus>
 8002fd8:	e7d5      	b.n	8002f86 <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002fda:	7c02      	ldrb	r2, [r0, #16]
 8002fdc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002fe0:	b932      	cbnz	r2, 8002ff0 <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002fe4:	f10d 0006 	add.w	r0, sp, #6
 8002fe8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002fea:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002fec:	7043      	strb	r3, [r0, #1]
 8002fee:	e7df      	b.n	8002fb0 <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	e7f7      	b.n	8002fe4 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d83b      	bhi.n	8003072 <USBD_StdDevReq+0x132>
 8002ffa:	e8df f003 	tbb	[pc, r3]
 8002ffe:	0703      	.short	0x0703
 8003000:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003004:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	e7cd      	b.n	8002fa8 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800300c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	e7c9      	b.n	8002fa8 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003014:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	e7c5      	b.n	8002fa8 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800301c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	e7c1      	b.n	8002fa8 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003024:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	e7bd      	b.n	8002fa8 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800302c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	e7b9      	b.n	8002fa8 <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003034:	7c03      	ldrb	r3, [r0, #16]
 8003036:	b9e3      	cbnz	r3, 8003072 <USBD_StdDevReq+0x132>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003038:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800303c:	f10d 0006 	add.w	r0, sp, #6
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	4798      	blx	r3
 8003044:	e7b4      	b.n	8002fb0 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003046:	7c03      	ldrb	r3, [r0, #16]
 8003048:	b99b      	cbnz	r3, 8003072 <USBD_StdDevReq+0x132>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800304a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800304e:	f10d 0006 	add.w	r0, sp, #6
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003056:	2307      	movs	r3, #7
 8003058:	e7c8      	b.n	8002fec <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800305a:	888b      	ldrh	r3, [r1, #4]
 800305c:	b94b      	cbnz	r3, 8003072 <USBD_StdDevReq+0x132>
 800305e:	88cb      	ldrh	r3, [r1, #6]
 8003060:	b93b      	cbnz	r3, 8003072 <USBD_StdDevReq+0x132>
 8003062:	884d      	ldrh	r5, [r1, #2]
 8003064:	2d7f      	cmp	r5, #127	; 0x7f
 8003066:	d804      	bhi.n	8003072 <USBD_StdDevReq+0x132>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003068:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800306c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800306e:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003070:	d103      	bne.n	800307a <USBD_StdDevReq+0x13a>
      USBD_CtlError(pdev, req);
 8003072:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003074:	f7ff ff58 	bl	8002f28 <USBD_CtlError.constprop.1>
    break;
 8003078:	e785      	b.n	8002f86 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800307a:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800307e:	f001 fcfb 	bl	8004a78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003082:	4620      	mov	r0, r4
 8003084:	f000 f98a 	bl	800339c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003088:	b11d      	cbz	r5, 8003092 <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800308a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800308c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8003090:	e779      	b.n	8002f86 <USBD_StdDevReq+0x46>
 8003092:	2301      	movs	r3, #1
 8003094:	e7fa      	b.n	800308c <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 8003096:	7889      	ldrb	r1, [r1, #2]
 8003098:	4d35      	ldr	r5, [pc, #212]	; (8003170 <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800309a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800309c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800309e:	d8e8      	bhi.n	8003072 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 80030a0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d008      	beq.n	80030ba <USBD_StdDevReq+0x17a>
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d014      	beq.n	80030d6 <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 80030ac:	f7ff ff3c 	bl	8002f28 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80030b0:	7829      	ldrb	r1, [r5, #0]
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff fe18 	bl	8002ce8 <USBD_ClrClassConfig>
 80030b8:	e765      	b.n	8002f86 <USBD_StdDevReq+0x46>
      if (cfgidx)
 80030ba:	2900      	cmp	r1, #0
 80030bc:	d089      	beq.n	8002fd2 <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 80030be:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80030c0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80030c2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80030c4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff fe02 	bl	8002cd2 <USBD_SetClassConfig>
 80030ce:	2802      	cmp	r0, #2
 80030d0:	f47f af7f 	bne.w	8002fd2 <USBD_StdDevReq+0x92>
 80030d4:	e7cd      	b.n	8003072 <USBD_StdDevReq+0x132>
      if (cfgidx == 0U)
 80030d6:	b931      	cbnz	r1, 80030e6 <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030d8:	2302      	movs	r3, #2
 80030da:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80030de:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80030e0:	f7ff fe02 	bl	8002ce8 <USBD_ClrClassConfig>
 80030e4:	e775      	b.n	8002fd2 <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 80030e6:	6841      	ldr	r1, [r0, #4]
 80030e8:	2901      	cmp	r1, #1
 80030ea:	f43f af72 	beq.w	8002fd2 <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80030ee:	b2c9      	uxtb	r1, r1
 80030f0:	f7ff fdfa 	bl	8002ce8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80030f4:	7829      	ldrb	r1, [r5, #0]
 80030f6:	6061      	str	r1, [r4, #4]
 80030f8:	e7e6      	b.n	80030c8 <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 80030fa:	88ca      	ldrh	r2, [r1, #6]
 80030fc:	2a01      	cmp	r2, #1
 80030fe:	d1b8      	bne.n	8003072 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 8003100:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0b4      	beq.n	8003072 <USBD_StdDevReq+0x132>
 8003108:	2b02      	cmp	r3, #2
 800310a:	d903      	bls.n	8003114 <USBD_StdDevReq+0x1d4>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d1b0      	bne.n	8003072 <USBD_StdDevReq+0x132>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003110:	1d01      	adds	r1, r0, #4
 8003112:	e003      	b.n	800311c <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 8003114:	4601      	mov	r1, r0
 8003116:	2300      	movs	r3, #0
 8003118:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800311c:	4620      	mov	r0, r4
 800311e:	f000 f911 	bl	8003344 <USBD_CtlSendData>
 8003122:	e730      	b.n	8002f86 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8003124:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003128:	3b01      	subs	r3, #1
 800312a:	2b02      	cmp	r3, #2
 800312c:	d8a1      	bhi.n	8003072 <USBD_StdDevReq+0x132>
    if(req->wLength != 0x2U)
 800312e:	88cb      	ldrh	r3, [r1, #6]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d19e      	bne.n	8003072 <USBD_StdDevReq+0x132>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003134:	2301      	movs	r3, #1
 8003136:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8003138:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800313c:	b10b      	cbz	r3, 8003142 <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800313e:	2303      	movs	r3, #3
 8003140:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003142:	2202      	movs	r2, #2
 8003144:	f104 010c 	add.w	r1, r4, #12
 8003148:	e7e8      	b.n	800311c <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800314a:	884b      	ldrh	r3, [r1, #2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	f47f af1a 	bne.w	8002f86 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8003152:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8003156:	e73c      	b.n	8002fd2 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 8003158:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800315c:	3b01      	subs	r3, #1
 800315e:	2b02      	cmp	r3, #2
 8003160:	d887      	bhi.n	8003072 <USBD_StdDevReq+0x132>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003162:	884b      	ldrh	r3, [r1, #2]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f47f af0e 	bne.w	8002f86 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	e7f1      	b.n	8003152 <USBD_StdDevReq+0x212>
 800316e:	bf00      	nop
 8003170:	20000200 	.word	0x20000200

08003174 <USBD_StdItfReq>:
{
 8003174:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003176:	780b      	ldrb	r3, [r1, #0]
 8003178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800317c:	2b20      	cmp	r3, #32
{
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003182:	d002      	beq.n	800318a <USBD_StdItfReq+0x16>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d000      	beq.n	800318a <USBD_StdItfReq+0x16>
 8003188:	b9b3      	cbnz	r3, 80031b8 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800318a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800318e:	3b01      	subs	r3, #1
 8003190:	2b02      	cmp	r3, #2
 8003192:	d810      	bhi.n	80031b6 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003194:	792b      	ldrb	r3, [r5, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d80d      	bhi.n	80031b6 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800319a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800319e:	4629      	mov	r1, r5
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4620      	mov	r0, r4
 80031a4:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80031a6:	88eb      	ldrh	r3, [r5, #6]
 80031a8:	b91b      	cbnz	r3, 80031b2 <USBD_StdItfReq+0x3e>
 80031aa:	b910      	cbnz	r0, 80031b2 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 f8f5 	bl	800339c <USBD_CtlSendStatus>
}
 80031b2:	2000      	movs	r0, #0
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80031b6:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80031b8:	f7ff feb6 	bl	8002f28 <USBD_CtlError.constprop.1>
    break;
 80031bc:	e7f9      	b.n	80031b2 <USBD_StdItfReq+0x3e>

080031be <USBD_StdEPReq>:
{
 80031be:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031c0:	780a      	ldrb	r2, [r1, #0]
 80031c2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80031c6:	2a20      	cmp	r2, #32
{
 80031c8:	4604      	mov	r4, r0
 80031ca:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031cc:	d013      	beq.n	80031f6 <USBD_StdEPReq+0x38>
 80031ce:	2a40      	cmp	r2, #64	; 0x40
 80031d0:	d011      	beq.n	80031f6 <USBD_StdEPReq+0x38>
 80031d2:	b96a      	cbnz	r2, 80031f0 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80031d4:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80031d6:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80031d8:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80031da:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80031dc:	d01f      	beq.n	800321e <USBD_StdEPReq+0x60>
 80031de:	d335      	bcc.n	800324c <USBD_StdEPReq+0x8e>
 80031e0:	2d03      	cmp	r5, #3
 80031e2:	d105      	bne.n	80031f0 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80031e4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80031e8:	2a02      	cmp	r2, #2
 80031ea:	d026      	beq.n	800323a <USBD_StdEPReq+0x7c>
 80031ec:	2a03      	cmp	r2, #3
 80031ee:	d00a      	beq.n	8003206 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 80031f0:	f7ff fe9a 	bl	8002f28 <USBD_CtlError.constprop.1>
    break;
 80031f4:	e005      	b.n	8003202 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 80031f6:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80031fa:	4619      	mov	r1, r3
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	4620      	mov	r0, r4
 8003200:	4790      	blx	r2
}
 8003202:	2000      	movs	r0, #0
 8003204:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003206:	885a      	ldrh	r2, [r3, #2]
 8003208:	b92a      	cbnz	r2, 8003216 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800320a:	064a      	lsls	r2, r1, #25
 800320c:	d003      	beq.n	8003216 <USBD_StdEPReq+0x58>
 800320e:	88db      	ldrh	r3, [r3, #6]
 8003210:	b90b      	cbnz	r3, 8003216 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8003212:	f001 fc01 	bl	8004a18 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f8c0 	bl	800339c <USBD_CtlSendStatus>
        break;
 800321c:	e7f1      	b.n	8003202 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800321e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003222:	2a02      	cmp	r2, #2
 8003224:	d009      	beq.n	800323a <USBD_StdEPReq+0x7c>
 8003226:	2a03      	cmp	r2, #3
 8003228:	d1e2      	bne.n	80031f0 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800322a:	885b      	ldrh	r3, [r3, #2]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e8      	bne.n	8003202 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003230:	064d      	lsls	r5, r1, #25
 8003232:	d0f0      	beq.n	8003216 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003234:	f001 fbfe 	bl	8004a34 <USBD_LL_ClearStallEP>
 8003238:	e7ed      	b.n	8003216 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800323a:	064b      	lsls	r3, r1, #25
 800323c:	d017      	beq.n	800326e <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800323e:	f001 fbeb 	bl	8004a18 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	4620      	mov	r0, r4
 8003246:	f001 fbe7 	bl	8004a18 <USBD_LL_StallEP>
 800324a:	e7da      	b.n	8003202 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800324c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003250:	2b02      	cmp	r3, #2
 8003252:	d00e      	beq.n	8003272 <USBD_StdEPReq+0xb4>
 8003254:	2b03      	cmp	r3, #3
 8003256:	d1cb      	bne.n	80031f0 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8003258:	f012 0f80 	tst.w	r2, #128	; 0x80
 800325c:	f04f 0314 	mov.w	r3, #20
 8003260:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003264:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003268:	d012      	beq.n	8003290 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800326a:	6992      	ldr	r2, [r2, #24]
 800326c:	b9da      	cbnz	r2, 80032a6 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800326e:	4620      	mov	r0, r4
 8003270:	e7be      	b.n	80031f0 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003272:	0649      	lsls	r1, r1, #25
 8003274:	d1fb      	bne.n	800326e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003276:	0613      	lsls	r3, r2, #24
 8003278:	bf4c      	ite	mi
 800327a:	f100 0114 	addmi.w	r1, r0, #20
 800327e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8003282:	2300      	movs	r3, #0
 8003284:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003286:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003288:	4620      	mov	r0, r4
 800328a:	f000 f85b 	bl	8003344 <USBD_CtlSendData>
          break;
 800328e:	e7b8      	b.n	8003202 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003290:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003294:	2a00      	cmp	r2, #0
 8003296:	d0ea      	beq.n	800326e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003298:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800329c:	fb03 0505 	mla	r5, r3, r5, r0
 80032a0:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80032a4:	e004      	b.n	80032b0 <USBD_StdEPReq+0xf2>
 80032a6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80032aa:	fb05 3503 	mla	r5, r5, r3, r3
 80032ae:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80032b0:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80032b4:	d103      	bne.n	80032be <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80032b6:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80032b8:	2202      	movs	r2, #2
 80032ba:	4629      	mov	r1, r5
 80032bc:	e7e4      	b.n	8003288 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80032be:	4620      	mov	r0, r4
 80032c0:	f001 fbc6 	bl	8004a50 <USBD_LL_IsStallEP>
 80032c4:	b108      	cbz	r0, 80032ca <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7f5      	b.n	80032b6 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80032ca:	6028      	str	r0, [r5, #0]
 80032cc:	e7f4      	b.n	80032b8 <USBD_StdEPReq+0xfa>

080032ce <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80032ce:	780b      	ldrb	r3, [r1, #0]
 80032d0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80032d2:	784b      	ldrb	r3, [r1, #1]
 80032d4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80032d6:	78ca      	ldrb	r2, [r1, #3]
 80032d8:	788b      	ldrb	r3, [r1, #2]
 80032da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032de:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80032e0:	794a      	ldrb	r2, [r1, #5]
 80032e2:	790b      	ldrb	r3, [r1, #4]
 80032e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032e8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80032ea:	79ca      	ldrb	r2, [r1, #7]
 80032ec:	798b      	ldrb	r3, [r1, #6]
 80032ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032f2:	80c3      	strh	r3, [r0, #6]
 80032f4:	4770      	bx	lr

080032f6 <USBD_CtlError>:
{
 80032f6:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 80032f8:	2180      	movs	r1, #128	; 0x80
{
 80032fa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80032fc:	f001 fb8c 	bl	8004a18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003300:	4620      	mov	r0, r4
 8003302:	2100      	movs	r1, #0
}
 8003304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8003308:	f001 bb86 	b.w	8004a18 <USBD_LL_StallEP>

0800330c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800330c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800330e:	b188      	cbz	r0, 8003334 <USBD_GetString+0x28>
 8003310:	4605      	mov	r5, r0
 8003312:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8003314:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2c00      	cmp	r4, #0
 800331c:	d1f9      	bne.n	8003312 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800331e:	3301      	adds	r3, #1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003324:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003326:	2303      	movs	r3, #3
 8003328:	704b      	strb	r3, [r1, #1]
 800332a:	3801      	subs	r0, #1
 800332c:	2302      	movs	r3, #2
    while (*desc != '\0')
 800332e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003332:	b905      	cbnz	r5, 8003336 <USBD_GetString+0x2a>
 8003334:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 800333c:	3302      	adds	r3, #2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	548c      	strb	r4, [r1, r2]
 8003342:	e7f4      	b.n	800332e <USBD_GetString+0x22>

08003344 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003344:	b510      	push	{r4, lr}
 8003346:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003348:	2202      	movs	r2, #2
 800334a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800334e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003350:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003352:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003354:	2100      	movs	r1, #0
 8003356:	f001 fb9d 	bl	8004a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800335a:	2000      	movs	r0, #0
 800335c:	bd10      	pop	{r4, pc}

0800335e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800335e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003360:	4613      	mov	r3, r2
 8003362:	460a      	mov	r2, r1
 8003364:	2100      	movs	r1, #0
 8003366:	f001 fb95 	bl	8004a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd08      	pop	{r3, pc}

0800336e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800336e:	b510      	push	{r4, lr}
 8003370:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003372:	2203      	movs	r2, #3
 8003374:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8003378:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800337c:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800337e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003382:	2100      	movs	r1, #0
 8003384:	f001 fb94 	bl	8004ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003388:	2000      	movs	r0, #0
 800338a:	bd10      	pop	{r4, pc}

0800338c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800338c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800338e:	4613      	mov	r3, r2
 8003390:	460a      	mov	r2, r1
 8003392:	2100      	movs	r1, #0
 8003394:	f001 fb8c 	bl	8004ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003398:	2000      	movs	r0, #0
 800339a:	bd08      	pop	{r3, pc}

0800339c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800339c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800339e:	2304      	movs	r3, #4
 80033a0:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80033a4:	2300      	movs	r3, #0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	f001 fb73 	bl	8004a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80033ae:	2000      	movs	r0, #0
 80033b0:	bd08      	pop	{r3, pc}

080033b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80033b2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80033b4:	2305      	movs	r3, #5
 80033b6:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80033ba:	2300      	movs	r3, #0
 80033bc:	461a      	mov	r2, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	f001 fb76 	bl	8004ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80033c4:	2000      	movs	r0, #0
 80033c6:	bd08      	pop	{r3, pc}

080033c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033c8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80033ca:	f000 fcb9 	bl	8003d40 <vTaskStartScheduler>
  
  return osOK;
}
 80033ce:	2000      	movs	r0, #0
 80033d0:	bd08      	pop	{r3, pc}

080033d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033d2:	b570      	push	{r4, r5, r6, lr}
 80033d4:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033d6:	6946      	ldr	r6, [r0, #20]
 80033d8:	692a      	ldr	r2, [r5, #16]
 80033da:	6840      	ldr	r0, [r0, #4]
 80033dc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80033e0:	460b      	mov	r3, r1
 80033e2:	b086      	sub	sp, #24
 80033e4:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033e6:	b176      	cbz	r6, 8003406 <osThreadCreate+0x34>
 80033e8:	69ad      	ldr	r5, [r5, #24]
 80033ea:	b165      	cbz	r5, 8003406 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80033ec:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80033ee:	bf14      	ite	ne
 80033f0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033f2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033f4:	9502      	str	r5, [sp, #8]
 80033f6:	e88d 0050 	stmia.w	sp, {r4, r6}
 80033fa:	f000 fc3d 	bl	8003c78 <xTaskCreateStatic>
 80033fe:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003400:	9805      	ldr	r0, [sp, #20]
}
 8003402:	b006      	add	sp, #24
 8003404:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003406:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003408:	bf14      	ite	ne
 800340a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800340c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800340e:	ad05      	add	r5, sp, #20
 8003410:	b292      	uxth	r2, r2
 8003412:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003416:	f000 fc66 	bl	8003ce6 <xTaskCreate>
 800341a:	2801      	cmp	r0, #1
 800341c:	d0f0      	beq.n	8003400 <osThreadCreate+0x2e>
      return NULL;
 800341e:	2000      	movs	r0, #0
 8003420:	e7ef      	b.n	8003402 <osThreadCreate+0x30>

08003422 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003422:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003424:	2800      	cmp	r0, #0
 8003426:	bf08      	it	eq
 8003428:	2001      	moveq	r0, #1
 800342a:	f000 fdd1 	bl	8003fd0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800342e:	2000      	movs	r0, #0
 8003430:	bd08      	pop	{r3, pc}

08003432 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003432:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003434:	f000 fe2a 	bl	800408c <xTaskGetSchedulerState>
 8003438:	2801      	cmp	r0, #1
 800343a:	d003      	beq.n	8003444 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800343c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003440:	f000 b918 	b.w	8003674 <xPortSysTickHandler>
 8003444:	bd08      	pop	{r3, pc}

08003446 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	f100 0308 	add.w	r3, r0, #8
 800344a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800344c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003452:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003454:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003456:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	4770      	bx	lr

0800345c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800345c:	2300      	movs	r3, #0
 800345e:	6103      	str	r3, [r0, #16]
 8003460:	4770      	bx	lr

08003462 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003462:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003464:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800346e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003470:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003472:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003474:	3301      	adds	r3, #1
 8003476:	6003      	str	r3, [r0, #0]
 8003478:	4770      	bx	lr

0800347a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800347a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800347c:	1c53      	adds	r3, r2, #1
{
 800347e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003480:	d10a      	bne.n	8003498 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003482:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003488:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800348a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800348c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800348e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003490:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003492:	3301      	adds	r3, #1
 8003494:	6003      	str	r3, [r0, #0]
 8003496:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	f100 0308 	add.w	r3, r0, #8
 800349c:	685c      	ldr	r4, [r3, #4]
 800349e:	6825      	ldr	r5, [r4, #0]
 80034a0:	42aa      	cmp	r2, r5
 80034a2:	d3ef      	bcc.n	8003484 <vListInsert+0xa>
 80034a4:	4623      	mov	r3, r4
 80034a6:	e7f9      	b.n	800349c <vListInsert+0x22>

080034a8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a8:	6841      	ldr	r1, [r0, #4]
 80034aa:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034ac:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ae:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	6882      	ldr	r2, [r0, #8]
 80034b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034b8:	bf08      	it	eq
 80034ba:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034bc:	2200      	movs	r2, #0
 80034be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	3a01      	subs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c6:	6818      	ldr	r0, [r3, #0]
}
 80034c8:	4770      	bx	lr
	...

080034cc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <prvTaskExitError+0x3c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	d008      	beq.n	80034ec <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	e7fe      	b.n	80034ea <prvTaskExitError+0x1e>
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034fc:	9b01      	ldr	r3, [sp, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0fc      	beq.n	80034fc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003502:	b002      	add	sp, #8
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000118 	.word	0x20000118

0800350c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800350c:	4808      	ldr	r0, [pc, #32]	; (8003530 <prvPortStartFirstTask+0x24>)
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	6800      	ldr	r0, [r0, #0]
 8003512:	f380 8808 	msr	MSP, r0
 8003516:	f04f 0000 	mov.w	r0, #0
 800351a:	f380 8814 	msr	CONTROL, r0
 800351e:	b662      	cpsie	i
 8003520:	b661      	cpsie	f
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	df00      	svc	0
 800352c:	bf00      	nop
 800352e:	0000      	.short	0x0000
 8003530:	e000ed08 	.word	0xe000ed08

08003534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003544 <vPortEnableVFP+0x10>
 8003538:	6801      	ldr	r1, [r0, #0]
 800353a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800353e:	6001      	str	r1, [r0, #0]
 8003540:	4770      	bx	lr
 8003542:	0000      	.short	0x0000
 8003544:	e000ed88 	.word	0xe000ed88

08003548 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800354c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <pxPortInitialiseStack+0x28>)
 8003552:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003556:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800355a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800355e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003562:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003566:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800356a:	3844      	subs	r0, #68	; 0x44
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	080034cd 	.word	0x080034cd
	...

08003580 <SVC_Handler>:
	__asm volatile (
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <pxCurrentTCBConst2>)
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	6808      	ldr	r0, [r1, #0]
 8003586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358a:	f380 8809 	msr	PSP, r0
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f380 8811 	msr	BASEPRI, r0
 800359a:	4770      	bx	lr
 800359c:	f3af 8000 	nop.w

080035a0 <pxCurrentTCBConst2>:
 80035a0:	20003e20 	.word	0x20003e20

080035a4 <vPortEnterCritical>:
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <vPortEnterCritical+0x3c>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80035ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80035bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80035be:	d10d      	bne.n	80035dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <vPortEnterCritical+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80035c8:	d008      	beq.n	80035dc <vPortEnterCritical+0x38>
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	e7fe      	b.n	80035da <vPortEnterCritical+0x36>
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000118 	.word	0x20000118
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80035e8:	4a08      	ldr	r2, [pc, #32]	; (800360c <vPortExitCritical+0x24>)
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	b943      	cbnz	r3, 8003600 <vPortExitCritical+0x18>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	e7fe      	b.n	80035fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003600:	3b01      	subs	r3, #1
 8003602:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003604:	b90b      	cbnz	r3, 800360a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	4770      	bx	lr
 800360c:	20000118 	.word	0x20000118

08003610 <PendSV_Handler>:
	__asm volatile
 8003610:	f3ef 8009 	mrs	r0, PSP
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <pxCurrentTCBConst>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f01e 0f10 	tst.w	lr, #16
 8003620:	bf08      	it	eq
 8003622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	6010      	str	r0, [r2, #0]
 800362c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003634:	f380 8811 	msr	BASEPRI, r0
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f000 fcea 	bl	8004018 <vTaskSwitchContext>
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f380 8811 	msr	BASEPRI, r0
 800364c:	bc09      	pop	{r0, r3}
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	6808      	ldr	r0, [r1, #0]
 8003652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003656:	f01e 0f10 	tst.w	lr, #16
 800365a:	bf08      	it	eq
 800365c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003660:	f380 8809 	msr	PSP, r0
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	f3af 8000 	nop.w

08003670 <pxCurrentTCBConst>:
 8003670:	20003e20 	.word	0x20003e20

08003674 <xPortSysTickHandler>:
{
 8003674:	b508      	push	{r3, lr}
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003686:	f000 fb99 	bl	8003dbc <xTaskIncrementTick>
 800368a:	b118      	cbz	r0, 8003694 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <xPortSysTickHandler+0x28>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003694:	2300      	movs	r3, #0
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	bd08      	pop	{r3, pc}
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036a0:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a2:	4909      	ldr	r1, [pc, #36]	; (80036c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <vPortSetupTimerInterrupt+0x2c>)
 80036ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b6:	4906      	ldr	r1, [pc, #24]	; (80036d0 <vPortSetupTimerInterrupt+0x30>)
 80036b8:	3b01      	subs	r3, #1
 80036ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036bc:	2307      	movs	r3, #7
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010
 80036c8:	e000e018 	.word	0xe000e018
 80036cc:	2000011c 	.word	0x2000011c
 80036d0:	e000e014 	.word	0xe000e014

080036d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <xPortStartScheduler+0xe8>)
 80036d6:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <xPortStartScheduler+0xec>)
{
 80036d8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	4291      	cmp	r1, r2
 80036de:	d108      	bne.n	80036f2 <xPortStartScheduler+0x1e>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	e7fe      	b.n	80036f0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <xPortStartScheduler+0xf0>)
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d108      	bne.n	800370c <xPortStartScheduler+0x38>
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	e7fe      	b.n	800370a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <xPortStartScheduler+0xf4>)
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003718:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003722:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800372a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <xPortStartScheduler+0xfc>)
 800372e:	2207      	movs	r2, #7
 8003730:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003732:	2100      	movs	r1, #0
 8003734:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003738:	0600      	lsls	r0, r0, #24
 800373a:	f102 34ff 	add.w	r4, r2, #4294967295
 800373e:	d40d      	bmi.n	800375c <xPortStartScheduler+0x88>
 8003740:	b101      	cbz	r1, 8003744 <xPortStartScheduler+0x70>
 8003742:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	2a03      	cmp	r2, #3
 8003748:	d011      	beq.n	800376e <xPortStartScheduler+0x9a>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	e7fe      	b.n	800375a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800375c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003760:	0052      	lsls	r2, r2, #1
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f88d 2003 	strb.w	r2, [sp, #3]
 8003768:	2101      	movs	r1, #1
 800376a:	4622      	mov	r2, r4
 800376c:	e7e2      	b.n	8003734 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800376e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003770:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003774:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <xPortStartScheduler+0xf4>)
 800377a:	b2db      	uxtb	r3, r3
 800377c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <xPortStartScheduler+0x100>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003786:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800378e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003790:	f7ff ff86 	bl	80036a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <xPortStartScheduler+0x104>)
 8003796:	2400      	movs	r4, #0
 8003798:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800379a:	f7ff fecb 	bl	8003534 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <xPortStartScheduler+0x108>)
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037a6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80037a8:	f7ff feb0 	bl	800350c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80037ac:	f000 fc34 	bl	8004018 <vTaskSwitchContext>
	prvTaskExitError();
 80037b0:	f7ff fe8c 	bl	80034cc <prvTaskExitError>
}
 80037b4:	4620      	mov	r0, r4
 80037b6:	b002      	add	sp, #8
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	410fc271 	.word	0x410fc271
 80037c4:	410fc270 	.word	0x410fc270
 80037c8:	e000e400 	.word	0xe000e400
 80037cc:	20000201 	.word	0x20000201
 80037d0:	20000204 	.word	0x20000204
 80037d4:	e000ed20 	.word	0xe000ed20
 80037d8:	20000118 	.word	0x20000118
 80037dc:	e000ef34 	.word	0xe000ef34

080037e0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037e0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <prvInsertBlockIntoFreeList+0x40>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4282      	cmp	r2, r0
 80037e8:	d318      	bcc.n	800381c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037ea:	685c      	ldr	r4, [r3, #4]
 80037ec:	1919      	adds	r1, r3, r4
 80037ee:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037f0:	bf01      	itttt	eq
 80037f2:	6841      	ldreq	r1, [r0, #4]
 80037f4:	4618      	moveq	r0, r3
 80037f6:	1909      	addeq	r1, r1, r4
 80037f8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037fa:	6844      	ldr	r4, [r0, #4]
 80037fc:	1901      	adds	r1, r0, r4
 80037fe:	428a      	cmp	r2, r1
 8003800:	d107      	bne.n	8003812 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <prvInsertBlockIntoFreeList+0x44>)
 8003804:	6809      	ldr	r1, [r1, #0]
 8003806:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003808:	bf1f      	itttt	ne
 800380a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800380c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800380e:	1909      	addne	r1, r1, r4
 8003810:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003812:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003814:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003816:	bf18      	it	ne
 8003818:	6018      	strne	r0, [r3, #0]
 800381a:	bd10      	pop	{r4, pc}
 800381c:	4613      	mov	r3, r2
 800381e:	e7e1      	b.n	80037e4 <prvInsertBlockIntoFreeList+0x4>
 8003820:	20003e18 	.word	0x20003e18
 8003824:	20000208 	.word	0x20000208

08003828 <pvPortMalloc>:
{
 8003828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800382e:	f000 fabd 	bl	8003dac <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003832:	493e      	ldr	r1, [pc, #248]	; (800392c <pvPortMalloc+0x104>)
 8003834:	4d3e      	ldr	r5, [pc, #248]	; (8003930 <pvPortMalloc+0x108>)
 8003836:	680b      	ldr	r3, [r1, #0]
 8003838:	bb0b      	cbnz	r3, 800387e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800383a:	4a3e      	ldr	r2, [pc, #248]	; (8003934 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800383c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800383e:	bf1f      	itttt	ne
 8003840:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003842:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003846:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800384a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800384c:	bf14      	ite	ne
 800384e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003850:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003854:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003856:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003858:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800385c:	4e36      	ldr	r6, [pc, #216]	; (8003938 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800385e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003860:	2000      	movs	r0, #0
 8003862:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003864:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003866:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003868:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800386a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800386c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800386e:	4b33      	ldr	r3, [pc, #204]	; (800393c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003870:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003872:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <pvPortMalloc+0x118>)
 8003876:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003878:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800387c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800387e:	682f      	ldr	r7, [r5, #0]
 8003880:	4227      	tst	r7, r4
 8003882:	d116      	bne.n	80038b2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003884:	2c00      	cmp	r4, #0
 8003886:	d041      	beq.n	800390c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8003888:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800388c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800388e:	bf1c      	itt	ne
 8003890:	f023 0307 	bicne.w	r3, r3, #7
 8003894:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003896:	b163      	cbz	r3, 80038b2 <pvPortMalloc+0x8a>
 8003898:	4a29      	ldr	r2, [pc, #164]	; (8003940 <pvPortMalloc+0x118>)
 800389a:	6816      	ldr	r6, [r2, #0]
 800389c:	42b3      	cmp	r3, r6
 800389e:	4690      	mov	r8, r2
 80038a0:	d807      	bhi.n	80038b2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80038a2:	4a25      	ldr	r2, [pc, #148]	; (8003938 <pvPortMalloc+0x110>)
 80038a4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038a6:	6868      	ldr	r0, [r5, #4]
 80038a8:	4283      	cmp	r3, r0
 80038aa:	d804      	bhi.n	80038b6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80038ac:	6809      	ldr	r1, [r1, #0]
 80038ae:	428d      	cmp	r5, r1
 80038b0:	d107      	bne.n	80038c2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80038b2:	2400      	movs	r4, #0
 80038b4:	e02a      	b.n	800390c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038b6:	682c      	ldr	r4, [r5, #0]
 80038b8:	2c00      	cmp	r4, #0
 80038ba:	d0f7      	beq.n	80038ac <pvPortMalloc+0x84>
 80038bc:	462a      	mov	r2, r5
 80038be:	4625      	mov	r5, r4
 80038c0:	e7f1      	b.n	80038a6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038c2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038c4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038c6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038c8:	1ac2      	subs	r2, r0, r3
 80038ca:	2a10      	cmp	r2, #16
 80038cc:	d90f      	bls.n	80038ee <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038ce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038d0:	0741      	lsls	r1, r0, #29
 80038d2:	d008      	beq.n	80038e6 <pvPortMalloc+0xbe>
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	e7fe      	b.n	80038e4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038e6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038e8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038ea:	f7ff ff79 	bl	80037e0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038ee:	4913      	ldr	r1, [pc, #76]	; (800393c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038f0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038f2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038f4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038f6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038f8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80038fa:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038fe:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003902:	bf38      	it	cc
 8003904:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003906:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003908:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800390a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800390c:	f000 fae8 	bl	8003ee0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003910:	0763      	lsls	r3, r4, #29
 8003912:	d008      	beq.n	8003926 <pvPortMalloc+0xfe>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	e7fe      	b.n	8003924 <pvPortMalloc+0xfc>
}
 8003926:	4620      	mov	r0, r4
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392c:	20000208 	.word	0x20000208
 8003930:	20003e0c 	.word	0x20003e0c
 8003934:	2000020c 	.word	0x2000020c
 8003938:	20003e18 	.word	0x20003e18
 800393c:	20003e14 	.word	0x20003e14
 8003940:	20003e10 	.word	0x20003e10

08003944 <vPortFree>:
{
 8003944:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003946:	4604      	mov	r4, r0
 8003948:	b370      	cbz	r0, 80039a8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <vPortFree+0x68>)
 800394c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	4213      	tst	r3, r2
 8003954:	d108      	bne.n	8003968 <vPortFree+0x24>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	e7fe      	b.n	8003966 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003968:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800396c:	b141      	cbz	r1, 8003980 <vPortFree+0x3c>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	e7fe      	b.n	800397e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003980:	ea23 0302 	bic.w	r3, r3, r2
 8003984:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003988:	f000 fa10 	bl	8003dac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <vPortFree+0x6c>)
 800398e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003992:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003994:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003998:	440b      	add	r3, r1
 800399a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800399c:	f7ff ff20 	bl	80037e0 <prvInsertBlockIntoFreeList>
}
 80039a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80039a4:	f000 ba9c 	b.w	8003ee0 <xTaskResumeAll>
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	bf00      	nop
 80039ac:	20003e0c 	.word	0x20003e0c
 80039b0:	20003e10 	.word	0x20003e10

080039b4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039ba:	f7ff fdf3 	bl	80035a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039be:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80039c0:	4c2d      	ldr	r4, [pc, #180]	; (8003a78 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4f2d      	ldr	r7, [pc, #180]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 80039c6:	3201      	adds	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	d145      	bne.n	8003a5c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039d0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d11c      	bne.n	8003a12 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039d8:	1978      	adds	r0, r7, r5
 80039da:	3514      	adds	r5, #20
 80039dc:	f7ff fd33 	bl	8003446 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e0:	2d8c      	cmp	r5, #140	; 0x8c
 80039e2:	d1f9      	bne.n	80039d8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039e4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003aa8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80039e8:	4d25      	ldr	r5, [pc, #148]	; (8003a80 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80039ea:	4640      	mov	r0, r8
 80039ec:	f7ff fd2b 	bl	8003446 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7ff fd28 	bl	8003446 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039f6:	4823      	ldr	r0, [pc, #140]	; (8003a84 <prvAddNewTaskToReadyList+0xd0>)
 80039f8:	f7ff fd25 	bl	8003446 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039fc:	4822      	ldr	r0, [pc, #136]	; (8003a88 <prvAddNewTaskToReadyList+0xd4>)
 80039fe:	f7ff fd22 	bl	8003446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a02:	4822      	ldr	r0, [pc, #136]	; (8003a8c <prvAddNewTaskToReadyList+0xd8>)
 8003a04:	f7ff fd1f 	bl	8003446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <prvAddNewTaskToReadyList+0xdc>)
 8003a0a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <prvAddNewTaskToReadyList+0xe0>)
 8003a10:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003a14:	4921      	ldr	r1, [pc, #132]	; (8003a9c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003a16:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003a18:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003a1e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003a20:	2301      	movs	r3, #1
 8003a22:	4093      	lsls	r3, r2
 8003a24:	4303      	orrs	r3, r0
 8003a26:	2014      	movs	r0, #20
 8003a28:	600b      	str	r3, [r1, #0]
 8003a2a:	fb00 7002 	mla	r0, r0, r2, r7
 8003a2e:	1d31      	adds	r1, r6, #4
 8003a30:	f7ff fd17 	bl	8003462 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003a34:	f7ff fdd8 	bl	80035e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <prvAddNewTaskToReadyList+0xec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b163      	cbz	r3, 8003a58 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d207      	bcs.n	8003a58 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <prvAddNewTaskToReadyList+0xf0>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <prvAddNewTaskToReadyList+0xec>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1d6      	bne.n	8003a12 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003a6a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003a6c:	bf98      	it	ls
 8003a6e:	6026      	strls	r6, [r4, #0]
 8003a70:	e7cf      	b.n	8003a12 <prvAddNewTaskToReadyList+0x5e>
 8003a72:	bf00      	nop
 8003a74:	20003eb8 	.word	0x20003eb8
 8003a78:	20003e20 	.word	0x20003e20
 8003a7c:	20003e2c 	.word	0x20003e2c
 8003a80:	20003ee4 	.word	0x20003ee4
 8003a84:	20003f00 	.word	0x20003f00
 8003a88:	20003f2c 	.word	0x20003f2c
 8003a8c:	20003f18 	.word	0x20003f18
 8003a90:	20003e24 	.word	0x20003e24
 8003a94:	20003e28 	.word	0x20003e28
 8003a98:	20003ec8 	.word	0x20003ec8
 8003a9c:	20003ecc 	.word	0x20003ecc
 8003aa0:	20003f14 	.word	0x20003f14
 8003aa4:	e000ed04 	.word	0xe000ed04
 8003aa8:	20003ed0 	.word	0x20003ed0

08003aac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aac:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <prvResetNextTaskUnblockTime+0x1c>)
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <prvResetNextTaskUnblockTime+0x20>)
 8003ab4:	b919      	cbnz	r1, 8003abe <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	6852      	ldr	r2, [r2, #4]
 8003ac6:	e7f8      	b.n	8003aba <prvResetNextTaskUnblockTime+0xe>
 8003ac8:	20003e24 	.word	0x20003e24
 8003acc:	20003ef8 	.word	0x20003ef8

08003ad0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003ad6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ada:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003adc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ae6:	469a      	mov	sl, r3
 8003ae8:	4681      	mov	r9, r0
 8003aea:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003aec:	f026 0607 	bic.w	r6, r6, #7
 8003af0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003af4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af6:	7858      	ldrb	r0, [r3, #1]
 8003af8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003afc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003b00:	b108      	cbz	r0, 8003b06 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b02:	428b      	cmp	r3, r1
 8003b04:	d1f7      	bne.n	8003af6 <prvInitialiseNewTask.isra.2+0x26>
 8003b06:	9d08      	ldr	r5, [sp, #32]
 8003b08:	2d06      	cmp	r5, #6
 8003b0a:	bf28      	it	cs
 8003b0c:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b0e:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8003b10:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003b12:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b14:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b16:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003b1a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b1c:	f7ff fc9e 	bl	800345c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b20:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b24:	f104 0018 	add.w	r0, r4, #24
 8003b28:	f7ff fc98 	bl	800345c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003b2c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b2e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b32:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b34:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7ff fd03 	bl	8003548 <pxPortInitialiseStack>
 8003b42:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003b44:	f1b8 0f00 	cmp.w	r8, #0
 8003b48:	d001      	beq.n	8003b4e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b4a:	f8c8 4000 	str.w	r4, [r8]
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b52 <prvDeleteTCB>:
	{
 8003b52:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b54:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003b58:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b5a:	b93b      	cbnz	r3, 8003b6c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003b5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003b5e:	f7ff fef1 	bl	8003944 <vPortFree>
				vPortFree( pxTCB );
 8003b62:	4620      	mov	r0, r4
	}
 8003b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003b68:	f7ff beec 	b.w	8003944 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d0f9      	beq.n	8003b64 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d008      	beq.n	8003b86 <prvDeleteTCB+0x34>
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	e7fe      	b.n	8003b84 <prvDeleteTCB+0x32>
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <prvIdleTask>:
{
 8003b88:	b580      	push	{r7, lr}
				taskYIELD();
 8003b8a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003be8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b8e:	4f12      	ldr	r7, [pc, #72]	; (8003bd8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b90:	4c12      	ldr	r4, [pc, #72]	; (8003bdc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003b92:	4d13      	ldr	r5, [pc, #76]	; (8003be0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	b963      	cbnz	r3, 8003bb2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <prvIdleTask+0x5c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d9f8      	bls.n	8003b92 <prvIdleTask+0xa>
				taskYIELD();
 8003ba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ba4:	f8c8 3000 	str.w	r3, [r8]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	e7ee      	b.n	8003b90 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003bb2:	f7ff fcf7 	bl	80035a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bba:	1d30      	adds	r0, r6, #4
 8003bbc:	f7ff fc74 	bl	80034a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003bcc:	f7ff fd0c 	bl	80035e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f7ff ffbe 	bl	8003b52 <prvDeleteTCB>
 8003bd6:	e7dd      	b.n	8003b94 <prvIdleTask+0xc>
 8003bd8:	20003f2c 	.word	0x20003f2c
 8003bdc:	20003ebc 	.word	0x20003ebc
 8003be0:	20003eb8 	.word	0x20003eb8
 8003be4:	20003e2c 	.word	0x20003e2c
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf0:	4e1b      	ldr	r6, [pc, #108]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003bf2:	681d      	ldr	r5, [r3, #0]
{
 8003bf4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf6:	6830      	ldr	r0, [r6, #0]
 8003bf8:	3004      	adds	r0, #4
{
 8003bfa:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfc:	f7ff fc54 	bl	80034a8 <uxListRemove>
 8003c00:	4633      	mov	r3, r6
 8003c02:	b940      	cbnz	r0, 8003c16 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c04:	6831      	ldr	r1, [r6, #0]
 8003c06:	4e17      	ldr	r6, [pc, #92]	; (8003c64 <prvAddCurrentTaskToDelayedList+0x78>)
 8003c08:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003c0a:	6832      	ldr	r2, [r6, #0]
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	4088      	lsls	r0, r1
 8003c10:	ea22 0200 	bic.w	r2, r2, r0
 8003c14:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c16:	1c62      	adds	r2, r4, #1
 8003c18:	d107      	bne.n	8003c2a <prvAddCurrentTaskToDelayedList+0x3e>
 8003c1a:	b137      	cbz	r7, 8003c2a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	4812      	ldr	r0, [pc, #72]	; (8003c68 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003c20:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c26:	f7ff bc1c 	b.w	8003462 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c2a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c2c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003c2e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c30:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003c32:	d907      	bls.n	8003c44 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <prvAddCurrentTaskToDelayedList+0x80>)
 8003c36:	6810      	ldr	r0, [r2, #0]
 8003c38:	6819      	ldr	r1, [r3, #0]
}
 8003c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3e:	3104      	adds	r1, #4
 8003c40:	f7ff bc1b 	b.w	800347a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c46:	6810      	ldr	r0, [r2, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	3104      	adds	r1, #4
 8003c4c:	f7ff fc15 	bl	800347a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x88>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003c56:	bf38      	it	cc
 8003c58:	601c      	strcc	r4, [r3, #0]
 8003c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c5c:	20003f40 	.word	0x20003f40
 8003c60:	20003e20 	.word	0x20003e20
 8003c64:	20003ecc 	.word	0x20003ecc
 8003c68:	20003f18 	.word	0x20003f18
 8003c6c:	20003e28 	.word	0x20003e28
 8003c70:	20003e24 	.word	0x20003e24
 8003c74:	20003ef8 	.word	0x20003ef8

08003c78 <xTaskCreateStatic>:
	{
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003c7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003c80:	b945      	cbnz	r5, 8003c94 <xTaskCreateStatic+0x1c>
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	e7fe      	b.n	8003c92 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003c94:	b944      	cbnz	r4, 8003ca8 <xTaskCreateStatic+0x30>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ca8:	2654      	movs	r6, #84	; 0x54
 8003caa:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cac:	9e04      	ldr	r6, [sp, #16]
 8003cae:	2e54      	cmp	r6, #84	; 0x54
 8003cb0:	d008      	beq.n	8003cc4 <xTaskCreateStatic+0x4c>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cc4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cc6:	2502      	movs	r5, #2
 8003cc8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ccc:	ad05      	add	r5, sp, #20
 8003cce:	9501      	str	r5, [sp, #4]
 8003cd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003cd2:	9402      	str	r4, [sp, #8]
 8003cd4:	9500      	str	r5, [sp, #0]
 8003cd6:	f7ff fefb 	bl	8003ad0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff fe6a 	bl	80039b4 <prvAddNewTaskToReadyList>
	}
 8003ce0:	9805      	ldr	r0, [sp, #20]
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}

08003ce6 <xTaskCreate>:
	{
 8003ce6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cea:	4607      	mov	r7, r0
 8003cec:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	0090      	lsls	r0, r2, #2
	{
 8003cf0:	4688      	mov	r8, r1
 8003cf2:	4616      	mov	r6, r2
 8003cf4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf6:	f7ff fd97 	bl	8003828 <pvPortMalloc>
			if( pxStack != NULL )
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	b1e8      	cbz	r0, 8003d3a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003cfe:	2054      	movs	r0, #84	; 0x54
 8003d00:	f7ff fd92 	bl	8003828 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003d04:	4604      	mov	r4, r0
 8003d06:	b1a8      	cbz	r0, 8003d34 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003d10:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d16:	9002      	str	r0, [sp, #8]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	4641      	mov	r1, r8
 8003d20:	4638      	mov	r0, r7
 8003d22:	f7ff fed5 	bl	8003ad0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7ff fe44 	bl	80039b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d2c:	2001      	movs	r0, #1
	}
 8003d2e:	b005      	add	sp, #20
 8003d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003d34:	4628      	mov	r0, r5
 8003d36:	f7ff fe05 	bl	8003944 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d3a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003d3e:	e7f6      	b.n	8003d2e <xTaskCreate+0x48>

08003d40 <vTaskStartScheduler>:
{
 8003d40:	b510      	push	{r4, lr}
 8003d42:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d44:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d46:	aa07      	add	r2, sp, #28
 8003d48:	a906      	add	r1, sp, #24
 8003d4a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d4c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d4e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d50:	f000 fab6 	bl	80042c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d54:	9b05      	ldr	r3, [sp, #20]
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	9b06      	ldr	r3, [sp, #24]
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	9400      	str	r4, [sp, #0]
 8003d5e:	4623      	mov	r3, r4
 8003d60:	9a07      	ldr	r2, [sp, #28]
 8003d62:	490d      	ldr	r1, [pc, #52]	; (8003d98 <vTaskStartScheduler+0x58>)
 8003d64:	480d      	ldr	r0, [pc, #52]	; (8003d9c <vTaskStartScheduler+0x5c>)
 8003d66:	f7ff ff87 	bl	8003c78 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003d6a:	b190      	cbz	r0, 8003d92 <vTaskStartScheduler+0x52>
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <vTaskStartScheduler+0x60>)
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <vTaskStartScheduler+0x64>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <vTaskStartScheduler+0x68>)
 8003d8c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003d8e:	f7ff fca1 	bl	80036d4 <xPortStartScheduler>
}
 8003d92:	b008      	add	sp, #32
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	bf00      	nop
 8003d98:	08005b88 	.word	0x08005b88
 8003d9c:	08003b89 	.word	0x08003b89
 8003da0:	20003ef8 	.word	0x20003ef8
 8003da4:	20003f14 	.word	0x20003f14
 8003da8:	20003f40 	.word	0x20003f40

08003dac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003dac:	4a02      	ldr	r2, [pc, #8]	; (8003db8 <vTaskSuspendAll+0xc>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20003ec4 	.word	0x20003ec4

08003dbc <xTaskIncrementTick>:
{
 8003dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc0:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <xTaskIncrementTick+0xf8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d153      	bne.n	8003e70 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <xTaskIncrementTick+0xfc>)
 8003dca:	681c      	ldr	r4, [r3, #0]
 8003dcc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003dce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd0:	b9bc      	cbnz	r4, 8003e02 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <xTaskIncrementTick+0x100>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	b142      	cbz	r2, 8003dec <xTaskIncrementTick+0x30>
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	e7fe      	b.n	8003dea <xTaskIncrementTick+0x2e>
 8003dec:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <xTaskIncrementTick+0x104>)
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6810      	ldr	r0, [r2, #0]
 8003df2:	6018      	str	r0, [r3, #0]
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	4a33      	ldr	r2, [pc, #204]	; (8003ec4 <xTaskIncrementTick+0x108>)
 8003df8:	6813      	ldr	r3, [r2, #0]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	f7ff fe55 	bl	8003aac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e02:	4d31      	ldr	r5, [pc, #196]	; (8003ec8 <xTaskIncrementTick+0x10c>)
 8003e04:	4f31      	ldr	r7, [pc, #196]	; (8003ecc <xTaskIncrementTick+0x110>)
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	f04f 0b00 	mov.w	fp, #0
 8003e0e:	d33e      	bcc.n	8003e8e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e10:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003ebc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003e14:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003edc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e18:	f8d8 2000 	ldr.w	r2, [r8]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	bb72      	cbnz	r2, 8003e7e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	602a      	str	r2, [r5, #0]
					break;
 8003e26:	e032      	b.n	8003e8e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e28:	f106 0a04 	add.w	sl, r6, #4
 8003e2c:	4650      	mov	r0, sl
 8003e2e:	f7ff fb3b 	bl	80034a8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e32:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003e34:	b119      	cbz	r1, 8003e3e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e36:	f106 0018 	add.w	r0, r6, #24
 8003e3a:	f7ff fb35 	bl	80034a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e3e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003e40:	f8d9 3000 	ldr.w	r3, [r9]
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f100 	lsl.w	r1, r2, r0
 8003e4a:	4319      	orrs	r1, r3
 8003e4c:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <xTaskIncrementTick+0x114>)
 8003e4e:	f8c9 1000 	str.w	r1, [r9]
 8003e52:	f04f 0e14 	mov.w	lr, #20
 8003e56:	4651      	mov	r1, sl
 8003e58:	fb0e 3000 	mla	r0, lr, r0, r3
 8003e5c:	f7ff fb01 	bl	8003462 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003e64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003e66:	4291      	cmp	r1, r2
 8003e68:	bf28      	it	cs
 8003e6a:	f04f 0b01 	movcs.w	fp, #1
 8003e6e:	e7d3      	b.n	8003e18 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <xTaskIncrementTick+0x118>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003e78:	f04f 0b00 	mov.w	fp, #0
 8003e7c:	e011      	b.n	8003ea2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e7e:	f8d8 2000 	ldr.w	r2, [r8]
 8003e82:	68d2      	ldr	r2, [r2, #12]
 8003e84:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e86:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003e88:	428c      	cmp	r4, r1
 8003e8a:	d2cd      	bcs.n	8003e28 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003e8c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <xTaskIncrementTick+0x114>)
 8003e92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e94:	2214      	movs	r2, #20
 8003e96:	434a      	muls	r2, r1
 8003e98:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003e9a:	2a02      	cmp	r2, #2
 8003e9c:	bf28      	it	cs
 8003e9e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <xTaskIncrementTick+0x11c>)
 8003ea4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	bf18      	it	ne
 8003eaa:	f04f 0b01 	movne.w	fp, #1
}
 8003eae:	4658      	mov	r0, fp
 8003eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb4:	20003ec4 	.word	0x20003ec4
 8003eb8:	20003f40 	.word	0x20003f40
 8003ebc:	20003e24 	.word	0x20003e24
 8003ec0:	20003e28 	.word	0x20003e28
 8003ec4:	20003efc 	.word	0x20003efc
 8003ec8:	20003ef8 	.word	0x20003ef8
 8003ecc:	20003e20 	.word	0x20003e20
 8003ed0:	20003e2c 	.word	0x20003e2c
 8003ed4:	20003ec0 	.word	0x20003ec0
 8003ed8:	20003f44 	.word	0x20003f44
 8003edc:	20003ecc 	.word	0x20003ecc

08003ee0 <xTaskResumeAll>:
{
 8003ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003ee4:	4c31      	ldr	r4, [pc, #196]	; (8003fac <xTaskResumeAll+0xcc>)
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	b943      	cbnz	r3, 8003efc <xTaskResumeAll+0x1c>
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	e7fe      	b.n	8003efa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003efc:	f7ff fb52 	bl	80035a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f06:	6824      	ldr	r4, [r4, #0]
 8003f08:	b12c      	cbz	r4, 8003f16 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003f0c:	f7ff fb6c 	bl	80035e8 <vPortExitCritical>
}
 8003f10:	4620      	mov	r0, r4
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <xTaskResumeAll+0xd0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f5      	beq.n	8003f0a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003fc8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003f22:	4f24      	ldr	r7, [pc, #144]	; (8003fb4 <xTaskResumeAll+0xd4>)
 8003f24:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003fcc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f28:	f8d9 3000 	ldr.w	r3, [r9]
 8003f2c:	b9e3      	cbnz	r3, 8003f68 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003f2e:	b10c      	cbz	r4, 8003f34 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003f30:	f7ff fdbc 	bl	8003aac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f34:	4d20      	ldr	r5, [pc, #128]	; (8003fb8 <xTaskResumeAll+0xd8>)
 8003f36:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f38:	b144      	cbz	r4, 8003f4c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003f3a:	4e20      	ldr	r6, [pc, #128]	; (8003fbc <xTaskResumeAll+0xdc>)
 8003f3c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003f3e:	f7ff ff3d 	bl	8003dbc <xTaskIncrementTick>
 8003f42:	b100      	cbz	r0, 8003f46 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003f44:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f46:	3c01      	subs	r4, #1
 8003f48:	d1f9      	bne.n	8003f3e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003f4a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <xTaskResumeAll+0xdc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0da      	beq.n	8003f0a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <xTaskResumeAll+0xe0>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003f64:	2401      	movs	r4, #1
 8003f66:	e7d1      	b.n	8003f0c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f68:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003f6c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f6e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f70:	f104 0018 	add.w	r0, r4, #24
 8003f74:	f7ff fa98 	bl	80034a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff fa95 	bl	80034a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	2501      	movs	r5, #1
 8003f84:	fa05 f302 	lsl.w	r3, r5, r2
 8003f88:	2014      	movs	r0, #20
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	fb00 8002 	mla	r0, r0, r2, r8
 8003f90:	4631      	mov	r1, r6
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	f7ff fa65 	bl	8003462 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <xTaskResumeAll+0xe4>)
 8003f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003fa2:	bf24      	itt	cs
 8003fa4:	4b05      	ldrcs	r3, [pc, #20]	; (8003fbc <xTaskResumeAll+0xdc>)
 8003fa6:	601d      	strcs	r5, [r3, #0]
 8003fa8:	e7be      	b.n	8003f28 <xTaskResumeAll+0x48>
 8003faa:	bf00      	nop
 8003fac:	20003ec4 	.word	0x20003ec4
 8003fb0:	20003eb8 	.word	0x20003eb8
 8003fb4:	20003ecc 	.word	0x20003ecc
 8003fb8:	20003ec0 	.word	0x20003ec0
 8003fbc:	20003f44 	.word	0x20003f44
 8003fc0:	e000ed04 	.word	0xe000ed04
 8003fc4:	20003e20 	.word	0x20003e20
 8003fc8:	20003f00 	.word	0x20003f00
 8003fcc:	20003e2c 	.word	0x20003e2c

08003fd0 <vTaskDelay>:
	{
 8003fd0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fd2:	b940      	cbnz	r0, 8003fe6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <vTaskDelay+0x40>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <vTaskDelay+0x44>)
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	b141      	cbz	r1, 8003ffe <vTaskDelay+0x2e>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	e7fe      	b.n	8003ffc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ffe:	f7ff fed5 	bl	8003dac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004002:	f7ff fdf3 	bl	8003bec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004006:	f7ff ff6b 	bl	8003ee0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800400a:	2800      	cmp	r0, #0
 800400c:	d0e2      	beq.n	8003fd4 <vTaskDelay+0x4>
 800400e:	bd08      	pop	{r3, pc}
 8004010:	e000ed04 	.word	0xe000ed04
 8004014:	20003ec4 	.word	0x20003ec4

08004018 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <vTaskSwitchContext+0x60>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <vTaskSwitchContext+0x64>)
{
 800401e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004020:	b112      	cbz	r2, 8004028 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004022:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004028:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <vTaskSwitchContext+0x68>)
 800402c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f1c3 031f 	rsb	r3, r3, #31
 8004038:	2214      	movs	r2, #20
 800403a:	4912      	ldr	r1, [pc, #72]	; (8004084 <vTaskSwitchContext+0x6c>)
 800403c:	435a      	muls	r2, r3
 800403e:	1888      	adds	r0, r1, r2
 8004040:	588c      	ldr	r4, [r1, r2]
 8004042:	b944      	cbnz	r4, 8004056 <vTaskSwitchContext+0x3e>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	e7fe      	b.n	8004054 <vTaskSwitchContext+0x3c>
 8004056:	6844      	ldr	r4, [r0, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	6864      	ldr	r4, [r4, #4]
 800405c:	6044      	str	r4, [r0, #4]
 800405e:	440a      	add	r2, r1
 8004060:	4294      	cmp	r4, r2
 8004062:	bf04      	itt	eq
 8004064:	6862      	ldreq	r2, [r4, #4]
 8004066:	6042      	streq	r2, [r0, #4]
 8004068:	2214      	movs	r2, #20
 800406a:	fb02 1303 	mla	r3, r2, r3, r1
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <vTaskSwitchContext+0x70>)
 8004074:	e7d6      	b.n	8004024 <vTaskSwitchContext+0xc>
 8004076:	bf00      	nop
 8004078:	20003ec4 	.word	0x20003ec4
 800407c:	20003f44 	.word	0x20003f44
 8004080:	20003ecc 	.word	0x20003ecc
 8004084:	20003e2c 	.word	0x20003e2c
 8004088:	20003e20 	.word	0x20003e20

0800408c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <xTaskGetSchedulerState+0x18>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b133      	cbz	r3, 80040a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <xTaskGetSchedulerState+0x1c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004098:	bf0c      	ite	eq
 800409a:	2002      	moveq	r0, #2
 800409c:	2000      	movne	r0, #0
 800409e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040a0:	2001      	movs	r0, #1
	}
 80040a2:	4770      	bx	lr
 80040a4:	20003f14 	.word	0x20003f14
 80040a8:	20003ec4 	.word	0x20003ec4

080040ac <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80040ac:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80040ae:	480c      	ldr	r0, [pc, #48]	; (80040e0 <MX_CAN1_Init+0x34>)
  hcan1.Init.Prescaler = 16;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <MX_CAN1_Init+0x38>)
 80040b2:	f04f 0e10 	mov.w	lr, #16
 80040b6:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80040be:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80040c0:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80040c2:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80040c4:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80040c6:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80040c8:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80040ca:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80040cc:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80040ce:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80040d0:	f7fc faba 	bl	8000648 <HAL_CAN_Init>
 80040d4:	b118      	cbz	r0, 80040de <MX_CAN1_Init+0x32>
  {
    Error_Handler();
  }

}
 80040d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80040da:	f000 b9db 	b.w	8004494 <Error_Handler>
 80040de:	bd08      	pop	{r3, pc}
 80040e0:	200041d8 	.word	0x200041d8
 80040e4:	40006400 	.word	0x40006400

080040e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80040e8:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 80040ea:	480c      	ldr	r0, [pc, #48]	; (800411c <MX_CAN2_Init+0x34>)
  hcan2.Init.Prescaler = 16;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <MX_CAN2_Init+0x38>)
 80040ee:	f04f 0e10 	mov.w	lr, #16
 80040f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80040fa:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80040fc:	6103      	str	r3, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80040fe:	6143      	str	r3, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004100:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004102:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004104:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004106:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004108:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800410a:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800410c:	f7fc fa9c 	bl	8000648 <HAL_CAN_Init>
 8004110:	b118      	cbz	r0, 800411a <MX_CAN2_Init+0x32>
  {
    Error_Handler();
  }

}
 8004112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004116:	f000 b9bd 	b.w	8004494 <Error_Handler>
 800411a:	bd08      	pop	{r3, pc}
 800411c:	200041b0 	.word	0x200041b0
 8004120:	40006800 	.word	0x40006800

08004124 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004124:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004126:	2214      	movs	r2, #20
{
 8004128:	b08a      	sub	sp, #40	; 0x28
 800412a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	2100      	movs	r1, #0
 800412e:	eb0d 0002 	add.w	r0, sp, r2
 8004132:	f000 fdab 	bl	8004c8c <memset>
  if(canHandle->Instance==CAN1)
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_CAN_MspInit+0x160>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d14a      	bne.n	80041d4 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800413e:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_CAN_MspInit+0x164>)
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	3301      	adds	r3, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004144:	2b01      	cmp	r3, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004146:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004148:	d10b      	bne.n	8004162 <HAL_CAN_MspInit+0x3e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <HAL_CAN_MspInit+0x168>)
 8004150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004152:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	9b00      	ldr	r3, [sp, #0]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_CAN_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004164:	484a      	ldr	r0, [pc, #296]	; (8004290 <HAL_CAN_MspInit+0x16c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004166:	2400      	movs	r4, #0
 8004168:	9401      	str	r4, [sp, #4]
 800416a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800417c:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004180:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004182:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004184:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004186:	2309      	movs	r3, #9
 8004188:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800418c:	f7fc fc5e 	bl	8000a4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004190:	4622      	mov	r2, r4
 8004192:	2105      	movs	r1, #5
 8004194:	2013      	movs	r0, #19
 8004196:	f7fc fbef 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800419a:	2013      	movs	r0, #19
 800419c:	f7fc fc20 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80041a0:	4622      	mov	r2, r4
 80041a2:	2105      	movs	r1, #5
 80041a4:	2014      	movs	r0, #20
 80041a6:	f7fc fbe7 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041aa:	2014      	movs	r0, #20
 80041ac:	f7fc fc18 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80041b0:	4622      	mov	r2, r4
 80041b2:	2105      	movs	r1, #5
 80041b4:	2015      	movs	r0, #21
 80041b6:	f7fc fbdf 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80041ba:	2015      	movs	r0, #21
 80041bc:	f7fc fc10 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80041c0:	2016      	movs	r0, #22
 80041c2:	4622      	mov	r2, r4
 80041c4:	2105      	movs	r1, #5
 80041c6:	f7fc fbd7 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80041ca:	2016      	movs	r0, #22
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80041cc:	f7fc fc08 	bl	80009e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80041d0:	b00a      	add	sp, #40	; 0x28
 80041d2:	bd10      	pop	{r4, pc}
  else if(canHandle->Instance==CAN2)
 80041d4:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <HAL_CAN_MspInit+0x170>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d1fa      	bne.n	80041d0 <HAL_CAN_MspInit+0xac>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80041da:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_CAN_MspInit+0x168>)
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041dc:	482a      	ldr	r0, [pc, #168]	; (8004288 <HAL_CAN_MspInit+0x164>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 80041de:	2100      	movs	r1, #0
 80041e0:	9102      	str	r1, [sp, #8]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
 80041ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ec:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80041f0:	9202      	str	r2, [sp, #8]
 80041f2:	9a02      	ldr	r2, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041f4:	6802      	ldr	r2, [r0, #0]
 80041f6:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041f8:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041fa:	6002      	str	r2, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041fc:	d109      	bne.n	8004212 <HAL_CAN_MspInit+0xee>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041fe:	9103      	str	r1, [sp, #12]
 8004200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004202:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	9303      	str	r3, [sp, #12]
 8004210:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004212:	4b1e      	ldr	r3, [pc, #120]	; (800428c <HAL_CAN_MspInit+0x168>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004214:	4820      	ldr	r0, [pc, #128]	; (8004298 <HAL_CAN_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004216:	2400      	movs	r4, #0
 8004218:	9404      	str	r4, [sp, #16]
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	f042 0202 	orr.w	r2, r2, #2
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	9304      	str	r3, [sp, #16]
 800422a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800422c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004230:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004236:	2303      	movs	r3, #3
 8004238:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800423c:	2309      	movs	r3, #9
 800423e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004240:	f7fc fc04 	bl	8000a4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8004244:	4622      	mov	r2, r4
 8004246:	2105      	movs	r1, #5
 8004248:	203f      	movs	r0, #63	; 0x3f
 800424a:	f7fc fb95 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800424e:	203f      	movs	r0, #63	; 0x3f
 8004250:	f7fc fbc6 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004254:	4622      	mov	r2, r4
 8004256:	2105      	movs	r1, #5
 8004258:	2040      	movs	r0, #64	; 0x40
 800425a:	f7fc fb8d 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800425e:	2040      	movs	r0, #64	; 0x40
 8004260:	f7fc fbbe 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8004264:	4622      	mov	r2, r4
 8004266:	2105      	movs	r1, #5
 8004268:	2041      	movs	r0, #65	; 0x41
 800426a:	f7fc fb85 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800426e:	2041      	movs	r0, #65	; 0x41
 8004270:	f7fc fbb6 	bl	80009e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 5, 0);
 8004274:	2042      	movs	r0, #66	; 0x42
 8004276:	4622      	mov	r2, r4
 8004278:	2105      	movs	r1, #5
 800427a:	f7fc fb7d 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800427e:	2042      	movs	r0, #66	; 0x42
 8004280:	e7a4      	b.n	80041cc <HAL_CAN_MspInit+0xa8>
 8004282:	bf00      	nop
 8004284:	40006400 	.word	0x40006400
 8004288:	20003f48 	.word	0x20003f48
 800428c:	40023800 	.word	0x40023800
 8004290:	40020c00 	.word	0x40020c00
 8004294:	40006800 	.word	0x40006800
 8004298:	40020400 	.word	0x40020400

0800429c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800429c:	b508      	push	{r3, lr}
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800429e:	f000 fa77 	bl	8004790 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		//HAL_UART_Transmit(&huart2, (uint8_t*)"hello world\r\n",strlen("hello world\r\n"), HAL_MAX_DELAY);
		printf("hello world\r\n");
 80042a2:	4c06      	ldr	r4, [pc, #24]	; (80042bc <StartDefaultTask+0x20>)
 80042a4:	4620      	mov	r0, r4
 80042a6:	f000 fe19 	bl	8004edc <puts>
		__io_putchar('A');
 80042aa:	2041      	movs	r0, #65	; 0x41
 80042ac:	f000 fa60 	bl	8004770 <__io_putchar>
		osDelay(1000);
 80042b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042b4:	f7ff f8b5 	bl	8003422 <osDelay>
 80042b8:	e7f4      	b.n	80042a4 <StartDefaultTask+0x8>
 80042ba:	bf00      	nop
 80042bc:	08005b8d 	.word	0x08005b8d

080042c0 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <vApplicationGetIdleTaskMemory+0x10>)
 80042c2:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <vApplicationGetIdleTaskMemory+0x14>)
 80042c6:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000414c 	.word	0x2000414c
 80042d4:	20003f4c 	.word	0x20003f4c

080042d8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80042d8:	b530      	push	{r4, r5, lr}
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80042da:	4d08      	ldr	r5, [pc, #32]	; (80042fc <MX_FREERTOS_Init+0x24>)
 80042dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80042de:	b089      	sub	sp, #36	; 0x24
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80042e0:	ac01      	add	r4, sp, #4
 80042e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042ec:	2100      	movs	r1, #0
 80042ee:	a801      	add	r0, sp, #4
 80042f0:	f7ff f86f 	bl	80033d2 <osThreadCreate>
 80042f4:	4b02      	ldr	r3, [pc, #8]	; (8004300 <MX_FREERTOS_Init+0x28>)
 80042f6:	6018      	str	r0, [r3, #0]
}
 80042f8:	b009      	add	sp, #36	; 0x24
 80042fa:	bd30      	pop	{r4, r5, pc}
 80042fc:	08005b6c 	.word	0x08005b6c
 8004300:	20004200 	.word	0x20004200

08004304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004304:	b530      	push	{r4, r5, lr}
 8004306:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	2214      	movs	r2, #20
 800430a:	2100      	movs	r1, #0
 800430c:	a807      	add	r0, sp, #28
 800430e:	f000 fcbd 	bl	8004c8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004312:	2400      	movs	r4, #0
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <MX_GPIO_Init+0xb4>)
 8004316:	9401      	str	r4, [sp, #4]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800431a:	4d28      	ldr	r5, [pc, #160]	; (80043bc <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800431c:	f042 0204 	orr.w	r2, r2, #4
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
 8004322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004324:	f002 0204 	and.w	r2, r2, #4
 8004328:	9201      	str	r2, [sp, #4]
 800432a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800432c:	9402      	str	r4, [sp, #8]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	f042 0220 	orr.w	r2, r2, #32
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
 8004336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004338:	f002 0220 	and.w	r2, r2, #32
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004340:	9403      	str	r4, [sp, #12]
 8004342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004350:	9203      	str	r2, [sp, #12]
 8004352:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004354:	9404      	str	r4, [sp, #16]
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	f002 0201 	and.w	r2, r2, #1
 8004364:	9204      	str	r2, [sp, #16]
 8004366:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004368:	9405      	str	r4, [sp, #20]
 800436a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436c:	f042 0202 	orr.w	r2, r2, #2
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
 8004372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004374:	f002 0202 	and.w	r2, r2, #2
 8004378:	9205      	str	r2, [sp, #20]
 800437a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800437c:	9406      	str	r4, [sp, #24]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	f042 0208 	orr.w	r2, r2, #8
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800438e:	4622      	mov	r2, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004396:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004398:	f7fc fc38 	bl	8000c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800439c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043a2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043a6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043ae:	f7fc fb4d 	bl	8000a4c <HAL_GPIO_Init>

}
 80043b2:	b00d      	add	sp, #52	; 0x34
 80043b4:	bd30      	pop	{r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40021400 	.word	0x40021400

080043c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043c0:	b530      	push	{r4, r5, lr}
 80043c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043c4:	2230      	movs	r2, #48	; 0x30
 80043c6:	2100      	movs	r1, #0
 80043c8:	a808      	add	r0, sp, #32
 80043ca:	f000 fc5f 	bl	8004c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043ce:	2100      	movs	r1, #0
 80043d0:	2214      	movs	r2, #20
 80043d2:	a803      	add	r0, sp, #12
 80043d4:	f000 fc5a 	bl	8004c8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043d8:	2500      	movs	r5, #0
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <SystemClock_Config+0x8c>)
 80043dc:	9501      	str	r5, [sp, #4]
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <SystemClock_Config+0x90>)
 80043f2:	9502      	str	r5, [sp, #8]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004406:	2301      	movs	r3, #1
 8004408:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800440a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800440e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004410:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004414:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004416:	2304      	movs	r3, #4
 8004418:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800441a:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800441c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 800441e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004420:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004422:	2303      	movs	r3, #3
 8004424:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004426:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004428:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800442a:	f7fd f8a7 	bl	800157c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800442e:	230f      	movs	r3, #15
 8004430:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004432:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004438:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800443a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800443c:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800443e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004440:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004442:	f7fd fa4b 	bl	80018dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004446:	b015      	add	sp, #84	; 0x54
 8004448:	bd30      	pop	{r4, r5, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000

08004454 <main>:
{
 8004454:	b508      	push	{r3, lr}
  HAL_Init();
 8004456:	f7fc f8b7 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 800445a:	f7ff ffb1 	bl	80043c0 <SystemClock_Config>
  MX_GPIO_Init();
 800445e:	f7ff ff51 	bl	8004304 <MX_GPIO_Init>
  MX_CAN1_Init();
 8004462:	f7ff fe23 	bl	80040ac <MX_CAN1_Init>
  MX_CAN2_Init();
 8004466:	f7ff fe3f 	bl	80040e8 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 800446a:	f000 f8d7 	bl	800461c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800446e:	f000 f8f1 	bl	8004654 <MX_USART2_UART_Init>
 printf("%s->%s->%d",__FILE__,__FUNCTION__,__LINE__);
 8004472:	2365      	movs	r3, #101	; 0x65
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <main+0x34>)
 8004476:	4905      	ldr	r1, [pc, #20]	; (800448c <main+0x38>)
 8004478:	4805      	ldr	r0, [pc, #20]	; (8004490 <main+0x3c>)
 800447a:	f000 fcbb 	bl	8004df4 <iprintf>
  MX_FREERTOS_Init();
 800447e:	f7ff ff2b 	bl	80042d8 <MX_FREERTOS_Init>
  osKernelStart();
 8004482:	f7fe ffa1 	bl	80033c8 <osKernelStart>
 8004486:	e7fe      	b.n	8004486 <main+0x32>
 8004488:	08005ba6 	.word	0x08005ba6
 800448c:	08005bab 	.word	0x08005bab
 8004490:	08005bb9 	.word	0x08005bb9

08004494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004494:	4770      	bx	lr
	...

08004498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004498:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_MspInit+0x40>)
 800449c:	2200      	movs	r2, #0
 800449e:	9200      	str	r2, [sp, #0]
 80044a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80044a6:	6459      	str	r1, [r3, #68]	; 0x44
 80044a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044aa:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80044ae:	9100      	str	r1, [sp, #0]
 80044b0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	9201      	str	r2, [sp, #4]
 80044b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80044ba:	6419      	str	r1, [r3, #64]	; 0x40
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044c4:	210f      	movs	r1, #15
 80044c6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044cc:	f7fc fa54 	bl	8000978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d0:	b003      	add	sp, #12
 80044d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <NMI_Handler>:
 80044dc:	4770      	bx	lr

080044de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044de:	e7fe      	b.n	80044de <HardFault_Handler>

080044e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e0:	e7fe      	b.n	80044e0 <MemManage_Handler>

080044e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e2:	e7fe      	b.n	80044e2 <BusFault_Handler>

080044e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e4:	e7fe      	b.n	80044e4 <UsageFault_Handler>

080044e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044e6:	4770      	bx	lr

080044e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044ea:	f7fc f887 	bl	80005fc <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80044f2:	f7fe bf9e 	b.w	8003432 <osSystickHandler>
	...

080044f8 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <CAN1_SCE_IRQHandler+0x8>)
 80044fa:	f7fc b92d 	b.w	8000758 <HAL_CAN_IRQHandler>
 80044fe:	bf00      	nop
 8004500:	200041d8 	.word	0x200041d8

08004504 <CAN1_RX1_IRQHandler>:
 8004504:	f7ff bff8 	b.w	80044f8 <CAN1_SCE_IRQHandler>

08004508 <CAN1_RX0_IRQHandler>:
 8004508:	f7ff bff6 	b.w	80044f8 <CAN1_SCE_IRQHandler>

0800450c <CAN1_TX_IRQHandler>:
 800450c:	f7ff bff4 	b.w	80044f8 <CAN1_SCE_IRQHandler>

08004510 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <USART1_IRQHandler+0x8>)
 8004512:	f7fd bcbf 	b.w	8001e94 <HAL_UART_IRQHandler>
 8004516:	bf00      	nop
 8004518:	20004204 	.word	0x20004204

0800451c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800451c:	4801      	ldr	r0, [pc, #4]	; (8004524 <USART2_IRQHandler+0x8>)
 800451e:	f7fd bcb9 	b.w	8001e94 <HAL_UART_IRQHandler>
 8004522:	bf00      	nop
 8004524:	20004244 	.word	0x20004244

08004528 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <CAN2_SCE_IRQHandler+0x8>)
 800452a:	f7fc b915 	b.w	8000758 <HAL_CAN_IRQHandler>
 800452e:	bf00      	nop
 8004530:	200041b0 	.word	0x200041b0

08004534 <CAN2_RX1_IRQHandler>:
 8004534:	f7ff bff8 	b.w	8004528 <CAN2_SCE_IRQHandler>

08004538 <CAN2_RX0_IRQHandler>:
 8004538:	f7ff bff6 	b.w	8004528 <CAN2_SCE_IRQHandler>

0800453c <CAN2_TX_IRQHandler>:
 800453c:	f7ff bff4 	b.w	8004528 <CAN2_SCE_IRQHandler>

08004540 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <OTG_FS_IRQHandler+0x8>)
 8004542:	f7fc bc0f 	b.w	8000d64 <HAL_PCD_IRQHandler>
 8004546:	bf00      	nop
 8004548:	20005520 	.word	0x20005520

0800454c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	460e      	mov	r6, r1
 8004550:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	460c      	mov	r4, r1
 8004554:	1ba3      	subs	r3, r4, r6
 8004556:	429d      	cmp	r5, r3
 8004558:	dc01      	bgt.n	800455e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800455a:	4628      	mov	r0, r5
 800455c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800455e:	f3af 8000 	nop.w
 8004562:	f804 0b01 	strb.w	r0, [r4], #1
 8004566:	e7f5      	b.n	8004554 <_read+0x8>

08004568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456e:	460c      	mov	r4, r1
 8004570:	1ba3      	subs	r3, r4, r6
 8004572:	429d      	cmp	r5, r3
 8004574:	dc01      	bgt.n	800457a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004576:	4628      	mov	r0, r5
 8004578:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800457a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800457e:	f000 f8f7 	bl	8004770 <__io_putchar>
 8004582:	e7f5      	b.n	8004570 <_write+0x8>

08004584 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004584:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <_sbrk+0x2c>)
 8004588:	6819      	ldr	r1, [r3, #0]
{
 800458a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800458c:	b909      	cbnz	r1, 8004592 <_sbrk+0xe>
		heap_end = &end;
 800458e:	4909      	ldr	r1, [pc, #36]	; (80045b4 <_sbrk+0x30>)
 8004590:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004592:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004594:	4669      	mov	r1, sp
 8004596:	4402      	add	r2, r0
 8004598:	428a      	cmp	r2, r1
 800459a:	d906      	bls.n	80045aa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800459c:	f000 fb3c 	bl	8004c18 <__errno>
 80045a0:	230c      	movs	r3, #12
 80045a2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80045aa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80045ac:	bd08      	pop	{r3, pc}
 80045ae:	bf00      	nop
 80045b0:	200041a0 	.word	0x200041a0
 80045b4:	20005b2c 	.word	0x20005b2c

080045b8 <_close>:

int _close(int file)
{
	return -1;
}
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	4770      	bx	lr

080045be <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80045be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045c2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80045c4:	2000      	movs	r0, #0
 80045c6:	4770      	bx	lr

080045c8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80045c8:	2001      	movs	r0, #1
 80045ca:	4770      	bx	lr

080045cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80045cc:	2000      	movs	r0, #0
 80045ce:	4770      	bx	lr

080045d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045d0:	490f      	ldr	r1, [pc, #60]	; (8004610 <SystemInit+0x40>)
 80045d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80045d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <SystemInit+0x44>)
 80045e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80045e2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80045ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80045f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80045f8:	4a07      	ldr	r2, [pc, #28]	; (8004618 <SystemInit+0x48>)
 80045fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004602:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004604:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800460a:	608b      	str	r3, [r1, #8]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000ed00 	.word	0xe000ed00
 8004614:	40023800 	.word	0x40023800
 8004618:	24003010 	.word	0x24003010

0800461c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 800461c:	b508      	push	{r3, lr}

	huart1.Instance = USART1;
 800461e:	480b      	ldr	r0, [pc, #44]	; (800464c <MX_USART1_UART_Init+0x30>)
	huart1.Init.BaudRate = 115200;
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <MX_USART1_UART_Init+0x34>)
 8004622:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004626:	e880 4008 	stmia.w	r0, {r3, lr}
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 800462a:	220c      	movs	r2, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800462c:	2300      	movs	r3, #0
 800462e:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004630:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004632:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004634:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004636:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004638:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800463a:	f7fd fb5f 	bl	8001cfc <HAL_UART_Init>
 800463e:	b118      	cbz	r0, 8004648 <MX_USART1_UART_Init+0x2c>
		Error_Handler();
	}

}
 8004640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8004644:	f7ff bf26 	b.w	8004494 <Error_Handler>
 8004648:	bd08      	pop	{r3, pc}
 800464a:	bf00      	nop
 800464c:	20004204 	.word	0x20004204
 8004650:	40011000 	.word	0x40011000

08004654 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8004654:	b508      	push	{r3, lr}

	huart2.Instance = USART2;
 8004656:	480b      	ldr	r0, [pc, #44]	; (8004684 <MX_USART2_UART_Init+0x30>)
	huart2.Init.BaudRate = 115200;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <MX_USART2_UART_Init+0x34>)
 800465a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800465e:	e880 4008 	stmia.w	r0, {r3, lr}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004662:	220c      	movs	r2, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004664:	2300      	movs	r3, #0
 8004666:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004668:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800466a:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800466c:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800466e:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004670:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004672:	f7fd fb43 	bl	8001cfc <HAL_UART_Init>
 8004676:	b118      	cbz	r0, 8004680 <MX_USART2_UART_Init+0x2c>
		Error_Handler();
	}

}
 8004678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800467c:	f7ff bf0a 	b.w	8004494 <Error_Handler>
 8004680:	bd08      	pop	{r3, pc}
 8004682:	bf00      	nop
 8004684:	20004244 	.word	0x20004244
 8004688:	40004400 	.word	0x40004400

0800468c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 800468c:	b510      	push	{r4, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800468e:	2214      	movs	r2, #20
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 8004690:	b08a      	sub	sp, #40	; 0x28
 8004692:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004694:	2100      	movs	r1, #0
 8004696:	eb0d 0002 	add.w	r0, sp, r2
 800469a:	f000 faf7 	bl	8004c8c <memset>
	if (uartHandle->Instance == USART1) {
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <HAL_UART_MspInit+0xd4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d12e      	bne.n	8004704 <HAL_UART_MspInit+0x78>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE()
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_UART_MspInit+0xd8>)
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a8:	482f      	ldr	r0, [pc, #188]	; (8004768 <HAL_UART_MspInit+0xdc>)
		__HAL_RCC_USART1_CLK_ENABLE()
 80046aa:	2400      	movs	r4, #0
 80046ac:	9401      	str	r4, [sp, #4]
 80046ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b0:	f042 0210 	orr.w	r2, r2, #16
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	f002 0210 	and.w	r2, r2, #16
 80046bc:	9201      	str	r2, [sp, #4]
 80046be:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE()
 80046c0:	9402      	str	r4, [sp, #8]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	9302      	str	r3, [sp, #8]
 80046d2:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80046d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046d8:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046da:	2302      	movs	r3, #2
 80046dc:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046de:	2301      	movs	r3, #1
 80046e0:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	9308      	str	r3, [sp, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e6:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046e8:	2307      	movs	r3, #7
 80046ea:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ec:	f7fc f9ae 	bl	8000a4c <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046f0:	2025      	movs	r0, #37	; 0x25
 80046f2:	4622      	mov	r2, r4
 80046f4:	2105      	movs	r1, #5
 80046f6:	f7fc f93f 	bl	8000978 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046fa:	2025      	movs	r0, #37	; 0x25
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046fc:	f7fc f970 	bl	80009e0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}
}
 8004700:	b00a      	add	sp, #40	; 0x28
 8004702:	bd10      	pop	{r4, pc}
	} else if (uartHandle->Instance == USART2) {
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_UART_MspInit+0xe0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d1fa      	bne.n	8004700 <HAL_UART_MspInit+0x74>
		__HAL_RCC_USART2_CLK_ENABLE()
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_UART_MspInit+0xd8>)
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470c:	4816      	ldr	r0, [pc, #88]	; (8004768 <HAL_UART_MspInit+0xdc>)
		__HAL_RCC_USART2_CLK_ENABLE()
 800470e:	2400      	movs	r4, #0
 8004710:	9403      	str	r4, [sp, #12]
 8004712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004714:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
 800471a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004720:	9203      	str	r2, [sp, #12]
 8004722:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE()
 8004724:	9404      	str	r4, [sp, #16]
 8004726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	9304      	str	r3, [sp, #16]
 8004736:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8004738:	230c      	movs	r3, #12
 800473a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004740:	2301      	movs	r3, #1
 8004742:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004744:	2303      	movs	r3, #3
 8004746:	9308      	str	r3, [sp, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004748:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800474a:	2307      	movs	r3, #7
 800474c:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474e:	f7fc f97d 	bl	8000a4c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004752:	2026      	movs	r0, #38	; 0x26
 8004754:	4622      	mov	r2, r4
 8004756:	2105      	movs	r1, #5
 8004758:	f7fc f90e 	bl	8000978 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800475c:	2026      	movs	r0, #38	; 0x26
 800475e:	e7cd      	b.n	80046fc <HAL_UART_MspInit+0x70>
 8004760:	40011000 	.word	0x40011000
 8004764:	40023800 	.word	0x40023800
 8004768:	40020000 	.word	0x40020000
 800476c:	40004400 	.word	0x40004400

08004770 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 8004770:	b507      	push	{r0, r1, r2, lr}
 8004772:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
PUTCHAR_PROTOTYPE {
 8004778:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800477c:	2201      	movs	r2, #1
 800477e:	4803      	ldr	r0, [pc, #12]	; (800478c <__io_putchar+0x1c>)
 8004780:	f7fd faea 	bl	8001d58 <HAL_UART_Transmit>

	return ch;
}
 8004784:	9801      	ldr	r0, [sp, #4]
 8004786:	b003      	add	sp, #12
 8004788:	f85d fb04 	ldr.w	pc, [sp], #4
 800478c:	20004244 	.word	0x20004244

08004790 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004792:	2200      	movs	r2, #0
 8004794:	490e      	ldr	r1, [pc, #56]	; (80047d0 <MX_USB_DEVICE_Init+0x40>)
 8004796:	480f      	ldr	r0, [pc, #60]	; (80047d4 <MX_USB_DEVICE_Init+0x44>)
 8004798:	f7fe fa7a 	bl	8002c90 <USBD_Init>
 800479c:	b108      	cbz	r0, 80047a2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800479e:	f7ff fe79 	bl	8004494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80047a2:	490d      	ldr	r1, [pc, #52]	; (80047d8 <MX_USB_DEVICE_Init+0x48>)
 80047a4:	480b      	ldr	r0, [pc, #44]	; (80047d4 <MX_USB_DEVICE_Init+0x44>)
 80047a6:	f7fe fa88 	bl	8002cba <USBD_RegisterClass>
 80047aa:	b108      	cbz	r0, 80047b0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80047ac:	f7ff fe72 	bl	8004494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80047b0:	490a      	ldr	r1, [pc, #40]	; (80047dc <MX_USB_DEVICE_Init+0x4c>)
 80047b2:	4808      	ldr	r0, [pc, #32]	; (80047d4 <MX_USB_DEVICE_Init+0x44>)
 80047b4:	f7fe fa44 	bl	8002c40 <USBD_CDC_RegisterInterface>
 80047b8:	b108      	cbz	r0, 80047be <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80047ba:	f7ff fe6b 	bl	8004494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <MX_USB_DEVICE_Init+0x44>)
 80047c0:	f7fe fa82 	bl	8002cc8 <USBD_Start>
 80047c4:	b118      	cbz	r0, 80047ce <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80047c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80047ca:	f7ff be63 	b.w	8004494 <Error_Handler>
 80047ce:	bd08      	pop	{r3, pc}
 80047d0:	20000130 	.word	0x20000130
 80047d4:	20004284 	.word	0x20004284
 80047d8:	20000008 	.word	0x20000008
 80047dc:	20000120 	.word	0x20000120

080047e0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	4770      	bx	lr

080047e4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80047e4:	2000      	movs	r0, #0
 80047e6:	4770      	bx	lr

080047e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80047e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80047ea:	4c05      	ldr	r4, [pc, #20]	; (8004800 <CDC_Receive_FS+0x18>)
 80047ec:	4601      	mov	r1, r0
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7fe fa35 	bl	8002c5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7fe fa38 	bl	8002c6a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80047fa:	2000      	movs	r0, #0
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	20004284 	.word	0x20004284

08004804 <CDC_Init_FS>:
{
 8004804:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004806:	4c06      	ldr	r4, [pc, #24]	; (8004820 <CDC_Init_FS+0x1c>)
 8004808:	4906      	ldr	r1, [pc, #24]	; (8004824 <CDC_Init_FS+0x20>)
 800480a:	2200      	movs	r2, #0
 800480c:	4620      	mov	r0, r4
 800480e:	f7fe fa1e 	bl	8002c4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004812:	4905      	ldr	r1, [pc, #20]	; (8004828 <CDC_Init_FS+0x24>)
 8004814:	4620      	mov	r0, r4
 8004816:	f7fe fa22 	bl	8002c5e <USBD_CDC_SetRxBuffer>
}
 800481a:	2000      	movs	r0, #0
 800481c:	bd10      	pop	{r4, pc}
 800481e:	bf00      	nop
 8004820:	20004284 	.word	0x20004284
 8004824:	20004d20 	.word	0x20004d20
 8004828:	20004520 	.word	0x20004520

0800482c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800482c:	b530      	push	{r4, r5, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004832:	2214      	movs	r2, #20
 8004834:	2100      	movs	r1, #0
 8004836:	a803      	add	r0, sp, #12
 8004838:	f000 fa28 	bl	8004c8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004842:	d12e      	bne.n	80048a2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004844:	4c18      	ldr	r4, [pc, #96]	; (80048a8 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004846:	4819      	ldr	r0, [pc, #100]	; (80048ac <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004848:	2500      	movs	r5, #0
 800484a:	9501      	str	r5, [sp, #4]
 800484c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6323      	str	r3, [r4, #48]	; 0x30
 8004854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800485e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004862:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2302      	movs	r3, #2
 8004866:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004868:	2303      	movs	r3, #3
 800486a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800486e:	230a      	movs	r3, #10
 8004870:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f7fc f8eb 	bl	8000a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	6363      	str	r3, [r4, #52]	; 0x34
 800487e:	9502      	str	r5, [sp, #8]
 8004880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004886:	6463      	str	r3, [r4, #68]	; 0x44
 8004888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004890:	2043      	movs	r0, #67	; 0x43
 8004892:	462a      	mov	r2, r5
 8004894:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004896:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004898:	f7fc f86e 	bl	8000978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800489c:	2043      	movs	r0, #67	; 0x43
 800489e:	f7fc f89f 	bl	80009e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80048a2:	b009      	add	sp, #36	; 0x24
 80048a4:	bd30      	pop	{r4, r5, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40020000 	.word	0x40020000

080048b0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048b0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80048b4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80048b8:	f7fe ba1d 	b.w	8002cf6 <USBD_LL_SetupStage>

080048bc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80048bc:	231c      	movs	r3, #28
 80048be:	fb03 0301 	mla	r3, r3, r1, r0
 80048c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80048c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80048ca:	f7fe ba41 	b.w	8002d50 <USBD_LL_DataOutStage>

080048ce <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80048ce:	231c      	movs	r3, #28
 80048d0:	fb03 0301 	mla	r3, r3, r1, r0
 80048d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80048d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048da:	f7fe ba73 	b.w	8002dc4 <USBD_LL_DataInStage>

080048de <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80048de:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80048e2:	f7fe bb04 	b.w	8002eee <USBD_LL_SOF>

080048e6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80048e6:	68c1      	ldr	r1, [r0, #12]
{ 
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80048ec:	b121      	cbz	r1, 80048f8 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80048ee:	2902      	cmp	r1, #2
 80048f0:	d001      	beq.n	80048f6 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80048f2:	f7ff fdcf 	bl	8004494 <Error_Handler>
    speed = USBD_SPEED_FULL;
 80048f6:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80048f8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80048fc:	f7fe fae5 	bl	8002eca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004900:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8004904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004908:	f7fe bab8 	b.w	8002e7c <USBD_LL_Reset>

0800490c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800490c:	b510      	push	{r4, lr}
 800490e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004910:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004914:	f7fe fadc 	bl	8002ed0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004926:	6a23      	ldr	r3, [r4, #32]
 8004928:	b123      	cbz	r3, 8004934 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800492a:	4a03      	ldr	r2, [pc, #12]	; (8004938 <HAL_PCD_SuspendCallback+0x2c>)
 800492c:	6913      	ldr	r3, [r2, #16]
 800492e:	f043 0306 	orr.w	r3, r3, #6
 8004932:	6113      	str	r3, [r2, #16]
 8004934:	bd10      	pop	{r4, pc}
 8004936:	bf00      	nop
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800493c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004940:	f7fe bacf 	b.w	8002ee2 <USBD_LL_Resume>

08004944 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004944:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004948:	f7fe badf 	b.w	8002f0a <USBD_LL_IsoOUTIncomplete>

0800494c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800494c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004950:	f7fe bad9 	b.w	8002f06 <USBD_LL_IsoINIncomplete>

08004954 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004954:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004958:	f7fe bad9 	b.w	8002f0e <USBD_LL_DevConnected>

0800495c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800495c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004960:	f7fe bad7 	b.w	8002f12 <USBD_LL_DevDisconnected>

08004964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004964:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004966:	7802      	ldrb	r2, [r0, #0]
 8004968:	bb32      	cbnz	r2, 80049b8 <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800496c:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 800496e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8004972:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004976:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800497a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800497e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004980:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004982:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004984:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004986:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004988:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800498a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004992:	f7fc f940 	bl	8000c16 <HAL_PCD_Init>
 8004996:	b108      	cbz	r0, 800499c <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 8004998:	f7ff fd7c 	bl	8004494 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800499c:	2180      	movs	r1, #128	; 0x80
 800499e:	4807      	ldr	r0, [pc, #28]	; (80049bc <USBD_LL_Init+0x58>)
 80049a0:	f7fc fde6 	bl	8001570 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80049a4:	2240      	movs	r2, #64	; 0x40
 80049a6:	2100      	movs	r1, #0
 80049a8:	4804      	ldr	r0, [pc, #16]	; (80049bc <USBD_LL_Init+0x58>)
 80049aa:	f7fc fdc0 	bl	800152e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	2101      	movs	r1, #1
 80049b2:	4802      	ldr	r0, [pc, #8]	; (80049bc <USBD_LL_Init+0x58>)
 80049b4:	f7fc fdbb 	bl	800152e <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80049b8:	2000      	movs	r0, #0
 80049ba:	bd08      	pop	{r3, pc}
 80049bc:	20005520 	.word	0x20005520

080049c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80049c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80049c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80049c6:	f7fc f9ad 	bl	8000d24 <HAL_PCD_Start>
 80049ca:	2803      	cmp	r0, #3
 80049cc:	bf9a      	itte	ls
 80049ce:	4b02      	ldrls	r3, [pc, #8]	; (80049d8 <USBD_LL_Start+0x18>)
 80049d0:	5c18      	ldrbls	r0, [r3, r0]
 80049d2:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 80049d4:	bd08      	pop	{r3, pc}
 80049d6:	bf00      	nop
 80049d8:	08005bdc 	.word	0x08005bdc

080049dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80049dc:	b510      	push	{r4, lr}
 80049de:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80049e0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80049e4:	4613      	mov	r3, r2
 80049e6:	4622      	mov	r2, r4
 80049e8:	f7fc fc8a 	bl	8001300 <HAL_PCD_EP_Open>
 80049ec:	2803      	cmp	r0, #3
 80049ee:	bf9a      	itte	ls
 80049f0:	4b01      	ldrls	r3, [pc, #4]	; (80049f8 <USBD_LL_OpenEP+0x1c>)
 80049f2:	5c18      	ldrbls	r0, [r3, r0]
 80049f4:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80049f6:	bd10      	pop	{r4, pc}
 80049f8:	08005bdc 	.word	0x08005bdc

080049fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80049fe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004a02:	f7fc fcb2 	bl	800136a <HAL_PCD_EP_Close>
 8004a06:	2803      	cmp	r0, #3
 8004a08:	bf9a      	itte	ls
 8004a0a:	4b02      	ldrls	r3, [pc, #8]	; (8004a14 <USBD_LL_CloseEP+0x18>)
 8004a0c:	5c18      	ldrbls	r0, [r3, r0]
 8004a0e:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8004a10:	bd08      	pop	{r3, pc}
 8004a12:	bf00      	nop
 8004a14:	08005bdc 	.word	0x08005bdc

08004a18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a18:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004a1a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004a1e:	f7fc fd1a 	bl	8001456 <HAL_PCD_EP_SetStall>
 8004a22:	2803      	cmp	r0, #3
 8004a24:	bf9a      	itte	ls
 8004a26:	4b02      	ldrls	r3, [pc, #8]	; (8004a30 <USBD_LL_StallEP+0x18>)
 8004a28:	5c18      	ldrbls	r0, [r3, r0]
 8004a2a:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8004a2c:	bd08      	pop	{r3, pc}
 8004a2e:	bf00      	nop
 8004a30:	08005bdc 	.word	0x08005bdc

08004a34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004a36:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004a3a:	f7fc fd46 	bl	80014ca <HAL_PCD_EP_ClrStall>
 8004a3e:	2803      	cmp	r0, #3
 8004a40:	bf9a      	itte	ls
 8004a42:	4b02      	ldrls	r3, [pc, #8]	; (8004a4c <USBD_LL_ClearStallEP+0x18>)
 8004a44:	5c18      	ldrbls	r0, [r3, r0]
 8004a46:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8004a48:	bd08      	pop	{r3, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08005bdc 	.word	0x08005bdc

08004a50 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004a50:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a54:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004a58:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a5c:	bf1b      	ittet	ne
 8004a5e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004a62:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a66:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a6a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a6e:	bf08      	it	eq
 8004a70:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8004a74:	4770      	bx	lr
	...

08004a78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004a78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a7a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004a7e:	f7fc fc2b 	bl	80012d8 <HAL_PCD_SetAddress>
 8004a82:	2803      	cmp	r0, #3
 8004a84:	bf9a      	itte	ls
 8004a86:	4b02      	ldrls	r3, [pc, #8]	; (8004a90 <USBD_LL_SetUSBAddress+0x18>)
 8004a88:	5c18      	ldrbls	r0, [r3, r0]
 8004a8a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop
 8004a90:	08005bdc 	.word	0x08005bdc

08004a94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a96:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004a9a:	f7fc fcbc 	bl	8001416 <HAL_PCD_EP_Transmit>
 8004a9e:	2803      	cmp	r0, #3
 8004aa0:	bf9a      	itte	ls
 8004aa2:	4b02      	ldrls	r3, [pc, #8]	; (8004aac <USBD_LL_Transmit+0x18>)
 8004aa4:	5c18      	ldrbls	r0, [r3, r0]
 8004aa6:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8004aa8:	bd08      	pop	{r3, pc}
 8004aaa:	bf00      	nop
 8004aac:	08005bdc 	.word	0x08005bdc

08004ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004ab0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ab2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004ab6:	f7fc fc82 	bl	80013be <HAL_PCD_EP_Receive>
 8004aba:	2803      	cmp	r0, #3
 8004abc:	bf9a      	itte	ls
 8004abe:	4b02      	ldrls	r3, [pc, #8]	; (8004ac8 <USBD_LL_PrepareReceive+0x18>)
 8004ac0:	5c18      	ldrbls	r0, [r3, r0]
 8004ac2:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8004ac4:	bd08      	pop	{r3, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08005bdc 	.word	0x08005bdc

08004acc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004acc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004ad0:	f7fc bc99 	b.w	8001406 <HAL_PCD_EP_GetRxCount>

08004ad4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004ad4:	2312      	movs	r3, #18
 8004ad6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004ad8:	4800      	ldr	r0, [pc, #0]	; (8004adc <USBD_FS_DeviceDescriptor+0x8>)
 8004ada:	4770      	bx	lr
 8004adc:	2000014c 	.word	0x2000014c

08004ae0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004ae4:	4800      	ldr	r0, [pc, #0]	; (8004ae8 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004ae6:	4770      	bx	lr
 8004ae8:	20000160 	.word	0x20000160

08004aec <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004aec:	2300      	movs	r3, #0
{
 8004aee:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004af0:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8004af2:	b2dc      	uxtb	r4, r3
 8004af4:	42a2      	cmp	r2, r4
 8004af6:	d800      	bhi.n	8004afa <IntToUnicode+0xe>
  }
}
 8004af8:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8004afa:	0f04      	lsrs	r4, r0, #28
 8004afc:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004afe:	bf94      	ite	ls
 8004b00:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004b02:	3437      	addhi	r4, #55	; 0x37
 8004b04:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004b08:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8004b0c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004b0e:	7065      	strb	r5, [r4, #1]
 8004b10:	3301      	adds	r3, #1
 8004b12:	e7ee      	b.n	8004af2 <IntToUnicode+0x6>

08004b14 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004b14:	231a      	movs	r3, #26
{
 8004b16:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004b18:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <USBD_FS_SerialStrDescriptor+0x2c>)
 8004b1c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004b1e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004b20:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004b22:	18c0      	adds	r0, r0, r3
 8004b24:	d00a      	beq.n	8004b3c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004b28:	4907      	ldr	r1, [pc, #28]	; (8004b48 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004b2a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	f7ff ffdd 	bl	8004aec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004b32:	2204      	movs	r2, #4
 8004b34:	4905      	ldr	r1, [pc, #20]	; (8004b4c <USBD_FS_SerialStrDescriptor+0x38>)
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff ffd8 	bl	8004aec <IntToUnicode>
}
 8004b3c:	4804      	ldr	r0, [pc, #16]	; (8004b50 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004b3e:	bd10      	pop	{r4, pc}
 8004b40:	1fff7a10 	.word	0x1fff7a10
 8004b44:	1fff7a14 	.word	0x1fff7a14
 8004b48:	20000166 	.word	0x20000166
 8004b4c:	20000176 	.word	0x20000176
 8004b50:	20000164 	.word	0x20000164

08004b54 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004b54:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b56:	4c04      	ldr	r4, [pc, #16]	; (8004b68 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004b58:	4804      	ldr	r0, [pc, #16]	; (8004b6c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7fe fbd5 	bl	800330c <USBD_GetString>
}
 8004b62:	4620      	mov	r0, r4
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop
 8004b68:	20005928 	.word	0x20005928
 8004b6c:	08005bf9 	.word	0x08005bf9

08004b70 <USBD_FS_ProductStrDescriptor>:
{
 8004b70:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b72:	4c04      	ldr	r4, [pc, #16]	; (8004b84 <USBD_FS_ProductStrDescriptor+0x14>)
 8004b74:	4804      	ldr	r0, [pc, #16]	; (8004b88 <USBD_FS_ProductStrDescriptor+0x18>)
 8004b76:	460a      	mov	r2, r1
 8004b78:	4621      	mov	r1, r4
 8004b7a:	f7fe fbc7 	bl	800330c <USBD_GetString>
}
 8004b7e:	4620      	mov	r0, r4
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	bf00      	nop
 8004b84:	20005928 	.word	0x20005928
 8004b88:	08005c0c 	.word	0x08005c0c

08004b8c <USBD_FS_ConfigStrDescriptor>:
{
 8004b8c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b8e:	4c04      	ldr	r4, [pc, #16]	; (8004ba0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004b90:	4804      	ldr	r0, [pc, #16]	; (8004ba4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004b92:	460a      	mov	r2, r1
 8004b94:	4621      	mov	r1, r4
 8004b96:	f7fe fbb9 	bl	800330c <USBD_GetString>
}
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20005928 	.word	0x20005928
 8004ba4:	08005be0 	.word	0x08005be0

08004ba8 <USBD_FS_InterfaceStrDescriptor>:
{
 8004ba8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004baa:	4c04      	ldr	r4, [pc, #16]	; (8004bbc <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004bac:	4804      	ldr	r0, [pc, #16]	; (8004bc0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004bae:	460a      	mov	r2, r1
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	f7fe fbab 	bl	800330c <USBD_GetString>
}
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	bf00      	nop
 8004bbc:	20005928 	.word	0x20005928
 8004bc0:	08005beb 	.word	0x08005beb

08004bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bca:	e003      	b.n	8004bd4 <LoopCopyDataInit>

08004bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bd2:	3104      	adds	r1, #4

08004bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bd4:	480b      	ldr	r0, [pc, #44]	; (8004c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bdc:	d3f6      	bcc.n	8004bcc <CopyDataInit>
  ldr  r2, =_sbss
 8004bde:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004be0:	e002      	b.n	8004be8 <LoopFillZerobss>

08004be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004be4:	f842 3b04 	str.w	r3, [r2], #4

08004be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bec:	d3f9      	bcc.n	8004be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bee:	f7ff fcef 	bl	80045d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bf2:	f000 f817 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bf6:	f7ff fc2d 	bl	8004454 <main>
  bx  lr    
 8004bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c00:	08005ccc 	.word	0x08005ccc
  ldr  r0, =_sdata
 8004c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c08:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8004c0c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8004c10:	20005b2c 	.word	0x20005b2c

08004c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c14:	e7fe      	b.n	8004c14 <ADC_IRQHandler>
	...

08004c18 <__errno>:
 8004c18:	4b01      	ldr	r3, [pc, #4]	; (8004c20 <__errno+0x8>)
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000180 	.word	0x20000180

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4e0d      	ldr	r6, [pc, #52]	; (8004c5c <__libc_init_array+0x38>)
 8004c28:	4c0d      	ldr	r4, [pc, #52]	; (8004c60 <__libc_init_array+0x3c>)
 8004c2a:	1ba4      	subs	r4, r4, r6
 8004c2c:	10a4      	asrs	r4, r4, #2
 8004c2e:	2500      	movs	r5, #0
 8004c30:	42a5      	cmp	r5, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	4e0b      	ldr	r6, [pc, #44]	; (8004c64 <__libc_init_array+0x40>)
 8004c36:	4c0c      	ldr	r4, [pc, #48]	; (8004c68 <__libc_init_array+0x44>)
 8004c38:	f000 ff8c 	bl	8005b54 <_init>
 8004c3c:	1ba4      	subs	r4, r4, r6
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	2500      	movs	r5, #0
 8004c42:	42a5      	cmp	r5, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c4c:	4798      	blx	r3
 8004c4e:	3501      	adds	r5, #1
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c56:	4798      	blx	r3
 8004c58:	3501      	adds	r5, #1
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	08005cc4 	.word	0x08005cc4
 8004c60:	08005cc4 	.word	0x08005cc4
 8004c64:	08005cc4 	.word	0x08005cc4
 8004c68:	08005cc8 	.word	0x08005cc8

08004c6c <malloc>:
 8004c6c:	4b02      	ldr	r3, [pc, #8]	; (8004c78 <malloc+0xc>)
 8004c6e:	4601      	mov	r1, r0
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f000 b861 	b.w	8004d38 <_malloc_r>
 8004c76:	bf00      	nop
 8004c78:	20000180 	.word	0x20000180

08004c7c <free>:
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <free+0xc>)
 8004c7e:	4601      	mov	r1, r0
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	f000 b80b 	b.w	8004c9c <_free_r>
 8004c86:	bf00      	nop
 8004c88:	20000180 	.word	0x20000180

08004c8c <memset>:
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <memset+0xa>
 8004c94:	4770      	bx	lr
 8004c96:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9a:	e7f9      	b.n	8004c90 <memset+0x4>

08004c9c <_free_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	d045      	beq.n	8004d30 <_free_r+0x94>
 8004ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca8:	1f0c      	subs	r4, r1, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfb8      	it	lt
 8004cae:	18e4      	addlt	r4, r4, r3
 8004cb0:	f000 fbcc 	bl	800544c <__malloc_lock>
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <_free_r+0x98>)
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	4610      	mov	r0, r2
 8004cba:	b933      	cbnz	r3, 8004cca <_free_r+0x2e>
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	6014      	str	r4, [r2, #0]
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc6:	f000 bbc2 	b.w	800544e <__malloc_unlock>
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	d90c      	bls.n	8004ce8 <_free_r+0x4c>
 8004cce:	6821      	ldr	r1, [r4, #0]
 8004cd0:	1862      	adds	r2, r4, r1
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bf04      	itt	eq
 8004cd6:	681a      	ldreq	r2, [r3, #0]
 8004cd8:	685b      	ldreq	r3, [r3, #4]
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	bf04      	itt	eq
 8004cde:	1852      	addeq	r2, r2, r1
 8004ce0:	6022      	streq	r2, [r4, #0]
 8004ce2:	6004      	str	r4, [r0, #0]
 8004ce4:	e7ec      	b.n	8004cc0 <_free_r+0x24>
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	b10a      	cbz	r2, 8004cf0 <_free_r+0x54>
 8004cec:	42a2      	cmp	r2, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x4a>
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	1858      	adds	r0, r3, r1
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x74>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	1858      	adds	r0, r3, r1
 8004cfe:	4282      	cmp	r2, r0
 8004d00:	6019      	str	r1, [r3, #0]
 8004d02:	d1dd      	bne.n	8004cc0 <_free_r+0x24>
 8004d04:	6810      	ldr	r0, [r2, #0]
 8004d06:	6852      	ldr	r2, [r2, #4]
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	e7d7      	b.n	8004cc0 <_free_r+0x24>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x7c>
 8004d12:	230c      	movs	r3, #12
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	e7d3      	b.n	8004cc0 <_free_r+0x24>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6811      	ldreq	r1, [r2, #0]
 8004d22:	6852      	ldreq	r2, [r2, #4]
 8004d24:	6062      	str	r2, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1809      	addeq	r1, r1, r0
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	605c      	str	r4, [r3, #4]
 8004d2e:	e7c7      	b.n	8004cc0 <_free_r+0x24>
 8004d30:	bd38      	pop	{r3, r4, r5, pc}
 8004d32:	bf00      	nop
 8004d34:	200041a4 	.word	0x200041a4

08004d38 <_malloc_r>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	1ccd      	adds	r5, r1, #3
 8004d3c:	f025 0503 	bic.w	r5, r5, #3
 8004d40:	3508      	adds	r5, #8
 8004d42:	2d0c      	cmp	r5, #12
 8004d44:	bf38      	it	cc
 8004d46:	250c      	movcc	r5, #12
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	db01      	blt.n	8004d52 <_malloc_r+0x1a>
 8004d4e:	42a9      	cmp	r1, r5
 8004d50:	d903      	bls.n	8004d5a <_malloc_r+0x22>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6033      	str	r3, [r6, #0]
 8004d56:	2000      	movs	r0, #0
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	f000 fb77 	bl	800544c <__malloc_lock>
 8004d5e:	4a23      	ldr	r2, [pc, #140]	; (8004dec <_malloc_r+0xb4>)
 8004d60:	6814      	ldr	r4, [r2, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	b991      	cbnz	r1, 8004d8c <_malloc_r+0x54>
 8004d66:	4c22      	ldr	r4, [pc, #136]	; (8004df0 <_malloc_r+0xb8>)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	b91b      	cbnz	r3, 8004d74 <_malloc_r+0x3c>
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f8bd 	bl	8004eec <_sbrk_r>
 8004d72:	6020      	str	r0, [r4, #0]
 8004d74:	4629      	mov	r1, r5
 8004d76:	4630      	mov	r0, r6
 8004d78:	f000 f8b8 	bl	8004eec <_sbrk_r>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d126      	bne.n	8004dce <_malloc_r+0x96>
 8004d80:	230c      	movs	r3, #12
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fb62 	bl	800544e <__malloc_unlock>
 8004d8a:	e7e4      	b.n	8004d56 <_malloc_r+0x1e>
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	1b5b      	subs	r3, r3, r5
 8004d90:	d41a      	bmi.n	8004dc8 <_malloc_r+0x90>
 8004d92:	2b0b      	cmp	r3, #11
 8004d94:	d90f      	bls.n	8004db6 <_malloc_r+0x7e>
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	50cd      	str	r5, [r1, r3]
 8004d9a:	18cc      	adds	r4, r1, r3
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 fb56 	bl	800544e <__malloc_unlock>
 8004da2:	f104 000b 	add.w	r0, r4, #11
 8004da6:	1d23      	adds	r3, r4, #4
 8004da8:	f020 0007 	bic.w	r0, r0, #7
 8004dac:	1ac3      	subs	r3, r0, r3
 8004dae:	d01b      	beq.n	8004de8 <_malloc_r+0xb0>
 8004db0:	425a      	negs	r2, r3
 8004db2:	50e2      	str	r2, [r4, r3]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	428c      	cmp	r4, r1
 8004db8:	bf0d      	iteet	eq
 8004dba:	6863      	ldreq	r3, [r4, #4]
 8004dbc:	684b      	ldrne	r3, [r1, #4]
 8004dbe:	6063      	strne	r3, [r4, #4]
 8004dc0:	6013      	streq	r3, [r2, #0]
 8004dc2:	bf18      	it	ne
 8004dc4:	460c      	movne	r4, r1
 8004dc6:	e7e9      	b.n	8004d9c <_malloc_r+0x64>
 8004dc8:	460c      	mov	r4, r1
 8004dca:	6849      	ldr	r1, [r1, #4]
 8004dcc:	e7ca      	b.n	8004d64 <_malloc_r+0x2c>
 8004dce:	1cc4      	adds	r4, r0, #3
 8004dd0:	f024 0403 	bic.w	r4, r4, #3
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d005      	beq.n	8004de4 <_malloc_r+0xac>
 8004dd8:	1a21      	subs	r1, r4, r0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 f886 	bl	8004eec <_sbrk_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d0cd      	beq.n	8004d80 <_malloc_r+0x48>
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	e7d9      	b.n	8004d9c <_malloc_r+0x64>
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	bf00      	nop
 8004dec:	200041a4 	.word	0x200041a4
 8004df0:	200041a8 	.word	0x200041a8

08004df4 <iprintf>:
 8004df4:	b40f      	push	{r0, r1, r2, r3}
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <iprintf+0x2c>)
 8004df8:	b513      	push	{r0, r1, r4, lr}
 8004dfa:	681c      	ldr	r4, [r3, #0]
 8004dfc:	b124      	cbz	r4, 8004e08 <iprintf+0x14>
 8004dfe:	69a3      	ldr	r3, [r4, #24]
 8004e00:	b913      	cbnz	r3, 8004e08 <iprintf+0x14>
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fa34 	bl	8005270 <__sinit>
 8004e08:	ab05      	add	r3, sp, #20
 8004e0a:	9a04      	ldr	r2, [sp, #16]
 8004e0c:	68a1      	ldr	r1, [r4, #8]
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 fb47 	bl	80054a4 <_vfiprintf_r>
 8004e16:	b002      	add	sp, #8
 8004e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr
 8004e20:	20000180 	.word	0x20000180

08004e24 <_puts_r>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	460e      	mov	r6, r1
 8004e28:	4605      	mov	r5, r0
 8004e2a:	b118      	cbz	r0, 8004e34 <_puts_r+0x10>
 8004e2c:	6983      	ldr	r3, [r0, #24]
 8004e2e:	b90b      	cbnz	r3, 8004e34 <_puts_r+0x10>
 8004e30:	f000 fa1e 	bl	8005270 <__sinit>
 8004e34:	69ab      	ldr	r3, [r5, #24]
 8004e36:	68ac      	ldr	r4, [r5, #8]
 8004e38:	b913      	cbnz	r3, 8004e40 <_puts_r+0x1c>
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fa18 	bl	8005270 <__sinit>
 8004e40:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <_puts_r+0xac>)
 8004e42:	429c      	cmp	r4, r3
 8004e44:	d117      	bne.n	8004e76 <_puts_r+0x52>
 8004e46:	686c      	ldr	r4, [r5, #4]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	071b      	lsls	r3, r3, #28
 8004e4c:	d51d      	bpl.n	8004e8a <_puts_r+0x66>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	b1db      	cbz	r3, 8004e8a <_puts_r+0x66>
 8004e52:	3e01      	subs	r6, #1
 8004e54:	68a3      	ldr	r3, [r4, #8]
 8004e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	b9e9      	cbnz	r1, 8004e9c <_puts_r+0x78>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da2e      	bge.n	8004ec2 <_puts_r+0x9e>
 8004e64:	4622      	mov	r2, r4
 8004e66:	210a      	movs	r1, #10
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f84f 	bl	8004f0c <__swbuf_r>
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d011      	beq.n	8004e96 <_puts_r+0x72>
 8004e72:	200a      	movs	r0, #10
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <_puts_r+0xb0>)
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	d101      	bne.n	8004e80 <_puts_r+0x5c>
 8004e7c:	68ac      	ldr	r4, [r5, #8]
 8004e7e:	e7e3      	b.n	8004e48 <_puts_r+0x24>
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <_puts_r+0xb4>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	bf08      	it	eq
 8004e86:	68ec      	ldreq	r4, [r5, #12]
 8004e88:	e7de      	b.n	8004e48 <_puts_r+0x24>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 f88f 	bl	8004fb0 <__swsetup_r>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0dd      	beq.n	8004e52 <_puts_r+0x2e>
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da04      	bge.n	8004eaa <_puts_r+0x86>
 8004ea0:	69a2      	ldr	r2, [r4, #24]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	db06      	blt.n	8004eb4 <_puts_r+0x90>
 8004ea6:	290a      	cmp	r1, #10
 8004ea8:	d004      	beq.n	8004eb4 <_puts_r+0x90>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	6022      	str	r2, [r4, #0]
 8004eb0:	7019      	strb	r1, [r3, #0]
 8004eb2:	e7cf      	b.n	8004e54 <_puts_r+0x30>
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 f828 	bl	8004f0c <__swbuf_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1c9      	bne.n	8004e54 <_puts_r+0x30>
 8004ec0:	e7e9      	b.n	8004e96 <_puts_r+0x72>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	200a      	movs	r0, #10
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	6022      	str	r2, [r4, #0]
 8004eca:	7018      	strb	r0, [r3, #0]
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	bf00      	nop
 8004ed0:	08005c48 	.word	0x08005c48
 8004ed4:	08005c68 	.word	0x08005c68
 8004ed8:	08005c28 	.word	0x08005c28

08004edc <puts>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <puts+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f7ff bf9f 	b.w	8004e24 <_puts_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000180 	.word	0x20000180

08004eec <_sbrk_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4c06      	ldr	r4, [pc, #24]	; (8004f08 <_sbrk_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	f7ff fb44 	bl	8004584 <_sbrk>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_sbrk_r+0x1a>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_sbrk_r+0x1a>
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20005b28 	.word	0x20005b28

08004f0c <__swbuf_r>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	460e      	mov	r6, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	4605      	mov	r5, r0
 8004f14:	b118      	cbz	r0, 8004f1e <__swbuf_r+0x12>
 8004f16:	6983      	ldr	r3, [r0, #24]
 8004f18:	b90b      	cbnz	r3, 8004f1e <__swbuf_r+0x12>
 8004f1a:	f000 f9a9 	bl	8005270 <__sinit>
 8004f1e:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <__swbuf_r+0x98>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	d12a      	bne.n	8004f7a <__swbuf_r+0x6e>
 8004f24:	686c      	ldr	r4, [r5, #4]
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	071a      	lsls	r2, r3, #28
 8004f2e:	d52e      	bpl.n	8004f8e <__swbuf_r+0x82>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b363      	cbz	r3, 8004f8e <__swbuf_r+0x82>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	6820      	ldr	r0, [r4, #0]
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	6963      	ldr	r3, [r4, #20]
 8004f3c:	b2f6      	uxtb	r6, r6
 8004f3e:	4298      	cmp	r0, r3
 8004f40:	4637      	mov	r7, r6
 8004f42:	db04      	blt.n	8004f4e <__swbuf_r+0x42>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f928 	bl	800519c <_fflush_r>
 8004f4c:	bb28      	cbnz	r0, 8004f9a <__swbuf_r+0x8e>
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	701e      	strb	r6, [r3, #0]
 8004f5c:	6963      	ldr	r3, [r4, #20]
 8004f5e:	3001      	adds	r0, #1
 8004f60:	4298      	cmp	r0, r3
 8004f62:	d004      	beq.n	8004f6e <__swbuf_r+0x62>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d519      	bpl.n	8004f9e <__swbuf_r+0x92>
 8004f6a:	2e0a      	cmp	r6, #10
 8004f6c:	d117      	bne.n	8004f9e <__swbuf_r+0x92>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 f913 	bl	800519c <_fflush_r>
 8004f76:	b190      	cbz	r0, 8004f9e <__swbuf_r+0x92>
 8004f78:	e00f      	b.n	8004f9a <__swbuf_r+0x8e>
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <__swbuf_r+0x9c>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d101      	bne.n	8004f84 <__swbuf_r+0x78>
 8004f80:	68ac      	ldr	r4, [r5, #8]
 8004f82:	e7d0      	b.n	8004f26 <__swbuf_r+0x1a>
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <__swbuf_r+0xa0>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	bf08      	it	eq
 8004f8a:	68ec      	ldreq	r4, [r5, #12]
 8004f8c:	e7cb      	b.n	8004f26 <__swbuf_r+0x1a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f80d 	bl	8004fb0 <__swsetup_r>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0cc      	beq.n	8004f34 <__swbuf_r+0x28>
 8004f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08005c48 	.word	0x08005c48
 8004fa8:	08005c68 	.word	0x08005c68
 8004fac:	08005c28 	.word	0x08005c28

08004fb0 <__swsetup_r>:
 8004fb0:	4b32      	ldr	r3, [pc, #200]	; (800507c <__swsetup_r+0xcc>)
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	681d      	ldr	r5, [r3, #0]
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	b125      	cbz	r5, 8004fc6 <__swsetup_r+0x16>
 8004fbc:	69ab      	ldr	r3, [r5, #24]
 8004fbe:	b913      	cbnz	r3, 8004fc6 <__swsetup_r+0x16>
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 f955 	bl	8005270 <__sinit>
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <__swsetup_r+0xd0>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d10f      	bne.n	8004fec <__swsetup_r+0x3c>
 8004fcc:	686c      	ldr	r4, [r5, #4]
 8004fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	0715      	lsls	r5, r2, #28
 8004fd6:	d42c      	bmi.n	8005032 <__swsetup_r+0x82>
 8004fd8:	06d0      	lsls	r0, r2, #27
 8004fda:	d411      	bmi.n	8005000 <__swsetup_r+0x50>
 8004fdc:	2209      	movs	r2, #9
 8004fde:	6032      	str	r2, [r6, #0]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <__swsetup_r+0xd4>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d101      	bne.n	8004ff6 <__swsetup_r+0x46>
 8004ff2:	68ac      	ldr	r4, [r5, #8]
 8004ff4:	e7eb      	b.n	8004fce <__swsetup_r+0x1e>
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <__swsetup_r+0xd8>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	bf08      	it	eq
 8004ffc:	68ec      	ldreq	r4, [r5, #12]
 8004ffe:	e7e6      	b.n	8004fce <__swsetup_r+0x1e>
 8005000:	0751      	lsls	r1, r2, #29
 8005002:	d512      	bpl.n	800502a <__swsetup_r+0x7a>
 8005004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005006:	b141      	cbz	r1, 800501a <__swsetup_r+0x6a>
 8005008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800500c:	4299      	cmp	r1, r3
 800500e:	d002      	beq.n	8005016 <__swsetup_r+0x66>
 8005010:	4630      	mov	r0, r6
 8005012:	f7ff fe43 	bl	8004c9c <_free_r>
 8005016:	2300      	movs	r3, #0
 8005018:	6363      	str	r3, [r4, #52]	; 0x34
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	2300      	movs	r3, #0
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f043 0308 	orr.w	r3, r3, #8
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	b94b      	cbnz	r3, 800504a <__swsetup_r+0x9a>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005040:	d003      	beq.n	800504a <__swsetup_r+0x9a>
 8005042:	4621      	mov	r1, r4
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f9c1 	bl	80053cc <__smakebuf_r>
 800504a:	89a2      	ldrh	r2, [r4, #12]
 800504c:	f012 0301 	ands.w	r3, r2, #1
 8005050:	d00c      	beq.n	800506c <__swsetup_r+0xbc>
 8005052:	2300      	movs	r3, #0
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6963      	ldr	r3, [r4, #20]
 8005058:	425b      	negs	r3, r3
 800505a:	61a3      	str	r3, [r4, #24]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	b953      	cbnz	r3, 8005076 <__swsetup_r+0xc6>
 8005060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005064:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005068:	d1ba      	bne.n	8004fe0 <__swsetup_r+0x30>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	0792      	lsls	r2, r2, #30
 800506e:	bf58      	it	pl
 8005070:	6963      	ldrpl	r3, [r4, #20]
 8005072:	60a3      	str	r3, [r4, #8]
 8005074:	e7f2      	b.n	800505c <__swsetup_r+0xac>
 8005076:	2000      	movs	r0, #0
 8005078:	e7f7      	b.n	800506a <__swsetup_r+0xba>
 800507a:	bf00      	nop
 800507c:	20000180 	.word	0x20000180
 8005080:	08005c48 	.word	0x08005c48
 8005084:	08005c68 	.word	0x08005c68
 8005088:	08005c28 	.word	0x08005c28

0800508c <__sflush_r>:
 800508c:	898a      	ldrh	r2, [r1, #12]
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	4605      	mov	r5, r0
 8005094:	0710      	lsls	r0, r2, #28
 8005096:	460c      	mov	r4, r1
 8005098:	d45a      	bmi.n	8005150 <__sflush_r+0xc4>
 800509a:	684b      	ldr	r3, [r1, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dc05      	bgt.n	80050ac <__sflush_r+0x20>
 80050a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dc02      	bgt.n	80050ac <__sflush_r+0x20>
 80050a6:	2000      	movs	r0, #0
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d0f9      	beq.n	80050a6 <__sflush_r+0x1a>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050b8:	682f      	ldr	r7, [r5, #0]
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	d033      	beq.n	8005126 <__sflush_r+0x9a>
 80050be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	075a      	lsls	r2, r3, #29
 80050c4:	d505      	bpl.n	80050d2 <__sflush_r+0x46>
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	1ac0      	subs	r0, r0, r3
 80050ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050cc:	b10b      	cbz	r3, 80050d2 <__sflush_r+0x46>
 80050ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050d0:	1ac0      	subs	r0, r0, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	4602      	mov	r2, r0
 80050d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050d8:	6a21      	ldr	r1, [r4, #32]
 80050da:	4628      	mov	r0, r5
 80050dc:	47b0      	blx	r6
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	d106      	bne.n	80050f2 <__sflush_r+0x66>
 80050e4:	6829      	ldr	r1, [r5, #0]
 80050e6:	291d      	cmp	r1, #29
 80050e8:	d84b      	bhi.n	8005182 <__sflush_r+0xf6>
 80050ea:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <__sflush_r+0x10c>)
 80050ec:	40ca      	lsrs	r2, r1
 80050ee:	07d6      	lsls	r6, r2, #31
 80050f0:	d547      	bpl.n	8005182 <__sflush_r+0xf6>
 80050f2:	2200      	movs	r2, #0
 80050f4:	6062      	str	r2, [r4, #4]
 80050f6:	04d9      	lsls	r1, r3, #19
 80050f8:	6922      	ldr	r2, [r4, #16]
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	d504      	bpl.n	8005108 <__sflush_r+0x7c>
 80050fe:	1c42      	adds	r2, r0, #1
 8005100:	d101      	bne.n	8005106 <__sflush_r+0x7a>
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	b903      	cbnz	r3, 8005108 <__sflush_r+0x7c>
 8005106:	6560      	str	r0, [r4, #84]	; 0x54
 8005108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800510a:	602f      	str	r7, [r5, #0]
 800510c:	2900      	cmp	r1, #0
 800510e:	d0ca      	beq.n	80050a6 <__sflush_r+0x1a>
 8005110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005114:	4299      	cmp	r1, r3
 8005116:	d002      	beq.n	800511e <__sflush_r+0x92>
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff fdbf 	bl	8004c9c <_free_r>
 800511e:	2000      	movs	r0, #0
 8005120:	6360      	str	r0, [r4, #52]	; 0x34
 8005122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005126:	6a21      	ldr	r1, [r4, #32]
 8005128:	2301      	movs	r3, #1
 800512a:	4628      	mov	r0, r5
 800512c:	47b0      	blx	r6
 800512e:	1c41      	adds	r1, r0, #1
 8005130:	d1c6      	bne.n	80050c0 <__sflush_r+0x34>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0c3      	beq.n	80050c0 <__sflush_r+0x34>
 8005138:	2b1d      	cmp	r3, #29
 800513a:	d001      	beq.n	8005140 <__sflush_r+0xb4>
 800513c:	2b16      	cmp	r3, #22
 800513e:	d101      	bne.n	8005144 <__sflush_r+0xb8>
 8005140:	602f      	str	r7, [r5, #0]
 8005142:	e7b0      	b.n	80050a6 <__sflush_r+0x1a>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005150:	690f      	ldr	r7, [r1, #16]
 8005152:	2f00      	cmp	r7, #0
 8005154:	d0a7      	beq.n	80050a6 <__sflush_r+0x1a>
 8005156:	0793      	lsls	r3, r2, #30
 8005158:	680e      	ldr	r6, [r1, #0]
 800515a:	bf08      	it	eq
 800515c:	694b      	ldreq	r3, [r1, #20]
 800515e:	600f      	str	r7, [r1, #0]
 8005160:	bf18      	it	ne
 8005162:	2300      	movne	r3, #0
 8005164:	eba6 0807 	sub.w	r8, r6, r7
 8005168:	608b      	str	r3, [r1, #8]
 800516a:	f1b8 0f00 	cmp.w	r8, #0
 800516e:	dd9a      	ble.n	80050a6 <__sflush_r+0x1a>
 8005170:	4643      	mov	r3, r8
 8005172:	463a      	mov	r2, r7
 8005174:	6a21      	ldr	r1, [r4, #32]
 8005176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005178:	4628      	mov	r0, r5
 800517a:	47b0      	blx	r6
 800517c:	2800      	cmp	r0, #0
 800517e:	dc07      	bgt.n	8005190 <__sflush_r+0x104>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005190:	4407      	add	r7, r0
 8005192:	eba8 0800 	sub.w	r8, r8, r0
 8005196:	e7e8      	b.n	800516a <__sflush_r+0xde>
 8005198:	20400001 	.word	0x20400001

0800519c <_fflush_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	4605      	mov	r5, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b1db      	cbz	r3, 80051de <_fflush_r+0x42>
 80051a6:	b118      	cbz	r0, 80051b0 <_fflush_r+0x14>
 80051a8:	6983      	ldr	r3, [r0, #24]
 80051aa:	b90b      	cbnz	r3, 80051b0 <_fflush_r+0x14>
 80051ac:	f000 f860 	bl	8005270 <__sinit>
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <_fflush_r+0x48>)
 80051b2:	429c      	cmp	r4, r3
 80051b4:	d109      	bne.n	80051ca <_fflush_r+0x2e>
 80051b6:	686c      	ldr	r4, [r5, #4]
 80051b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051bc:	b17b      	cbz	r3, 80051de <_fflush_r+0x42>
 80051be:	4621      	mov	r1, r4
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c6:	f7ff bf61 	b.w	800508c <__sflush_r>
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <_fflush_r+0x4c>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d101      	bne.n	80051d4 <_fflush_r+0x38>
 80051d0:	68ac      	ldr	r4, [r5, #8]
 80051d2:	e7f1      	b.n	80051b8 <_fflush_r+0x1c>
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <_fflush_r+0x50>)
 80051d6:	429c      	cmp	r4, r3
 80051d8:	bf08      	it	eq
 80051da:	68ec      	ldreq	r4, [r5, #12]
 80051dc:	e7ec      	b.n	80051b8 <_fflush_r+0x1c>
 80051de:	2000      	movs	r0, #0
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	08005c48 	.word	0x08005c48
 80051e8:	08005c68 	.word	0x08005c68
 80051ec:	08005c28 	.word	0x08005c28

080051f0 <_cleanup_r>:
 80051f0:	4901      	ldr	r1, [pc, #4]	; (80051f8 <_cleanup_r+0x8>)
 80051f2:	f000 b8a9 	b.w	8005348 <_fwalk_reent>
 80051f6:	bf00      	nop
 80051f8:	0800519d 	.word	0x0800519d

080051fc <std.isra.0>:
 80051fc:	2300      	movs	r3, #0
 80051fe:	b510      	push	{r4, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	6003      	str	r3, [r0, #0]
 8005204:	6043      	str	r3, [r0, #4]
 8005206:	6083      	str	r3, [r0, #8]
 8005208:	8181      	strh	r1, [r0, #12]
 800520a:	6643      	str	r3, [r0, #100]	; 0x64
 800520c:	81c2      	strh	r2, [r0, #14]
 800520e:	6103      	str	r3, [r0, #16]
 8005210:	6143      	str	r3, [r0, #20]
 8005212:	6183      	str	r3, [r0, #24]
 8005214:	4619      	mov	r1, r3
 8005216:	2208      	movs	r2, #8
 8005218:	305c      	adds	r0, #92	; 0x5c
 800521a:	f7ff fd37 	bl	8004c8c <memset>
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <std.isra.0+0x38>)
 8005220:	6263      	str	r3, [r4, #36]	; 0x24
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <std.isra.0+0x3c>)
 8005224:	62a3      	str	r3, [r4, #40]	; 0x28
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <std.isra.0+0x40>)
 8005228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <std.isra.0+0x44>)
 800522c:	6224      	str	r4, [r4, #32]
 800522e:	6323      	str	r3, [r4, #48]	; 0x30
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	080059fd 	.word	0x080059fd
 8005238:	08005a1f 	.word	0x08005a1f
 800523c:	08005a57 	.word	0x08005a57
 8005240:	08005a7b 	.word	0x08005a7b

08005244 <__sfmoreglue>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	1e4a      	subs	r2, r1, #1
 8005248:	2568      	movs	r5, #104	; 0x68
 800524a:	4355      	muls	r5, r2
 800524c:	460e      	mov	r6, r1
 800524e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005252:	f7ff fd71 	bl	8004d38 <_malloc_r>
 8005256:	4604      	mov	r4, r0
 8005258:	b140      	cbz	r0, 800526c <__sfmoreglue+0x28>
 800525a:	2100      	movs	r1, #0
 800525c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005260:	300c      	adds	r0, #12
 8005262:	60a0      	str	r0, [r4, #8]
 8005264:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005268:	f7ff fd10 	bl	8004c8c <memset>
 800526c:	4620      	mov	r0, r4
 800526e:	bd70      	pop	{r4, r5, r6, pc}

08005270 <__sinit>:
 8005270:	6983      	ldr	r3, [r0, #24]
 8005272:	b510      	push	{r4, lr}
 8005274:	4604      	mov	r4, r0
 8005276:	bb33      	cbnz	r3, 80052c6 <__sinit+0x56>
 8005278:	6483      	str	r3, [r0, #72]	; 0x48
 800527a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800527c:	6503      	str	r3, [r0, #80]	; 0x50
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <__sinit+0x58>)
 8005280:	4a12      	ldr	r2, [pc, #72]	; (80052cc <__sinit+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6282      	str	r2, [r0, #40]	; 0x28
 8005286:	4298      	cmp	r0, r3
 8005288:	bf04      	itt	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	6183      	streq	r3, [r0, #24]
 800528e:	f000 f81f 	bl	80052d0 <__sfp>
 8005292:	6060      	str	r0, [r4, #4]
 8005294:	4620      	mov	r0, r4
 8005296:	f000 f81b 	bl	80052d0 <__sfp>
 800529a:	60a0      	str	r0, [r4, #8]
 800529c:	4620      	mov	r0, r4
 800529e:	f000 f817 	bl	80052d0 <__sfp>
 80052a2:	2200      	movs	r2, #0
 80052a4:	60e0      	str	r0, [r4, #12]
 80052a6:	2104      	movs	r1, #4
 80052a8:	6860      	ldr	r0, [r4, #4]
 80052aa:	f7ff ffa7 	bl	80051fc <std.isra.0>
 80052ae:	2201      	movs	r2, #1
 80052b0:	2109      	movs	r1, #9
 80052b2:	68a0      	ldr	r0, [r4, #8]
 80052b4:	f7ff ffa2 	bl	80051fc <std.isra.0>
 80052b8:	2202      	movs	r2, #2
 80052ba:	2112      	movs	r1, #18
 80052bc:	68e0      	ldr	r0, [r4, #12]
 80052be:	f7ff ff9d 	bl	80051fc <std.isra.0>
 80052c2:	2301      	movs	r3, #1
 80052c4:	61a3      	str	r3, [r4, #24]
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	08005c24 	.word	0x08005c24
 80052cc:	080051f1 	.word	0x080051f1

080052d0 <__sfp>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <__sfp+0x74>)
 80052d4:	681e      	ldr	r6, [r3, #0]
 80052d6:	69b3      	ldr	r3, [r6, #24]
 80052d8:	4607      	mov	r7, r0
 80052da:	b913      	cbnz	r3, 80052e2 <__sfp+0x12>
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff ffc7 	bl	8005270 <__sinit>
 80052e2:	3648      	adds	r6, #72	; 0x48
 80052e4:	68b4      	ldr	r4, [r6, #8]
 80052e6:	6873      	ldr	r3, [r6, #4]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	d503      	bpl.n	80052f4 <__sfp+0x24>
 80052ec:	6833      	ldr	r3, [r6, #0]
 80052ee:	b133      	cbz	r3, 80052fe <__sfp+0x2e>
 80052f0:	6836      	ldr	r6, [r6, #0]
 80052f2:	e7f7      	b.n	80052e4 <__sfp+0x14>
 80052f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052f8:	b16d      	cbz	r5, 8005316 <__sfp+0x46>
 80052fa:	3468      	adds	r4, #104	; 0x68
 80052fc:	e7f4      	b.n	80052e8 <__sfp+0x18>
 80052fe:	2104      	movs	r1, #4
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff ff9f 	bl	8005244 <__sfmoreglue>
 8005306:	6030      	str	r0, [r6, #0]
 8005308:	2800      	cmp	r0, #0
 800530a:	d1f1      	bne.n	80052f0 <__sfp+0x20>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4604      	mov	r4, r0
 8005312:	4620      	mov	r0, r4
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800531a:	81e3      	strh	r3, [r4, #14]
 800531c:	2301      	movs	r3, #1
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	6665      	str	r5, [r4, #100]	; 0x64
 8005322:	6025      	str	r5, [r4, #0]
 8005324:	60a5      	str	r5, [r4, #8]
 8005326:	6065      	str	r5, [r4, #4]
 8005328:	6125      	str	r5, [r4, #16]
 800532a:	6165      	str	r5, [r4, #20]
 800532c:	61a5      	str	r5, [r4, #24]
 800532e:	2208      	movs	r2, #8
 8005330:	4629      	mov	r1, r5
 8005332:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005336:	f7ff fca9 	bl	8004c8c <memset>
 800533a:	6365      	str	r5, [r4, #52]	; 0x34
 800533c:	63a5      	str	r5, [r4, #56]	; 0x38
 800533e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005340:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005342:	e7e6      	b.n	8005312 <__sfp+0x42>
 8005344:	08005c24 	.word	0x08005c24

08005348 <_fwalk_reent>:
 8005348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4680      	mov	r8, r0
 800534e:	4689      	mov	r9, r1
 8005350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005354:	2600      	movs	r6, #0
 8005356:	b914      	cbnz	r4, 800535e <_fwalk_reent+0x16>
 8005358:	4630      	mov	r0, r6
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	68a5      	ldr	r5, [r4, #8]
 8005360:	6867      	ldr	r7, [r4, #4]
 8005362:	3f01      	subs	r7, #1
 8005364:	d501      	bpl.n	800536a <_fwalk_reent+0x22>
 8005366:	6824      	ldr	r4, [r4, #0]
 8005368:	e7f5      	b.n	8005356 <_fwalk_reent+0xe>
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d907      	bls.n	8005380 <_fwalk_reent+0x38>
 8005370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005374:	3301      	adds	r3, #1
 8005376:	d003      	beq.n	8005380 <_fwalk_reent+0x38>
 8005378:	4629      	mov	r1, r5
 800537a:	4640      	mov	r0, r8
 800537c:	47c8      	blx	r9
 800537e:	4306      	orrs	r6, r0
 8005380:	3568      	adds	r5, #104	; 0x68
 8005382:	e7ee      	b.n	8005362 <_fwalk_reent+0x1a>

08005384 <__swhatbuf_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2900      	cmp	r1, #0
 800538e:	b090      	sub	sp, #64	; 0x40
 8005390:	4614      	mov	r4, r2
 8005392:	461d      	mov	r5, r3
 8005394:	da07      	bge.n	80053a6 <__swhatbuf_r+0x22>
 8005396:	2300      	movs	r3, #0
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	89b3      	ldrh	r3, [r6, #12]
 800539c:	061a      	lsls	r2, r3, #24
 800539e:	d410      	bmi.n	80053c2 <__swhatbuf_r+0x3e>
 80053a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a4:	e00e      	b.n	80053c4 <__swhatbuf_r+0x40>
 80053a6:	aa01      	add	r2, sp, #4
 80053a8:	f000 fb8e 	bl	8005ac8 <_fstat_r>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	dbf2      	blt.n	8005396 <__swhatbuf_r+0x12>
 80053b0:	9a02      	ldr	r2, [sp, #8]
 80053b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053ba:	425a      	negs	r2, r3
 80053bc:	415a      	adcs	r2, r3
 80053be:	602a      	str	r2, [r5, #0]
 80053c0:	e7ee      	b.n	80053a0 <__swhatbuf_r+0x1c>
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	2000      	movs	r0, #0
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	b010      	add	sp, #64	; 0x40
 80053ca:	bd70      	pop	{r4, r5, r6, pc}

080053cc <__smakebuf_r>:
 80053cc:	898b      	ldrh	r3, [r1, #12]
 80053ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d0:	079d      	lsls	r5, r3, #30
 80053d2:	4606      	mov	r6, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	d507      	bpl.n	80053e8 <__smakebuf_r+0x1c>
 80053d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	2301      	movs	r3, #1
 80053e2:	6163      	str	r3, [r4, #20]
 80053e4:	b002      	add	sp, #8
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	ab01      	add	r3, sp, #4
 80053ea:	466a      	mov	r2, sp
 80053ec:	f7ff ffca 	bl	8005384 <__swhatbuf_r>
 80053f0:	9900      	ldr	r1, [sp, #0]
 80053f2:	4605      	mov	r5, r0
 80053f4:	4630      	mov	r0, r6
 80053f6:	f7ff fc9f 	bl	8004d38 <_malloc_r>
 80053fa:	b948      	cbnz	r0, 8005410 <__smakebuf_r+0x44>
 80053fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005400:	059a      	lsls	r2, r3, #22
 8005402:	d4ef      	bmi.n	80053e4 <__smakebuf_r+0x18>
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	e7e3      	b.n	80053d8 <__smakebuf_r+0xc>
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <__smakebuf_r+0x7c>)
 8005412:	62b3      	str	r3, [r6, #40]	; 0x28
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	6020      	str	r0, [r4, #0]
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	6163      	str	r3, [r4, #20]
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	6120      	str	r0, [r4, #16]
 8005426:	b15b      	cbz	r3, 8005440 <__smakebuf_r+0x74>
 8005428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542c:	4630      	mov	r0, r6
 800542e:	f000 fb5d 	bl	8005aec <_isatty_r>
 8005432:	b128      	cbz	r0, 8005440 <__smakebuf_r+0x74>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	431d      	orrs	r5, r3
 8005444:	81a5      	strh	r5, [r4, #12]
 8005446:	e7cd      	b.n	80053e4 <__smakebuf_r+0x18>
 8005448:	080051f1 	.word	0x080051f1

0800544c <__malloc_lock>:
 800544c:	4770      	bx	lr

0800544e <__malloc_unlock>:
 800544e:	4770      	bx	lr

08005450 <__sfputc_r>:
 8005450:	6893      	ldr	r3, [r2, #8]
 8005452:	3b01      	subs	r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	b410      	push	{r4}
 8005458:	6093      	str	r3, [r2, #8]
 800545a:	da09      	bge.n	8005470 <__sfputc_r+0x20>
 800545c:	6994      	ldr	r4, [r2, #24]
 800545e:	42a3      	cmp	r3, r4
 8005460:	db02      	blt.n	8005468 <__sfputc_r+0x18>
 8005462:	b2cb      	uxtb	r3, r1
 8005464:	2b0a      	cmp	r3, #10
 8005466:	d103      	bne.n	8005470 <__sfputc_r+0x20>
 8005468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546c:	f7ff bd4e 	b.w	8004f0c <__swbuf_r>
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	1c58      	adds	r0, r3, #1
 8005474:	6010      	str	r0, [r2, #0]
 8005476:	7019      	strb	r1, [r3, #0]
 8005478:	b2c8      	uxtb	r0, r1
 800547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547e:	4770      	bx	lr

08005480 <__sfputs_r>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	4614      	mov	r4, r2
 8005488:	18d5      	adds	r5, r2, r3
 800548a:	42ac      	cmp	r4, r5
 800548c:	d101      	bne.n	8005492 <__sfputs_r+0x12>
 800548e:	2000      	movs	r0, #0
 8005490:	e007      	b.n	80054a2 <__sfputs_r+0x22>
 8005492:	463a      	mov	r2, r7
 8005494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005498:	4630      	mov	r0, r6
 800549a:	f7ff ffd9 	bl	8005450 <__sfputc_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d1f3      	bne.n	800548a <__sfputs_r+0xa>
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054a4 <_vfiprintf_r>:
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	b09d      	sub	sp, #116	; 0x74
 80054aa:	460c      	mov	r4, r1
 80054ac:	4617      	mov	r7, r2
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	4606      	mov	r6, r0
 80054b2:	b118      	cbz	r0, 80054bc <_vfiprintf_r+0x18>
 80054b4:	6983      	ldr	r3, [r0, #24]
 80054b6:	b90b      	cbnz	r3, 80054bc <_vfiprintf_r+0x18>
 80054b8:	f7ff feda 	bl	8005270 <__sinit>
 80054bc:	4b7c      	ldr	r3, [pc, #496]	; (80056b0 <_vfiprintf_r+0x20c>)
 80054be:	429c      	cmp	r4, r3
 80054c0:	d157      	bne.n	8005572 <_vfiprintf_r+0xce>
 80054c2:	6874      	ldr	r4, [r6, #4]
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	0718      	lsls	r0, r3, #28
 80054c8:	d55d      	bpl.n	8005586 <_vfiprintf_r+0xe2>
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05a      	beq.n	8005586 <_vfiprintf_r+0xe2>
 80054d0:	2300      	movs	r3, #0
 80054d2:	9309      	str	r3, [sp, #36]	; 0x24
 80054d4:	2320      	movs	r3, #32
 80054d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054da:	2330      	movs	r3, #48	; 0x30
 80054dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e0:	f04f 0b01 	mov.w	fp, #1
 80054e4:	46b8      	mov	r8, r7
 80054e6:	4645      	mov	r5, r8
 80054e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d155      	bne.n	800559c <_vfiprintf_r+0xf8>
 80054f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80054f4:	d00b      	beq.n	800550e <_vfiprintf_r+0x6a>
 80054f6:	4653      	mov	r3, sl
 80054f8:	463a      	mov	r2, r7
 80054fa:	4621      	mov	r1, r4
 80054fc:	4630      	mov	r0, r6
 80054fe:	f7ff ffbf 	bl	8005480 <__sfputs_r>
 8005502:	3001      	adds	r0, #1
 8005504:	f000 80c4 	beq.w	8005690 <_vfiprintf_r+0x1ec>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	4453      	add	r3, sl
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	f898 3000 	ldrb.w	r3, [r8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80bc 	beq.w	8005690 <_vfiprintf_r+0x1ec>
 8005518:	2300      	movs	r3, #0
 800551a:	f04f 32ff 	mov.w	r2, #4294967295
 800551e:	9304      	str	r3, [sp, #16]
 8005520:	9307      	str	r3, [sp, #28]
 8005522:	9205      	str	r2, [sp, #20]
 8005524:	9306      	str	r3, [sp, #24]
 8005526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800552a:	931a      	str	r3, [sp, #104]	; 0x68
 800552c:	2205      	movs	r2, #5
 800552e:	7829      	ldrb	r1, [r5, #0]
 8005530:	4860      	ldr	r0, [pc, #384]	; (80056b4 <_vfiprintf_r+0x210>)
 8005532:	f7fa fe4d 	bl	80001d0 <memchr>
 8005536:	f105 0801 	add.w	r8, r5, #1
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	2800      	cmp	r0, #0
 800553e:	d131      	bne.n	80055a4 <_vfiprintf_r+0x100>
 8005540:	06d9      	lsls	r1, r3, #27
 8005542:	bf44      	itt	mi
 8005544:	2220      	movmi	r2, #32
 8005546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800554a:	071a      	lsls	r2, r3, #28
 800554c:	bf44      	itt	mi
 800554e:	222b      	movmi	r2, #43	; 0x2b
 8005550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005554:	782a      	ldrb	r2, [r5, #0]
 8005556:	2a2a      	cmp	r2, #42	; 0x2a
 8005558:	d02c      	beq.n	80055b4 <_vfiprintf_r+0x110>
 800555a:	9a07      	ldr	r2, [sp, #28]
 800555c:	2100      	movs	r1, #0
 800555e:	200a      	movs	r0, #10
 8005560:	46a8      	mov	r8, r5
 8005562:	3501      	adds	r5, #1
 8005564:	f898 3000 	ldrb.w	r3, [r8]
 8005568:	3b30      	subs	r3, #48	; 0x30
 800556a:	2b09      	cmp	r3, #9
 800556c:	d96d      	bls.n	800564a <_vfiprintf_r+0x1a6>
 800556e:	b371      	cbz	r1, 80055ce <_vfiprintf_r+0x12a>
 8005570:	e026      	b.n	80055c0 <_vfiprintf_r+0x11c>
 8005572:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <_vfiprintf_r+0x214>)
 8005574:	429c      	cmp	r4, r3
 8005576:	d101      	bne.n	800557c <_vfiprintf_r+0xd8>
 8005578:	68b4      	ldr	r4, [r6, #8]
 800557a:	e7a3      	b.n	80054c4 <_vfiprintf_r+0x20>
 800557c:	4b4f      	ldr	r3, [pc, #316]	; (80056bc <_vfiprintf_r+0x218>)
 800557e:	429c      	cmp	r4, r3
 8005580:	bf08      	it	eq
 8005582:	68f4      	ldreq	r4, [r6, #12]
 8005584:	e79e      	b.n	80054c4 <_vfiprintf_r+0x20>
 8005586:	4621      	mov	r1, r4
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff fd11 	bl	8004fb0 <__swsetup_r>
 800558e:	2800      	cmp	r0, #0
 8005590:	d09e      	beq.n	80054d0 <_vfiprintf_r+0x2c>
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	b01d      	add	sp, #116	; 0x74
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	2b25      	cmp	r3, #37	; 0x25
 800559e:	d0a7      	beq.n	80054f0 <_vfiprintf_r+0x4c>
 80055a0:	46a8      	mov	r8, r5
 80055a2:	e7a0      	b.n	80054e6 <_vfiprintf_r+0x42>
 80055a4:	4a43      	ldr	r2, [pc, #268]	; (80056b4 <_vfiprintf_r+0x210>)
 80055a6:	1a80      	subs	r0, r0, r2
 80055a8:	fa0b f000 	lsl.w	r0, fp, r0
 80055ac:	4318      	orrs	r0, r3
 80055ae:	9004      	str	r0, [sp, #16]
 80055b0:	4645      	mov	r5, r8
 80055b2:	e7bb      	b.n	800552c <_vfiprintf_r+0x88>
 80055b4:	9a03      	ldr	r2, [sp, #12]
 80055b6:	1d11      	adds	r1, r2, #4
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	9103      	str	r1, [sp, #12]
 80055bc:	2a00      	cmp	r2, #0
 80055be:	db01      	blt.n	80055c4 <_vfiprintf_r+0x120>
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	e004      	b.n	80055ce <_vfiprintf_r+0x12a>
 80055c4:	4252      	negs	r2, r2
 80055c6:	f043 0302 	orr.w	r3, r3, #2
 80055ca:	9207      	str	r2, [sp, #28]
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	f898 3000 	ldrb.w	r3, [r8]
 80055d2:	2b2e      	cmp	r3, #46	; 0x2e
 80055d4:	d110      	bne.n	80055f8 <_vfiprintf_r+0x154>
 80055d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80055da:	2b2a      	cmp	r3, #42	; 0x2a
 80055dc:	f108 0101 	add.w	r1, r8, #1
 80055e0:	d137      	bne.n	8005652 <_vfiprintf_r+0x1ae>
 80055e2:	9b03      	ldr	r3, [sp, #12]
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	9203      	str	r2, [sp, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfb8      	it	lt
 80055ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f2:	f108 0802 	add.w	r8, r8, #2
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	4d31      	ldr	r5, [pc, #196]	; (80056c0 <_vfiprintf_r+0x21c>)
 80055fa:	f898 1000 	ldrb.w	r1, [r8]
 80055fe:	2203      	movs	r2, #3
 8005600:	4628      	mov	r0, r5
 8005602:	f7fa fde5 	bl	80001d0 <memchr>
 8005606:	b140      	cbz	r0, 800561a <_vfiprintf_r+0x176>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	1b40      	subs	r0, r0, r5
 800560c:	fa03 f000 	lsl.w	r0, r3, r0
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	4303      	orrs	r3, r0
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	f898 1000 	ldrb.w	r1, [r8]
 800561e:	4829      	ldr	r0, [pc, #164]	; (80056c4 <_vfiprintf_r+0x220>)
 8005620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005624:	2206      	movs	r2, #6
 8005626:	f108 0701 	add.w	r7, r8, #1
 800562a:	f7fa fdd1 	bl	80001d0 <memchr>
 800562e:	2800      	cmp	r0, #0
 8005630:	d034      	beq.n	800569c <_vfiprintf_r+0x1f8>
 8005632:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <_vfiprintf_r+0x224>)
 8005634:	bb03      	cbnz	r3, 8005678 <_vfiprintf_r+0x1d4>
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	3307      	adds	r3, #7
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	3308      	adds	r3, #8
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005644:	444b      	add	r3, r9
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	e74c      	b.n	80054e4 <_vfiprintf_r+0x40>
 800564a:	fb00 3202 	mla	r2, r0, r2, r3
 800564e:	2101      	movs	r1, #1
 8005650:	e786      	b.n	8005560 <_vfiprintf_r+0xbc>
 8005652:	2300      	movs	r3, #0
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	4618      	mov	r0, r3
 8005658:	250a      	movs	r5, #10
 800565a:	4688      	mov	r8, r1
 800565c:	3101      	adds	r1, #1
 800565e:	f898 2000 	ldrb.w	r2, [r8]
 8005662:	3a30      	subs	r2, #48	; 0x30
 8005664:	2a09      	cmp	r2, #9
 8005666:	d903      	bls.n	8005670 <_vfiprintf_r+0x1cc>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0c5      	beq.n	80055f8 <_vfiprintf_r+0x154>
 800566c:	9005      	str	r0, [sp, #20]
 800566e:	e7c3      	b.n	80055f8 <_vfiprintf_r+0x154>
 8005670:	fb05 2000 	mla	r0, r5, r0, r2
 8005674:	2301      	movs	r3, #1
 8005676:	e7f0      	b.n	800565a <_vfiprintf_r+0x1b6>
 8005678:	ab03      	add	r3, sp, #12
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4622      	mov	r2, r4
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <_vfiprintf_r+0x228>)
 8005680:	a904      	add	r1, sp, #16
 8005682:	4630      	mov	r0, r6
 8005684:	f3af 8000 	nop.w
 8005688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800568c:	4681      	mov	r9, r0
 800568e:	d1d8      	bne.n	8005642 <_vfiprintf_r+0x19e>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	065b      	lsls	r3, r3, #25
 8005694:	f53f af7d 	bmi.w	8005592 <_vfiprintf_r+0xee>
 8005698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569a:	e77c      	b.n	8005596 <_vfiprintf_r+0xf2>
 800569c:	ab03      	add	r3, sp, #12
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4622      	mov	r2, r4
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <_vfiprintf_r+0x228>)
 80056a4:	a904      	add	r1, sp, #16
 80056a6:	4630      	mov	r0, r6
 80056a8:	f000 f888 	bl	80057bc <_printf_i>
 80056ac:	e7ec      	b.n	8005688 <_vfiprintf_r+0x1e4>
 80056ae:	bf00      	nop
 80056b0:	08005c48 	.word	0x08005c48
 80056b4:	08005c88 	.word	0x08005c88
 80056b8:	08005c68 	.word	0x08005c68
 80056bc:	08005c28 	.word	0x08005c28
 80056c0:	08005c8e 	.word	0x08005c8e
 80056c4:	08005c92 	.word	0x08005c92
 80056c8:	00000000 	.word	0x00000000
 80056cc:	08005481 	.word	0x08005481

080056d0 <_printf_common>:
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	4691      	mov	r9, r2
 80056d6:	461f      	mov	r7, r3
 80056d8:	688a      	ldr	r2, [r1, #8]
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bfb8      	it	lt
 80056e4:	4613      	movlt	r3, r2
 80056e6:	f8c9 3000 	str.w	r3, [r9]
 80056ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ee:	4606      	mov	r6, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	b112      	cbz	r2, 80056fa <_printf_common+0x2a>
 80056f4:	3301      	adds	r3, #1
 80056f6:	f8c9 3000 	str.w	r3, [r9]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005704:	3302      	addmi	r3, #2
 8005706:	f8c9 3000 	strmi.w	r3, [r9]
 800570a:	6825      	ldr	r5, [r4, #0]
 800570c:	f015 0506 	ands.w	r5, r5, #6
 8005710:	d107      	bne.n	8005722 <_printf_common+0x52>
 8005712:	f104 0a19 	add.w	sl, r4, #25
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	f8d9 2000 	ldr.w	r2, [r9]
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	429d      	cmp	r5, r3
 8005720:	db29      	blt.n	8005776 <_printf_common+0xa6>
 8005722:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	3300      	adds	r3, #0
 800572a:	bf18      	it	ne
 800572c:	2301      	movne	r3, #1
 800572e:	0692      	lsls	r2, r2, #26
 8005730:	d42e      	bmi.n	8005790 <_printf_common+0xc0>
 8005732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005736:	4639      	mov	r1, r7
 8005738:	4630      	mov	r0, r6
 800573a:	47c0      	blx	r8
 800573c:	3001      	adds	r0, #1
 800573e:	d021      	beq.n	8005784 <_printf_common+0xb4>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	68e5      	ldr	r5, [r4, #12]
 8005744:	f8d9 2000 	ldr.w	r2, [r9]
 8005748:	f003 0306 	and.w	r3, r3, #6
 800574c:	2b04      	cmp	r3, #4
 800574e:	bf08      	it	eq
 8005750:	1aad      	subeq	r5, r5, r2
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	bf0c      	ite	eq
 8005758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800575c:	2500      	movne	r5, #0
 800575e:	4293      	cmp	r3, r2
 8005760:	bfc4      	itt	gt
 8005762:	1a9b      	subgt	r3, r3, r2
 8005764:	18ed      	addgt	r5, r5, r3
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	341a      	adds	r4, #26
 800576c:	454d      	cmp	r5, r9
 800576e:	d11b      	bne.n	80057a8 <_printf_common+0xd8>
 8005770:	2000      	movs	r0, #0
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005776:	2301      	movs	r3, #1
 8005778:	4652      	mov	r2, sl
 800577a:	4639      	mov	r1, r7
 800577c:	4630      	mov	r0, r6
 800577e:	47c0      	blx	r8
 8005780:	3001      	adds	r0, #1
 8005782:	d103      	bne.n	800578c <_printf_common+0xbc>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	3501      	adds	r5, #1
 800578e:	e7c2      	b.n	8005716 <_printf_common+0x46>
 8005790:	18e1      	adds	r1, r4, r3
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	2030      	movs	r0, #48	; 0x30
 8005796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800579a:	4422      	add	r2, r4
 800579c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057a4:	3302      	adds	r3, #2
 80057a6:	e7c4      	b.n	8005732 <_printf_common+0x62>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4622      	mov	r2, r4
 80057ac:	4639      	mov	r1, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	47c0      	blx	r8
 80057b2:	3001      	adds	r0, #1
 80057b4:	d0e6      	beq.n	8005784 <_printf_common+0xb4>
 80057b6:	f109 0901 	add.w	r9, r9, #1
 80057ba:	e7d7      	b.n	800576c <_printf_common+0x9c>

080057bc <_printf_i>:
 80057bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057c0:	4617      	mov	r7, r2
 80057c2:	7e0a      	ldrb	r2, [r1, #24]
 80057c4:	b085      	sub	sp, #20
 80057c6:	2a6e      	cmp	r2, #110	; 0x6e
 80057c8:	4698      	mov	r8, r3
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80057d4:	f000 80bc 	beq.w	8005950 <_printf_i+0x194>
 80057d8:	d81a      	bhi.n	8005810 <_printf_i+0x54>
 80057da:	2a63      	cmp	r2, #99	; 0x63
 80057dc:	d02e      	beq.n	800583c <_printf_i+0x80>
 80057de:	d80a      	bhi.n	80057f6 <_printf_i+0x3a>
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	f000 80c8 	beq.w	8005976 <_printf_i+0x1ba>
 80057e6:	2a58      	cmp	r2, #88	; 0x58
 80057e8:	f000 808a 	beq.w	8005900 <_printf_i+0x144>
 80057ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80057f4:	e02a      	b.n	800584c <_printf_i+0x90>
 80057f6:	2a64      	cmp	r2, #100	; 0x64
 80057f8:	d001      	beq.n	80057fe <_printf_i+0x42>
 80057fa:	2a69      	cmp	r2, #105	; 0x69
 80057fc:	d1f6      	bne.n	80057ec <_printf_i+0x30>
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005806:	d023      	beq.n	8005850 <_printf_i+0x94>
 8005808:	1d11      	adds	r1, r2, #4
 800580a:	6019      	str	r1, [r3, #0]
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	e027      	b.n	8005860 <_printf_i+0xa4>
 8005810:	2a73      	cmp	r2, #115	; 0x73
 8005812:	f000 80b4 	beq.w	800597e <_printf_i+0x1c2>
 8005816:	d808      	bhi.n	800582a <_printf_i+0x6e>
 8005818:	2a6f      	cmp	r2, #111	; 0x6f
 800581a:	d02a      	beq.n	8005872 <_printf_i+0xb6>
 800581c:	2a70      	cmp	r2, #112	; 0x70
 800581e:	d1e5      	bne.n	80057ec <_printf_i+0x30>
 8005820:	680a      	ldr	r2, [r1, #0]
 8005822:	f042 0220 	orr.w	r2, r2, #32
 8005826:	600a      	str	r2, [r1, #0]
 8005828:	e003      	b.n	8005832 <_printf_i+0x76>
 800582a:	2a75      	cmp	r2, #117	; 0x75
 800582c:	d021      	beq.n	8005872 <_printf_i+0xb6>
 800582e:	2a78      	cmp	r2, #120	; 0x78
 8005830:	d1dc      	bne.n	80057ec <_printf_i+0x30>
 8005832:	2278      	movs	r2, #120	; 0x78
 8005834:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005838:	496e      	ldr	r1, [pc, #440]	; (80059f4 <_printf_i+0x238>)
 800583a:	e064      	b.n	8005906 <_printf_i+0x14a>
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005842:	1d11      	adds	r1, r2, #4
 8005844:	6019      	str	r1, [r3, #0]
 8005846:	6813      	ldr	r3, [r2, #0]
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e0a3      	b.n	8005998 <_printf_i+0x1dc>
 8005850:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005854:	f102 0104 	add.w	r1, r2, #4
 8005858:	6019      	str	r1, [r3, #0]
 800585a:	d0d7      	beq.n	800580c <_printf_i+0x50>
 800585c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005860:	2b00      	cmp	r3, #0
 8005862:	da03      	bge.n	800586c <_printf_i+0xb0>
 8005864:	222d      	movs	r2, #45	; 0x2d
 8005866:	425b      	negs	r3, r3
 8005868:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800586c:	4962      	ldr	r1, [pc, #392]	; (80059f8 <_printf_i+0x23c>)
 800586e:	220a      	movs	r2, #10
 8005870:	e017      	b.n	80058a2 <_printf_i+0xe6>
 8005872:	6820      	ldr	r0, [r4, #0]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	f010 0f80 	tst.w	r0, #128	; 0x80
 800587a:	d003      	beq.n	8005884 <_printf_i+0xc8>
 800587c:	1d08      	adds	r0, r1, #4
 800587e:	6018      	str	r0, [r3, #0]
 8005880:	680b      	ldr	r3, [r1, #0]
 8005882:	e006      	b.n	8005892 <_printf_i+0xd6>
 8005884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005888:	f101 0004 	add.w	r0, r1, #4
 800588c:	6018      	str	r0, [r3, #0]
 800588e:	d0f7      	beq.n	8005880 <_printf_i+0xc4>
 8005890:	880b      	ldrh	r3, [r1, #0]
 8005892:	4959      	ldr	r1, [pc, #356]	; (80059f8 <_printf_i+0x23c>)
 8005894:	2a6f      	cmp	r2, #111	; 0x6f
 8005896:	bf14      	ite	ne
 8005898:	220a      	movne	r2, #10
 800589a:	2208      	moveq	r2, #8
 800589c:	2000      	movs	r0, #0
 800589e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80058a2:	6865      	ldr	r5, [r4, #4]
 80058a4:	60a5      	str	r5, [r4, #8]
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	f2c0 809c 	blt.w	80059e4 <_printf_i+0x228>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	f020 0004 	bic.w	r0, r0, #4
 80058b2:	6020      	str	r0, [r4, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d13f      	bne.n	8005938 <_printf_i+0x17c>
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	f040 8095 	bne.w	80059e8 <_printf_i+0x22c>
 80058be:	4675      	mov	r5, lr
 80058c0:	2a08      	cmp	r2, #8
 80058c2:	d10b      	bne.n	80058dc <_printf_i+0x120>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	07da      	lsls	r2, r3, #31
 80058c8:	d508      	bpl.n	80058dc <_printf_i+0x120>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	6862      	ldr	r2, [r4, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bfde      	ittt	le
 80058d2:	2330      	movle	r3, #48	; 0x30
 80058d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058dc:	ebae 0305 	sub.w	r3, lr, r5
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	f8cd 8000 	str.w	r8, [sp]
 80058e6:	463b      	mov	r3, r7
 80058e8:	aa03      	add	r2, sp, #12
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff feef 	bl	80056d0 <_printf_common>
 80058f2:	3001      	adds	r0, #1
 80058f4:	d155      	bne.n	80059a2 <_printf_i+0x1e6>
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295
 80058fa:	b005      	add	sp, #20
 80058fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005900:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005904:	493c      	ldr	r1, [pc, #240]	; (80059f8 <_printf_i+0x23c>)
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800590e:	f100 0504 	add.w	r5, r0, #4
 8005912:	601d      	str	r5, [r3, #0]
 8005914:	d001      	beq.n	800591a <_printf_i+0x15e>
 8005916:	6803      	ldr	r3, [r0, #0]
 8005918:	e002      	b.n	8005920 <_printf_i+0x164>
 800591a:	0655      	lsls	r5, r2, #25
 800591c:	d5fb      	bpl.n	8005916 <_printf_i+0x15a>
 800591e:	8803      	ldrh	r3, [r0, #0]
 8005920:	07d0      	lsls	r0, r2, #31
 8005922:	bf44      	itt	mi
 8005924:	f042 0220 	orrmi.w	r2, r2, #32
 8005928:	6022      	strmi	r2, [r4, #0]
 800592a:	b91b      	cbnz	r3, 8005934 <_printf_i+0x178>
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	f022 0220 	bic.w	r2, r2, #32
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	2210      	movs	r2, #16
 8005936:	e7b1      	b.n	800589c <_printf_i+0xe0>
 8005938:	4675      	mov	r5, lr
 800593a:	fbb3 f0f2 	udiv	r0, r3, r2
 800593e:	fb02 3310 	mls	r3, r2, r0, r3
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005948:	4603      	mov	r3, r0
 800594a:	2800      	cmp	r0, #0
 800594c:	d1f5      	bne.n	800593a <_printf_i+0x17e>
 800594e:	e7b7      	b.n	80058c0 <_printf_i+0x104>
 8005950:	6808      	ldr	r0, [r1, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6949      	ldr	r1, [r1, #20]
 8005956:	f010 0f80 	tst.w	r0, #128	; 0x80
 800595a:	d004      	beq.n	8005966 <_printf_i+0x1aa>
 800595c:	1d10      	adds	r0, r2, #4
 800595e:	6018      	str	r0, [r3, #0]
 8005960:	6813      	ldr	r3, [r2, #0]
 8005962:	6019      	str	r1, [r3, #0]
 8005964:	e007      	b.n	8005976 <_printf_i+0x1ba>
 8005966:	f010 0f40 	tst.w	r0, #64	; 0x40
 800596a:	f102 0004 	add.w	r0, r2, #4
 800596e:	6018      	str	r0, [r3, #0]
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	d0f6      	beq.n	8005962 <_printf_i+0x1a6>
 8005974:	8019      	strh	r1, [r3, #0]
 8005976:	2300      	movs	r3, #0
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	4675      	mov	r5, lr
 800597c:	e7b1      	b.n	80058e2 <_printf_i+0x126>
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	1d11      	adds	r1, r2, #4
 8005982:	6019      	str	r1, [r3, #0]
 8005984:	6815      	ldr	r5, [r2, #0]
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	4628      	mov	r0, r5
 800598c:	f7fa fc20 	bl	80001d0 <memchr>
 8005990:	b108      	cbz	r0, 8005996 <_printf_i+0x1da>
 8005992:	1b40      	subs	r0, r0, r5
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	2300      	movs	r3, #0
 800599c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a0:	e79f      	b.n	80058e2 <_printf_i+0x126>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4639      	mov	r1, r7
 80059a8:	4630      	mov	r0, r6
 80059aa:	47c0      	blx	r8
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0a2      	beq.n	80058f6 <_printf_i+0x13a>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	079b      	lsls	r3, r3, #30
 80059b4:	d507      	bpl.n	80059c6 <_printf_i+0x20a>
 80059b6:	2500      	movs	r5, #0
 80059b8:	f104 0919 	add.w	r9, r4, #25
 80059bc:	68e3      	ldr	r3, [r4, #12]
 80059be:	9a03      	ldr	r2, [sp, #12]
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	429d      	cmp	r5, r3
 80059c4:	db05      	blt.n	80059d2 <_printf_i+0x216>
 80059c6:	68e0      	ldr	r0, [r4, #12]
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	4298      	cmp	r0, r3
 80059cc:	bfb8      	it	lt
 80059ce:	4618      	movlt	r0, r3
 80059d0:	e793      	b.n	80058fa <_printf_i+0x13e>
 80059d2:	2301      	movs	r3, #1
 80059d4:	464a      	mov	r2, r9
 80059d6:	4639      	mov	r1, r7
 80059d8:	4630      	mov	r0, r6
 80059da:	47c0      	blx	r8
 80059dc:	3001      	adds	r0, #1
 80059de:	d08a      	beq.n	80058f6 <_printf_i+0x13a>
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7eb      	b.n	80059bc <_printf_i+0x200>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1a7      	bne.n	8005938 <_printf_i+0x17c>
 80059e8:	780b      	ldrb	r3, [r1, #0]
 80059ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f2:	e765      	b.n	80058c0 <_printf_i+0x104>
 80059f4:	08005caa 	.word	0x08005caa
 80059f8:	08005c99 	.word	0x08005c99

080059fc <__sread>:
 80059fc:	b510      	push	{r4, lr}
 80059fe:	460c      	mov	r4, r1
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	f000 f894 	bl	8005b30 <_read_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	bfab      	itete	ge
 8005a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a10:	181b      	addge	r3, r3, r0
 8005a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a16:	bfac      	ite	ge
 8005a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a1a:	81a3      	strhlt	r3, [r4, #12]
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <__swrite>:
 8005a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	461f      	mov	r7, r3
 8005a24:	898b      	ldrh	r3, [r1, #12]
 8005a26:	05db      	lsls	r3, r3, #23
 8005a28:	4605      	mov	r5, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4616      	mov	r6, r2
 8005a2e:	d505      	bpl.n	8005a3c <__swrite+0x1e>
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	f000 f868 	bl	8005b0c <_lseek_r>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a46:	81a3      	strh	r3, [r4, #12]
 8005a48:	4632      	mov	r2, r6
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	f000 b817 	b.w	8005a84 <_write_r>

08005a56 <__sseek>:
 8005a56:	b510      	push	{r4, lr}
 8005a58:	460c      	mov	r4, r1
 8005a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5e:	f000 f855 	bl	8005b0c <_lseek_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	bf15      	itete	ne
 8005a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a72:	81a3      	strheq	r3, [r4, #12]
 8005a74:	bf18      	it	ne
 8005a76:	81a3      	strhne	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__sclose>:
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 b813 	b.w	8005aa8 <_close_r>
	...

08005a84 <_write_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4c07      	ldr	r4, [pc, #28]	; (8005aa4 <_write_r+0x20>)
 8005a88:	4605      	mov	r5, r0
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	6022      	str	r2, [r4, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f7fe fd68 	bl	8004568 <_write>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_write_r+0x1e>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_write_r+0x1e>
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	20005b28 	.word	0x20005b28

08005aa8 <_close_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4c06      	ldr	r4, [pc, #24]	; (8005ac4 <_close_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4605      	mov	r5, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	f7fe fd80 	bl	80045b8 <_close>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_close_r+0x1a>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_close_r+0x1a>
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20005b28 	.word	0x20005b28

08005ac8 <_fstat_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4c07      	ldr	r4, [pc, #28]	; (8005ae8 <_fstat_r+0x20>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4605      	mov	r5, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	f7fe fd72 	bl	80045be <_fstat>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	d102      	bne.n	8005ae4 <_fstat_r+0x1c>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	b103      	cbz	r3, 8005ae4 <_fstat_r+0x1c>
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20005b28 	.word	0x20005b28

08005aec <_isatty_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4c06      	ldr	r4, [pc, #24]	; (8005b08 <_isatty_r+0x1c>)
 8005af0:	2300      	movs	r3, #0
 8005af2:	4605      	mov	r5, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	f7fe fd66 	bl	80045c8 <_isatty>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_isatty_r+0x1a>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_isatty_r+0x1a>
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20005b28 	.word	0x20005b28

08005b0c <_lseek_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4c07      	ldr	r4, [pc, #28]	; (8005b2c <_lseek_r+0x20>)
 8005b10:	4605      	mov	r5, r0
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	2200      	movs	r2, #0
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f7fe fd56 	bl	80045cc <_lseek>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_lseek_r+0x1e>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_lseek_r+0x1e>
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	20005b28 	.word	0x20005b28

08005b30 <_read_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4c07      	ldr	r4, [pc, #28]	; (8005b50 <_read_r+0x20>)
 8005b34:	4605      	mov	r5, r0
 8005b36:	4608      	mov	r0, r1
 8005b38:	4611      	mov	r1, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	6022      	str	r2, [r4, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f7fe fd04 	bl	800454c <_read>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_read_r+0x1e>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_read_r+0x1e>
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20005b28 	.word	0x20005b28

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
